Question:
 1. Define a function grep in Scheme whose first argument is a
    predicate and second argument a list.  It returns a new list of
    all of the elements of the argument list for which the predicate
    is true.  Do not use a higher-order function.  [2pt]

Overlapped: set(['function', 'use', 'elements', 'predicate', 'list', 'second', 'first', 'argument', 'returns', 'new', 'scheme', 'true', 'define']) 
Overlap: 13 
Accuracy: 0.448275862069 

Question:
 2. Define a function positives which uses grep (above) to accept a
    list of numbers and return only the positive ones.  Use a lambda
    expression, not a function name, as one of its arguments.  [1pt]

Overlapped: set(['function', 'use', 'return', 'name', 'list', 'one', 'ones', 'arguments', 'lambda', 'define']) 
Overlap: 10 
Accuracy: 0.357142857143 

Question:
 3. Define a function sum which returns the sum of all elements of a
    list.  Do not use any higher-order functions.  Use constant ($ O (
    1 ) $) stack space.  [2pt]

Overlapped: set(['function', 'functions', 'elements', 'space', 'sum', 'list', 'use', 'returns', 'stack', 'define']) 
Overlap: 10 
Accuracy: 0.357142857143 

Question:
 3. What is the running time of the following function?
       (define (f n)
          (if (< n 2) n
              (+ (f (- n 1)) (f (- n 2)))))
    (A) $ O ( n ) $
    (B) $ O ( log sub 2 n ) $
    (C) $ O ( n sup 2 ) $
    (D) $ O ( 2 sup n ) $

Overlapped: set(['function', 'c', 'b', 'sub', 'f', 'n', 'log', 'sup', 'following', 'define']) 
Overlap: 10 
Accuracy: 0.12987012987 

Question:
 4. What amount of stack space is taken up by evaluating that same
    function?
    (A) $ O ( n ) $
    (B) $ O ( log sub 2 n ) $
    (C) $ O ( n sup 2 ) $
    (D) $ O ( 2 sup n ) $

Overlapped: set(['function', 'c', 'b', 'log', 'space', 'n', 'sup', 'taken', 'stack', 'sub']) 
Overlap: 10 
Accuracy: 0.222222222222 

Question:
 7. Data types in Perl and Scheme are:
    (A) strong and dynamic.
    (B) strong and static.
    (C) weak and dynamic.
    (D) weak and static.

Overlapped: set(['c', 'b', 'weak', 'dynamic', 'perl', 'static', 'scheme', 'strong', 'data', 'types']) 
Overlap: 10 
Accuracy: 0.357142857143 

Question:
 9. Define the same function in Perl.  It takes a reference to a
    function of two arguments, followed by references to two arrays
    and applies the function pairwise to the arrays, returning an
    array of the shorter length.  [2pt]
    Example:  @y = zip sub{$_[0]+$_[1]}, [1, 2, 3], [4, 5, 6, 7];
    print "@y\n";
    Prints:  5 7 9

Overlapped: set(['function', 'sub', 'two', 'perl', 'length', 'arguments', 'applies', 'array', 'define']) 
Overlap: 9 
Accuracy: 0.116883116883 

Question:
 8. A static link in a stack frame points at:
    (A) the address of the call instruction that activated this
        function.
    (B) the stack frame of the calling function.
    (C) the stack frame of the function in which this function is
        nested.
    (D) the top of the function call stack.

Overlapped: set(['function', 'c', 'b', 'nested', 'points', 'static', 'calling', 'stack']) 
Overlap: 8 
Accuracy: 0.205128205128 

Question:
 4. Define the same function sum using the higher-order function
    foldleft, whose arguments are a unit value, a binary function, and
    a list.  [1pt]

Overlapped: set(['function', 'sum', 'list', 'value', 'arguments', 'using', 'define']) 
Overlap: 7 
Accuracy: 0.318181818182 

Question:
 7. Write a complete program in Perl that reads in words from all of
    the filenames specified in @ARGV, and after end of file of the
    last file, prints out each word, one per line, sorted
    lexicographically, with each word followed by a count of the
    number of times it occurred.  Exit status is 0 for success and 1
    if any file could not be opened.  Print suitable error messaages
    for files that could not be opened.  If no files are specified,
    read the standard input.  Do not use the <> operator.  Use /\w+/
    to match words or /\W+/ to split delimiters.  If @ARGV is empty,
    use "-" (standard input).  [5pt]

    #!/usr/bin/perl
    use strict;
    use warnings;
    $0 =~ s|.*/||;

Overlapped: set(['use', 'number', 'perl', 'write', 'line', 'one', 'match']) 
Overlap: 7 
Accuracy: 0.0679611650485 

Question:
 8. Define the function zip in Scheme.  It takes a function and a pair
    of lists and returns a list having pairwise applied the function
    to corresponding pairs of elements in the list.  If the lists are
    of unequal length, the function stops when the shorter list runs
    out.  [2pt]
    Example:  (zip + '(1 2 3) '(4 5 6 7))
    Returns:  (5 7 9)

Overlapped: set(['function', 'elements', 'list', 'length', 'returns', 'scheme', 'define']) 
Overlap: 7 
Accuracy: 0.118644067797 

Question:
10. Write a program in Perl which prints out all of the command line
    arguments (but not the program name) on one line, each separated
    from the next with one space, but does not print a space in the
    front or at the end.  It finishes by printing a newline character.
    [1pt]

    #!/usr/bin/perl

Overlapped: set(['name', 'space', 'perl', 'write', 'arguments', 'line', 'one']) 
Overlap: 7 
Accuracy: 0.194444444444 

Question:
 1. Which of these languages evaluates expressions in a lazy manner by
    default?
    (A) Haskell
    (B) Lisp
    (C) Perl
    (D) Scheme

Overlapped: set(['c', 'b', 'lisp', 'perl', 'languages', 'haskell', 'scheme']) 
Overlap: 7 
Accuracy: 0.318181818182 

Question:
 6. In C, when is a static local variable bound to a particular
    virtual address?
    (A) When the program is compiled.
    (B) When the program is linked.
    (C) When the program is loaded into execution by the exec system
        call.
    (D) When the function in which it is declared is called.

Overlapped: set(['function', 'c', 'b', 'virtual', 'static', 'variable', 'called']) 
Overlap: 7 
Accuracy: 0.184210526316 

Question:
 9. Assuming only pure Java code with no sneaky tricks written in C,
    If M = memory leaks, D = dangling references, and U = unsafe type
    conversions or casting, which of the following are possible in
    Java?
    (A) all of them.
    (B) none of them.
    (C) only D, but neither M nor U.
    (D) only M, but neither D nor U.

Overlapped: set(['c', 'b', 'java', 'pure', 'following', 'type']) 
Overlap: 6 
Accuracy: 0.12 

Question:
 6. Name the two kinds of ad hoc polymorphism and give an example of
    each.  [2pt]

Overlapped: set(['ad', 'polymorphism', 'name', 'hoc', 'two']) 
Overlap: 5 
Accuracy: 0.384615384615 

Question:
 5. Name the two kinds of universal polymorphism and give an example
    of each.  [2pt]

Overlapped: set(['polymorphism', 'universal', 'name', 'two']) 
Overlap: 4 
Accuracy: 0.333333333333 

Question:
 5. What is the value of:
       (cadr '((1 2 3) (4 5 6) (7 8 9)))
    (A) 1
    (B) (4 5 6)
    (C) (2 3)
    (D) ((7 8 9))

Overlapped: set(['cadr', 'b', 'c', 'value']) 
Overlap: 4 
Accuracy: 0.078431372549 

Question:
10. Given the C declaration char **p;, which expression is invalid?
    (A) &(&p)
    (B) &(*p)
    (C) *(&p)
    (D) *(*p)

Overlapped: set(['given', 'b', 'c', 'declaration']) 
Overlap: 4 
Accuracy: 0.102564102564 

Question:
 2. Which of the following C operators is ``lazy''?
    (A) &&
    (B) ++
    (C) ==
    (D) >>

Overlapped: set(['following', 'c', 'b']) 
Overlap: 3 
Accuracy: 0.125 

Question:
Overlapped: set([]) 
Overlap: 0 
Accuracy: 0 

