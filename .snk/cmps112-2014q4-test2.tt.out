Question:
1. For each language described here, fill in the name of the language.
   Choose from among the following languages:  Algol 60, AWK, Basic,
   C++, C, COBOL, FORTRAN, Haskell, Intercal, Java, Lisp, ML, OCaml,
   Pascal, Perl, PL/I, Prolog, Python, Scheme, Simula 67.  (Grading:
   Deduct 1/2 point for each wrong or missing answer, but do not
   assign a score less than 0.)  [2pt]

   +--------------+------------------------------------------------+
   |              |Language which uses primarily lazy evaluation,  |
   |              |based on the $lambda$-calculus.                 |
   +--------------+------------------------------------------------+
   |              |Kemeny and Kurtz designed this language         |
   |              |included in the IBM PC ROM in 1980.             |
   +--------------+------------------------------------------------+
   |              |Scripting language designed by ${ size 11 bold  |
   |              |A } under bar$ho, ${ size 11 bold W } under     |
   |              |bar$einberger, and ${ size 11 bold K } under    |
   |              |bar$ernighan.                                   |
   +--------------+------------------------------------------------+
   |              |Van Rossum designed this scripting language     |
   |              |named after Monty's Flying Circus.              |
   +--------------+------------------------------------------------+
   |              |Steele and Sussman designed this functional     |
   |              |language with lexical scoping rules.            |
   +--------------+------------------------------------------------+
   |Intercal      |Parody language with the come from, maybe, and  |
   |              |forget control structures.                      |
   +-``Abandon-All+Sanity,-Ye-Who-Enter-Here.''-----http://catb.org/esr/
    intercal/

Overlapped: set(['control', 'among', 'deduct', 'less', 'fill', 'functional', '60', 'pascal', 'haskell', 'cobol', '67', 'size', 'described', 'grading', 'point', 'perl', 'languages', 'fortran', 'score', 'choose', 'basic', 'answer', 'scheme', 'structures', 'missing', 'rules', 'wrong', 'awk', 'designed', 'simula', 'intercal', 'come', 'ibm', 'c', 'bar', 'name', 'language', 'java', 'lisp', 'ml', 'ocaml', 'w', 'maybe', 'following', 'algol', 'prolog', 'lambda']) 
Overlap: 47 
Accuracy: 0.115479115479 

Question:
3. Smalltalk.  Extend class Object with the message fibonacci:, which
   returns an array filled with the first $n$ Fibonacci numbers.
   [3pt]
                           |
   Expected output.        | Your answer.
   st> a := Object new.    | Object extend [
   an Object               |    fibonacci: n [
   st> a fibonacci: 10.    |
   (0 1 1 2 3 5 8 13 21 34 |
   )                       |
                           |
                           |
                           |
                           |

Overlapped: set(['extend', 'class', 'object', 'st', 'returns', 'answer', 'new', 'array', 'n', 'message', 'smalltalk', 'first']) 
Overlap: 12 
Accuracy: 0.166666666667 

Question:
 1. A thunk is:
    (A) A heap allocated value yet to be initialized.
    (B) A pointer to a virtual function table used in dynamic
        dispatch.
    (C) An unevaluated expression passed into a function which may be
        evaluated by the function if needed.
    (D) The sound of dead code dropping.

Overlapped: set(['function', 'value', 'c', 'used', 'dynamic', 'virtual', 'thunk', 'b', 'dispatch', 'heap', 'table', 'pointer']) 
Overlap: 12 
Accuracy: 0.292682926829 

Question:
6. Scheme.  Define the higher-order function foldl whose arguments are
   a binary function, an identity element, and a list in that order.
   It folds them from left to right into a single value.  [2pt]

   (define (foldl fn unit list)

   )

Overlapped: set(['function', 'right', 'list', 'value', 'element', 'arguments', 'left', 'scheme', 'order', 'define']) 
Overlap: 10 
Accuracy: 0.277777777778 

Question:
11. In Smalltalk and Scheme, type checking is:
    (A) strong and dynamic.
    (B) strong and static.
    (C) weak and dynamic.
    (D) weak and static.

Overlapped: set(['c', 'b', 'checking', 'weak', 'dynamic', 'static', 'scheme', 'strong', 'type', 'smalltalk']) 
Overlap: 10 
Accuracy: 0.344827586207 

Question:
9. Smalltalk.  Define a block called product so that when given a
   vector as its value: argument, it returns the product of the
   vector.  [2pt]

   product := [

   ].
   product value: #(1 2 3 4 5).
   120

Overlapped: set(['product', 'given', 'value', 'argument', 'returns', 'vector', 'called', 'smalltalk', 'define']) 
Overlap: 9 
Accuracy: 0.230769230769 

Question:
 6. Java supports:
    (A) single inheritance only.
    (B) multiple (mixin) inheritance of functions (methods) but not
        fields.
    (C) multiple inheritance of functions (methods) and shared
        inheritance of fields.
    (D) multiple inheritance of functions (methods) and repeated
        inheritance of fields.

Overlapped: set(['functions', 'b', 'multiple', 'methods', 'java', 'inheritance', 'c', 'repeated', 'shared']) 
Overlap: 9 
Accuracy: 0.1875 

Question:
4. Scheme.  Define the function merge which takes two lists of numbers
   sorted in ascending order and returns a list of these numbers
   sorted into ascending order.  [3pt]
                          |
   Expected output.       | Your answer.
   >(merge '(1 3 5) '(2 4 | (define (merge list1 list2)
   6 8))                  |
   (1 2 3 4 5 6 8)        |
   >(merge '(0 1 1 2 3)   |
   '(1 4 9))              |
   (0 1 1 1 2 3 4 9)      |
                          |
                          |

Overlapped: set(['function', 'list', 'two', 'returns', 'answer', 'scheme', 'order', 'define']) 
Overlap: 8 
Accuracy: 0.0808080808081 

Question:
5. Scheme.  Write the function product in tail recursive accumulator
   style so that it computes the product of a list of numbers.  [1pt]

Overlapped: set(['function', 'style', 'list', 'product', 'write', 'tail', 'scheme']) 
Overlap: 7 
Accuracy: 0.388888888889 

Question:
8. Scheme.  Using foldl, define the function length, which returns the
   length of a list.  [1pt]

Overlapped: set(['function', 'list', 'length', 'returns', 'using', 'scheme', 'define']) 
Overlap: 7 
Accuracy: 0.411764705882 

Question:
11. Scheme.  Define the function reverse, which reverses a list.  Do
   not use any higher-order functions.  Do not use append.  [2pt]

   (define (reverse list)

Overlapped: set(['function', 'use', 'reverse', 'list', 'functions', 'scheme', 'define']) 
Overlap: 7 
Accuracy: 0.269230769231 

Question:
7. Scheme.  Using foldl, define the function product, which computes
   the product of a list of numbers.  [1pt]

Overlapped: set(['function', 'product', 'list', 'using', 'scheme', 'define']) 
Overlap: 6 
Accuracy: 0.333333333333 

Question:
10. Perl.  Write a line of code that uses map to compute the product
   of an array.  [1pt]

Overlapped: set(['map', 'product', 'perl', 'write', 'line', 'array']) 
Overlap: 6 
Accuracy: 0.4 

Question:
 2. What is 2?
    (A) (caar '(1 2 3))
    (B) (cadr '(1 2 3))
    (C) (cdar '(1 2 3))
    (D) (cddr '(1 2 3))

Overlapped: set(['c', 'b', 'cdar', 'cadr', 'caar', 'cddr']) 
Overlap: 6 
Accuracy: 0.122448979592 

Question:
 9. Which of these functions can be written in a tail-recursive style?
    (A) append
    (B) fold_right
    (C) map
    (D) reverse

Overlapped: set(['map', 'functions', 'b', 'reverse', 'c', 'style']) 
Overlap: 6 
Accuracy: 0.3 

Question:
2. Perl.  Write a program in Perl which will use <> to read in lines.
   At end of file, print the number of characters, words, and lines.
   A word is any sequence of characters delimited by white space.
   [2pt]

Overlapped: set(['write', 'use', 'space', 'number', 'perl']) 
Overlap: 5 
Accuracy: 0.151515151515 

Question:
 8. Static type checking in C and C++ is done:
    (A) by the preprocessor
    (B) by the compiler
    (C) by the linker
    (D) at run time

Overlapped: set(['checking', 'type', 'c', 'b', 'static']) 
Overlap: 5 
Accuracy: 0.217391304348 

Question:
10. In Smalltalk, how does one compute $ sqrt 2 $?
    (A) 2 **: 0.5
    (B) 2 sqrt
    (C) Number sqrt: 2
    (D) sqrt 2

Overlapped: set(['c', 'b', 'number', 'smalltalk', 'one']) 
Overlap: 5 
Accuracy: 0.15625 

Question:
 3. What is ((lambda (x) x) (+ 2 3))?
    (A) (+ 2 3)
    (B) +
    (C) 5
    (D) x

Overlapped: set(['x', 'c', 'b', 'lambda']) 
Overlap: 4 
Accuracy: 0.117647058824 

Question:
 5. In the \lambda-calculus expression $ ( lambda x . ^ + ^ x ^ y ) $:
    (A) $x$ is bound and $y$ is bound.
    (B) $x$ is bound and $y$ is free.
    (C) $x$ is free and $y$ is bound.
    (D) $x$ is free and $y$ is free.

Overlapped: set(['x', 'c', 'b', 'lambda']) 
Overlap: 4 
Accuracy: 0.0689655172414 

Question:
 7. What is ((lambda (x) x) '(+ 2 3))?
    (A) (+ 2 3)
    (B) +
    (C) 5
    (D) x

Overlapped: set(['x', 'c', 'b', 'lambda']) 
Overlap: 4 
Accuracy: 0.114285714286 

Question:
 4. What is the parenthesized equivalent of the Smalltalk expression a
    b c: d?
    (A) ((a b) c: d)
    (B) (a (b c: d))
    (C) (a b) (c: d)
    (D) a ((b c:) d)

Overlapped: set(['c', 'b', 'smalltalk']) 
Overlap: 3 
Accuracy: 0.063829787234 

Question:
Overlapped: set([]) 
Overlap: 0 
Accuracy: 0 

