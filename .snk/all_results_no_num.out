Question:
 5. A closure is:
    (A) A special field of a structure or class used to point at a
        base class when implementing shared multiple inheritance.
    (B) A special type declaration in Ocaml used to distinguish sum
        types from product types.
    (C) A structure on the heap, used to hold variables of an outer
        function when referenced by an inner function.
    (D) A table used to dynamically dispatch virtual functions in an
        object-oriented environment.

Overlapped: set(['referenced', 'point', 'variables', 'dispatch', 'table', 'special', 'functions', 'outer', 'inheritance', 'sum', 'virtual', 'environment', 'field', 'inner', 'shared', 'type', 'dynamically', 'function', 'product', 'used', 'multiple', 'structure', 'implementing', 'base', 'heap', 'declaration', 'distinguish', 'hold', 'class', 'types', 'closure']) 
Overlap: 31 

Question:
1. For each language described here, fill in the name of the language.
   Choose from among the following languages:  Algol 60, AWK, Basic,
   C++, C, COBOL, FORTRAN, Haskell, Intercal, Java, Lisp, ML, OCaml,
   Pascal, Perl, PL/I, Prolog, Simula 67.  (Grading:  deduct 1/2 point
   for each wrong or missing answer, but do not score less than 0.)
   [3pt]

   +--------------+---------------------------------------------------------------------------------+
   |              |Bjarne Stroustrup's most noted contribution to language design.                  |
   +--------------+---------------------------------------------------------------------------------+
   |              |Business data processing language, designers included Grace Hopper.              |
   +--------------+---------------------------------------------------------------------------------+
   |              |Designed in Europe to express algorithms in a structured way.                    |
   +--------------+---------------------------------------------------------------------------------+
   |              |First version of Unix was 9000 lines of this language (plus some assembly code). |
   +--------------+---------------------------------------------------------------------------------+
   |              |List processing language typically used in artificial intelligence.              |
   +--------------+---------------------------------------------------------------------------------+
   |              |Numeric and scientific computation language developed at IBM.                    |
   +--------------+---------------------------------------------------------------------------------+
   |              |Simulation language that influenced the design of C++.                           |
   +--------------+---------------------------------------------------------------------------------+
   |              |Small language for structured programming designed by Niklaus Wirth.             |
   +--------------+---------------------------------------------------------------------------------+
   |              |Sun Microsystems claimed this language is ``write once, run anywhere''.          |
   +--------------+---------------------------------------------------------------------------------+

Overlapped: set(['among', 'deduct', 'point', 'developed', 'design', 'computation', 'fill', 'write', 'described', 'less', 'languages', 'score', 'way', 'answer', 'used', 'scientific', 'missing', 'processing', 'wrong', 'designed', 'included', 'designers', 'data', 'name', 'language', 'structured', 'programming', 'influenced', 'following', 'contribution', 'noted']) 
Overlap: 31 

Question:
 9. A closure is:
    (A) A special field of a structure or class used to point at a
        base class when implementing shared multiple inheritance.
    (B) A special type declaration in Ocaml used to distinguish sum
        types from product types.
    (C) A structure on the heap, used to hold variables of an outer
        function when referenced by an inner function.
    (D) A table used to dynamically dispatch virtual functions in an
        object-oriented environment.

Overlapped: set(['referenced', 'point', 'variables', 'dispatch', 'table', 'special', 'functions', 'outer', 'inheritance', 'sum', 'virtual', 'environment', 'field', 'inner', 'shared', 'type', 'dynamically', 'function', 'product', 'used', 'multiple', 'structure', 'implementing', 'base', 'heap', 'declaration', 'distinguish', 'hold', 'class', 'types', 'closure']) 
Overlap: 31 

Question:
1. For each language described here, fill in the name of the language.
   Choose from among the following languages:  Algol 60, AWK, Bash,
   Basic, BCPL, C, C++, COBOL, Forth, FORTRAN, Haskell, Intercal,
   Java, Lisp, ML, OCaml, Pascal, Perl, PL/I, Prolog, Simula 67,
   Smalltalk.  Grading:  deduct ½ point for each wrong or missing
   answer, but do not score less than 0.  [3pt]

   +--------------+---------------------------------------------------------------------------------+
   |              |Bjarne Stroustrup's most noted contribution to language design.                  |
   +--------------+---------------------------------------------------------------------------------+
   |              |Business data processing language, designers included Grace Hopper.              |
   +--------------+---------------------------------------------------------------------------------+
   |              |Designed in Europe to express algorithms in a structured way.                    |
   +--------------+---------------------------------------------------------------------------------+
   |              |First version of Unix was 9000 lines of this language (plus some assembly code). |
   +--------------+---------------------------------------------------------------------------------+
   |              |List processing language typically used in artificial intelligence.              |
   +--------------+---------------------------------------------------------------------------------+
   |              |Numeric and scientific computation language developed at IBM.                    |
   +--------------+---------------------------------------------------------------------------------+
   |              |Simulation language that influenced the design of C++.                           |
   +--------------+---------------------------------------------------------------------------------+
   |              |Small language for structured programming designed by Niklaus Wirth.             |
   +--------------+---------------------------------------------------------------------------------+
   |              |Sun Microsystems claimed this language is ``write once, run anywhere''.          |
   +--------------+---------------------------------------------------------------------------------+

Overlapped: set(['among', 'deduct', 'point', 'developed', 'design', 'computation', 'fill', 'write', 'described', 'less', 'languages', 'score', 'way', 'answer', 'used', 'scientific', 'missing', 'processing', 'wrong', 'designed', 'included', 'designers', 'data', 'name', 'language', 'structured', 'programming', 'influenced', 'following', 'contribution', 'noted']) 
Overlap: 31 

Question:
 1. A closure is:
    (A) A special field of a structure or class used to point at a
        base class when implementing shared multiple inheritance.
    (B) A special type declaration in Ocaml used to distinguish sum
        types from product types.
    (C) A structure on the heap, used to hold variables of an outer
        function when referenced by an inner function.
    (D) A table used to dynamically dispatch virtual functions in an
        object-oriented environment.

Overlapped: set(['referenced', 'point', 'variables', 'dispatch', 'table', 'special', 'functions', 'outer', 'inheritance', 'sum', 'virtual', 'environment', 'field', 'inner', 'shared', 'type', 'dynamically', 'function', 'product', 'used', 'multiple', 'structure', 'implementing', 'base', 'heap', 'declaration', 'distinguish', 'hold', 'class', 'types', 'closure']) 
Overlap: 31 

Question:
1. For each language described here, fill in the name of the language.
   Choose from among the following languages:  Algol 60, AWK, Basic,
   C++, C, COBOL, FORTRAN, Haskell, Intercal, Java, Lisp, ML, OCaml,
   Pascal, Perl, PL/I, Prolog, Python, Scheme, Simula 67.  (Grading:
   Deduct 1/2 point for each wrong or missing answer, but do not
   assign a score less than 0.)  [2pt]

   +--------------+------------------------------------------------+
   |              |Language which uses primarily lazy evaluation,  |
   |              |based on the $lambda$-calculus.                 |
   +--------------+------------------------------------------------+
   |              |Kemeny and Kurtz designed this language         |
   |              |included in the IBM PC ROM in 1980.             |
   +--------------+------------------------------------------------+
   |              |Scripting language designed by ${ size 11 bold  |
   |              |A } under bar$ho, ${ size 11 bold W } under     |
   |              |bar$einberger, and ${ size 11 bold K } under    |
   |              |bar$ernighan.                                   |
   +--------------+------------------------------------------------+
   |              |Van Rossum designed this scripting language     |
   |              |named after Monty's Flying Circus.              |
   +--------------+------------------------------------------------+
   |              |Steele and Sussman designed this functional     |
   |              |language with lexical scoping rules.            |
   +--------------+------------------------------------------------+
   |Intercal      |Parody language with the come from, maybe, and  |
   |              |forget control structures.                      |
   +-``Abandon-All+Sanity,-Ye-Who-Enter-Here.''-----http://catb.org/esr/
    intercal/

Overlapped: set(['control', 'among', 'less', 'functional', 'fill', 'described', 'point', 'languages', 'score', 'answer', 'size', 'structures', 'missing', 'rules', 'wrong', 'designed', 'come', 'bar', 'name', 'language', 'maybe', 'following', 'lambda']) 
Overlap: 23 

Question:
5. Define the function fold_left:  the first argument is a function to
   use to fold the list, the second argument is a unit value used to
   fold the first element, the third argument is a list.  Use tail
   recursion:  the function must use $ O ( 1 ) $ stack.

    (a) Scheme.  [2pt]
        > (define (length list) (fold_left (lambda (n _) (+ n 1)) 0
        list))
        > (define (sum list) (fold_left + 0 list))
        > (length '(1 2 3 4 5))
        5
        > (sum '(1 2 3 4 5))
        15

    (b) Ocaml.  [2pt]
        # fold_left;;
        - : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
        # let length list = fold_left (fun n _ -> n + 1) 0 list;;
        val length : 'a list -> int = <fun>
        # let sum list = fold_left (+) 0 list;;
        val sum : int list -> int = <fun>
        # length [1;2;3;4;5];;
        - : int = 5
        # sum [1;2;3;4;5];;
        - : int = 15

Overlapped: set(['int', 'argument', 'fold', 'second', 'element', 'use', 'val', 'recursion', 'sum', 'tail', 'define', 'function', 'used', 'let', 'stack', 'b', 'list', 'value', 'n', 'length', 'fun', 'first', 'lambda']) 
Overlap: 23 

Question:
1. Define gcd which uses Euclid's algorithm to find the greatest
   common divisor for two integers $x > 0$ and $y > 0$.  The C version
   is given.  Example:  $ roman gcd ( 111 , 259 ) = roman gcd ( 111 ,
   148 ) = roman gcd ( 111 , 37 ) = roman gcd ( 74 , 37 ) = roman gcd
   ( 37 , 37 ) = 37 $.
      int gcd (int x, int y) {
         while (x != y) if (x > y) x -= y; else y -= x;
         return x;
      }

    (a) Scheme.  Use tail recursion.  [2pt]
        Example call:  (define g (gcd 111 259)).

    (b) Ocaml.  Use tail recursion and curried format.  [2pt]
        Example call:  let d = gcd 111 259;;.

    (c) Smalltalk.  Extend class Integer with a keyword method gcd:.
        Use a loop.  [2pt]
        Example call:  g := 111 gcd: 259.

    (d) Perl.  Use a loop or tail recursion.  Properly prototype the
        function.  [2pt]
        Example call:  $g = gcd 111, 259;

    (e) Prolog.  [2pt]
        Example call:  gcd( 111, 259, G ).

2. \lambda-calculus.  Given the expression in the \lambda-calculus
   shown at the top of each box, show the derivation order to the
   number 25 for each of normal order and applicative order
   evaluation.  [1pt]

   +-----------------------------------------------------------+------------------------------------------------------------+
   |                 normal order evaluation                   |                applicative order evaluation                |
   +-----------------------------------------------------------+------------------------------------------------------------+
   |$ ( lambda x ~ . ~ ~ * ~ x ~ x ) ~ ~ ( + ~ 2 ~ 3 ) ~ ~ = $ | $ ( lambda x ~ . ~ ~ * ~ x ~ x ) ~ ~ ( + ~ 2 ~ 3 ) ~ ~ = $ |
   |                                                           |                                                            |
   |                                                           |                                                            |
   |                                                           |                                                            |
   +-----------------------------------------------------------+------------------------------------------------------------+

Overlapped: set(['function', 'c', 'b', 'return', 'g', 'format', 'else', 'int', 'e', 'number', 'two', 'order', 'define', 'tail', 'let', 'recursion', 'x', 'given', 'class', 'lambda']) 
Overlap: 20 

Question:
 1. In the following table, there are fragmentary examples of various
    kinds of polymorphism.  In each box, identify the example by writing
    one of the words:  ad hoc;  universal.  Then further identify them
    by writing one of the words:  conversion;  inheritance;
    overloading;  template.  [2pt]

    +-------------------------------+-------------------------------+
    |class foo {void f(); }         |class stack<item_t> {          |
    |class bar: public foo {        |void push (item_t); }          |
    |void f(); }                    |                               |
    +-------------------------------+-------------------------------+
    |int add (int x, int y);        |double f (double x);           |
    |double add (double x,          |f (6);                         |
    |double y);                     |                               |
    +-------------------------------+-------------------------------+

Overlapped: set(['polymorphism', 'conversion', 'bar', 'ad', 'inheritance', 'int', 'double', 'universal', 'f', 'one', 'overloading', 'void', 'x', 'following', 'table', 'foo', 'stack', 'hoc']) 
Overlap: 18 

Question:
 1. Some fragmentary examples of polymorphism are given in each entry
    in the following table.  Identify the general category by writing
    universal or ad hoc beside each.  Further identify them with one
    of the terms conversion;  generic;  inclusion;  or overloading.
    [2pt]

    +-------------------------------+-------------------------------+
    |let rec len = function         |template <typename item_t>     |
    |  | [] -> 0                    |class stack { };               |
    |  | _::cdr -> 1 + len cdr      |stack<int> si;                 |
    +-------------------------------+-------------------------------+
    |class foo {                    |double sqrt (double);          |
    |   foo () {}                   |n = sqrt (6);                  |
    |   foo (int a) {}              |                               |
    +-------------------------------+-------------------------------+

Overlapped: set(['function', 'polymorphism', 'given', 'ad', 'inclusion', 'int', 'double', 'universal', 'conversion', 'one', 'overloading', 'cdr', 'rec', 'following', 'table', 'foo', 'stack', 'hoc']) 
Overlap: 18 

Question:
12. Smalltalk:  Define the class Stack.  Internally it has an array of
    fixed size and no attempt is made to verify pre- or post-
    conditions.  It simply crashes on overflow or underflow.  Define
    the following methods:  [6pt]
     (a) Class method new uses new: to create a stack of maximum
         capacity 10.
     (b) Class method new: creates a stack of the size given by its
         argument.
     (c) Instance method init: initializes the array representation
         and sets the top to 0
     (d) Instance method pop removes and returns the top item on the
         stack.
     (e) Instance method push: pushes a new item onto the top of the
         stack.
     (f) Instance method empty reports on whether the stack is empty
         or noT.
    bash-3.2$ cat stack.test.st
    FileStream fileIn: 'stack.st'.
    s := Stack new.
    s push: 1; push: 5; push: 10.
    s inspect.
    [s empty not] whileTrue: [
       stdout << s pop << Character nl].
    bash-3.2$ gst <stack.test.st
    An instance of Stack
      array: (1 5 10 nil nil nil nil nil nil nil )
      top: 3
    10
    5
    1

Overlapped: set(['c', 'b', 'e', 'methods', 'nil', 'f', 'class', 'given', 'argument', 'creates', 'returns', 'following', 'new', 'array', 'stack', 'maximum', 'size']) 
Overlap: 17 

Question:
 5. In Java or C++, which statement can cause control to pass from the
    current function to the calling function, or perhaps the caller of
    the caller, or perhaps even all the way back to the main function?
    (A) break
    (B) continue
    (C) return
    (D) throw

Overlapped: set(['control', 'even', 'return', 'statement', 'perhaps', 'caller', 'back', 'calling', 'current', 'continue', 'way', 'pass', 'break', 'function', 'main', 'cause', 'throw']) 
Overlap: 17 

Question:
8. Prolog.  Write facts in Prolog to describe the graph at left.  Use
   the term arrow whose first argument is the tail of the arrow and
   whose second argument is the head of the arrow, i.e., arrow(X,Y)
   means that node X points directly at node Y.  Write a rule
   arrow2(X,Y) which finds out if it is possible to get from X to Y by
   following exactly two arrows.  [2pt]

   .PS 1i
   arrowht = .2
   arrowwid = arrowht/2
   r=4*circlerad
   A: circle "a"
   B: circle "b" at A+(r,r/2)
   C: circle "c" at A+(r,-r/2)
   D: circle "d" at C+(r,r/2)
   E: circle "e" at C+(r,-r/2)
   arrow from A to B chop
   arrow from A to C chop
   arrow from C to D chop
   arrow from C to D chop
   arrow from C to E chop
   .PE

Overlapped: set(['following', 'c', 'b', 'e', 'graph', 'tail', 'argument', 'chop', '1i', 'second', 'points', 'two', 'arrow', 'facts', 'circle', 'first', 'left']) 
Overlap: 17 

Question:
8. Smalltalk.  Define classes Num and Mul that can be used as a basis
   for expression trees.  Num has an instance value number, a class
   method new:  which sets the number;  and instance methods set:
   which updates the number, and value which returns the number.  Mul
   has two instance values which point at left and right
   subexpressions, a class method left:right:  which creates a new
   instance with pointers to other Nums and Muls, and instance methods
   left:right:  which updates the left and right children of the
   expression tree, and value which evaluates the expression.  [4pt]

   st> a:= Num new: 6.
   a Num
   st> b:= Num new: 8.
   a Num
   st> a value.
   6
   st> b value.
   8
   st> c:= Mul left:a right:b.
   a Mul
   st> c value.
   48
   st> b set: 99.
   a Num
   st> c value.
   594

Overlapped: set(['c', 'set', 'methods', 'point', 'tree', 'number', 'used', 'two', 'creates', 'returns', 'right', 'value', 'new', 'st', 'b', 'class', 'left']) 
Overlap: 17 

Question:
11. Smalltalk:  Define the class Stack.  Internally it has an array of
   fixed size and no attempt is made to verify pre- or post-
   conditions.  It simply crashes on overflow or underflow.  Define
   the following methods:  [6pt]
    (a) Class method new uses new: to create a stack of maximum
        capacity 10.
    (b) Class method new: creates a stack of the size given by its
        argument.
    (c) Instance method init: initializes the array representation and
        sets the top to 0
    (d) Instance method pop removes and returns the top item on the
        stack.
    (e) Instance method push: pushes a new item onto the top of the
        stack.
    (f) Instance method empty reports on whether the stack is empty or
        not.
   bash-3.2$ cat stack.test.st
   FileStream fileIn: 'stack.st'.
   s := Stack new.
   s push: 1; push: 5; push: 10.
   s inspect.
   [s empty not] whileTrue: [
      stdout << s pop << Character nl].
   bash-3.2$ gst <stack.test.st
   An instance of Stack
     array: (1 5 10 nil nil nil nil nil nil nil )
     top: 3
   10
   5
   1

Overlapped: set(['c', 'b', 'e', 'methods', 'nil', 'f', 'class', 'given', 'argument', 'creates', 'returns', 'following', 'new', 'array', 'stack', 'maximum', 'size']) 
Overlap: 17 

Question:
 6. Inheritance in C++.  Your answers should be as minimal as possible,
    provided the question is answered.  You don't need to provide a main
    function nor any constructors.

     (a) Define a base class base with an abstract function
         void print().  Define a class dstr which is derived form base
         with a private string field and which overrides the base's
         function print.  Define a class dint which does the same, but
         with an int field.  Show only what goes in base.h and do not
         define any inline functions.  If we have a variable base *p,
         then p->print();  should print the string or integer field, as
         appropriate.  [3pt]

     (b) Show the implementation of both print functions as they would
         appear in base.cc.  [3pt]

.EQ
delim $$
.EN

Overlapped: set(['function', 'provided', 'functions', 'b', 'string', 'int', 'delim', 'void', 'question', 'answers', 'field', 'base', 'variable', 'main', 'class', 'define']) 
Overlap: 16 

Question:
 7. Prolog:  Given the following graph, Define several facts called
    edge which define the graph.  Also, define a rule adjacent which
    can be used to test whether or not two nodes are adjacent to each
    other.  [2pt]

    .PS 0.75i
    A: circle "a"
    B: circle "b" at A+(4*circlerad,0)
    C: circle "c" at B+(4*circlerad,0)
    D: circle "d" at B-(0,4*circlerad)
    E: circle "e" at A-(0,4*circlerad)
    line from A to B chop
    line from B to C chop
    line from B to D chop
    line from D to E chop
    line from A to E chop
    line from C to D chop
    .PE

Overlapped: set(['c', 'used', 'e', 'called', 'graph', 'two', 'edge', 'chop', 'following', 'b', 'circle', 'adjacent', 'facts', 'line', 'nodes', 'define']) 
Overlap: 16 

Question:
3. Scheme.  Using apply, map, max, and cons, define the function depth
   for any argument.  If it is null?, its depth is 1.  Otherwise, if
   it is not a pair?, its depth is 0.  The depth of anything else (a
   list) is one more than the maximum depth of the elements of the
   list.  [2pt]
   > (depth '(1 2 (3 4 (5 6)) 88))
   3
   > (depth '(a b c))
   1
   > (depth '())
   1
   > (depth 7)
   0

Overlapped: set(['function', 'map', 'c', 'cons', 'depth', 'maximum', 'max', 'list', 'argument', 'one', 'else', 'elements', 'apply', 'null', 'b', 'define']) 
Overlap: 16 

Question:
2. Define the function filter whose first argument is a predicate and
   whose second argument is a list.  It returns a list consisting of
   all elements of the argument list which satisfy the predicate.  Do
   not use a higher-order function.

    (a) Scheme.  [2pt]
        > (filter (lambda (x) (> x 0)) '(1 -1 2 -3 5 -99 8))
        (1 2 5 8)
        > (filter even '(1 2 3 4 5 6 7 8 9))
        (2 4 6 8)

    (b) Ocaml.  [2pt]
        # filter;;
        - : ('a -> bool) -> 'a list -> 'a list = <fun>
        # filter (fun x -> x > 0) [1;-1;2;-3;5;-99;8];;
        - : int list = [1; 2; 5; 8]
        # filter even [1;2;3;4;5;6;7;8;9];;
        - : int list = [2; 4; 6; 8]

Overlapped: set(['even', 'function', 'use', 'elements', 'predicate', 'int', 'list', 'argument', 'first', 'second', 'b', 'bool', 'fun', 'x', 'returns', 'lambda']) 
Overlap: 16 

Question:
5. Scheme.  Draw a picture of the following Scheme expression.  For
   each cons cell, draw a small box with two arrows coming out of it.
   Each arrow should point at either another cell or an atom.  Write
   the Greek letter phi (\phi) to indicate a null pointer.  [2pt]
   ((a) (b c) ((d e)))

Overlapped: set(['draw', 'picture', 'phi', 'cons', 'e', 'arrow', 'point', 'c', 'two', 'cell', 'small', 'b', 'letter', 'following', 'null', 'pointer']) 
Overlap: 16 

Question:
 5. Scheme:  Assuming you have a hash table named hash, which contains
    pointers to binary functions, Write code to evaluate an expression
    tree.  The tree is represented as three element lists, where car is
    the function, cadr is the left operand, and caddr is the right
    operand.  Leaf nodes are symbols whose values are in the table
    symtab, also a hash.  You need not do error checking:  all variables
    and operators are valid, all leaf nodes are symbols, and all
    interior nodes have exactly three elements.  [3pt]

    (define (evaltree tree)

Overlapped: set(['function', 'cadr', 'right', 'checking', 'car', 'variables', 'contains', 'tree', 'functions', 'element', 'elements', 'table', 'nodes', 'left', 'define']) 
Overlap: 15 

Question:
 1. Ocaml:  Define a function split which takes a predicate and a list
    and returns a 2-tuple of lists, where all elements of the first
    list cause the predicate to return true, and all other elements
    are in the second list.  The elements must remain in the same
    order as on input.  [3pt]
    # split;;
    - : ('a -> bool) -> 'a list -> 'a list * 'a list = <fun>
    # split even [1; 3; 5; 2; 8; 4; 1; 10];;
    - : int list * int list = ([2; 8; 4; 10], [1; 3; 5; 1])

Overlapped: set(['even', 'function', 'predicate', 'elements', 'return', 'int', 'true', 'list', 'returns', 'second', 'bool', 'fun', 'cause', 'order', 'first']) 
Overlap: 15 

Question:
 6. Ocaml:  Define a function zipwith whose first argument is a
    curried function of two arguments, second argument is a single
    value, and whose third and fourth arguments are lists.  It merges
    the lists into a single list by applying the function in a
    pairwise manner, using the single value if one list runs out
    first.  [3pt]
    # zipwith;;
    - : ('a -> 'a -> 'b) -> 'a -> 'a list -> 'a list -> 'b list =
    <fun>
    # (+);;
    - : int -> int -> int = <fun>
    # zipwith (+) 0;;
    - : int list -> int list -> int list = <fun>
    # zipwith (+) 0 [1; 2; 3] [4; 5; 6; 7; 8];;
    - : int list = [5; 7; 9; 7; 8]
    # zipwith (^) "**" ["foo"] ["bar"; "baz"];;
    - : string list = ["foobar"; "**baz"]
    # zipwith (^) "**" ["foo"; "bar"] ["baz"];;
    - : string list = ["foobaz"; "bar**"]

Overlapped: set(['function', 'foo', 'bar', 'string', 'int', 'list', 'argument', 'value', 'two', 'second', 'arguments', 'fun', 'using', 'one', 'first']) 
Overlap: 15 

Question:
11. Prolog.  Given facts like the ones presented at the left, define
   the rules father and mother where the first argument is the parent
   and the second argument is the child.  [2pt]

   parents(henry_vii,elizabeth_of_york,henry_viii).
   parents(henry_viii,catherine_of_aragon,mary_i).
   parents(henry_viii,anne_boleyn,elizabeth_i).
   parents(henry_viii,jane_seymour,edward_vi).
   | ?- father(X,henry_viii).
   X = henry_vii
   | ?- father(henry_viii,X).
   X = mary_i
   X = elizabeth_i
   X = edward_vi

Overlapped: set(['like', 'parent', 'presented', 'rules', 'mother', 'father', 'argument', 'first', 'second', 'ones', 'parents', 'child', 'facts', 'left', 'define']) 
Overlap: 15 

Question:
9. Scheme.  Draw a picture of the following Scheme expression.  For
   each cons cell, draw a rectangular box divided into to parts, and
   draw an arrow from each of the car and the cdr fields to the cell
   or object pointed to.  [2pt]
   ((a b c) d (e) (f (g) h))

Overlapped: set(['picture', 'draw', 'cons', 'e', 'arrow', 'g', 'f', 'car', 'object', 'c', 'cell', 'b', 'cdr', 'h', 'following']) 
Overlap: 15 

Question:
6. Define the function reverse which produces a list in reverse order
   to that of its argument.  The function must use $ O ( 1 ) $ stack.
   You may use a tail-recursive function, or make it very simple by a
   call to fold_left.
   Bonus points:  These two ``reverse'' questions are worth 3 points
   each, not 2 points, if you correctly define them in terms of fold_
   left instead of writing a recursive function.

    (a) Scheme.  [2pt]  (3 points if you use fold_left correctly.)
        > (reverse '(1 2 3 4 5))
        (5 4 3 2 1)
        > (reverse '())
        ()

    (b) Ocaml.  [2pt]  (3 points if you use fold_left correctly.)
        # reverse;;
        - : 'a list -> 'a list = <fun>
        # reverse [1;2;3;4;5];;
        - : int list = [5; 4; 3; 2; 1]
        # reverse [];;
        - : 'a list = []

Overlapped: set(['function', 'use', 'b', 'reverse', 'int', 'list', 'argument', 'two', 'points', 'left', 'fun', 'stack', 'order', 'worth', 'define']) 
Overlap: 15 

Question:
2. Prolog.  Define some facts called arrow which describe this graph.
   If a->b, then a is the first argument and b is the second argument.
   [2pt]

   .PS 1i
   arrowht = circlerad
   arrowwid = circlerad/2
   A: circle "a"
   B: circle "b" at A+(5*circlerad,0)
   C: circle "c" at A+(3*circlerad,-5.196152*circlerad)
   D: circle "d" at C+(5*circlerad,0)
   E: circle "e" at B+(5*circlerad,0)
   arrow from A to B chop
   arrow from A to C chop
   arrow from B to C chop
   arrow from C to D chop
   arrow from D to E chop
   arrow from B to E chop
   .PE

Overlapped: set(['c', 'b', 'e', 'graph', 'argument', 'chop', '1i', 'second', 'circlerad', 'arrow', 'facts', 'circle', 'called', 'first']) 
Overlap: 14 

Question:
12. A C++ compiler does object-oriented dispatch via:
    (A) duck typing
    (B) heap allocated closure
    (C) type inference
    (D) virtual function table
The Antikythera mechanism, built ca. 150-100 BCE, is the oldest known
complex scientific calculator, and is sometimes called the first known
analog computer, with operational instructions written in Greek.
http://en.wikipedia.org/wiki/Antikythera_mechanism

Overlapped: set(['function', 'closure', 'http', 'scientific', 'calculator', 'dispatch', 'computer', 'virtual', 'heap', 'table', 'first', 'type', 'called', 'built']) 
Overlap: 14 

Question:
 3. Scheme:  Without using any higher-order functions, define the
    function map whose first argument is a function, which is applied to
    each element of its second argument, a list.  The result returned as
    a new list.  [2pt]

    > (map (lambda (x) (* x x)) '(1 2 3 4 5))
    (1 4 9 16 25)

Overlapped: set(['function', 'map', 'functions', 'list', 'argument', 'first', 'element', 'second', 'x', 'using', 'new', 'lambda', 'define']) 
Overlap: 13 

Question:
 5. Define a function in Scheme whose first argument is a predicate (a
    function of one argument which returns either #t or #f) and whose
    second argument is a list.  If the predicate returns #t for any
    element of the list, contains returns #t, otherwise it returns #f.
    [2pt]

    > (contains (lambda (x) (= x 3)) '(1 2 3 4))
    #t
    > (contains (lambda (x) (> x 9)) '(1 2 3 4))
    #f

Overlapped: set(['function', 'predicate', 'f', 'contains', 'list', 'second', 'first', 'argument', 'returns', 'element', 'x', 'one', 'lambda']) 
Overlap: 13 

Question:
 4. Smalltalk:  Assuming a class Complex has instance fields real and
    imag, and methods of the same name that may be used to enquire of
    another object, define two methods:

     (a) real:imag:  will replace the real and imaginary fields of the
         receiver.  [1pt]

     (b) The binary message + will return a new object with the sum of
         the reciever and its argument.  (Add the real fields, add the
         imaginary fields.)  Assume a class method real:imag:.  [2pt]

Overlapped: set(['used', 'return', 'methods', 'name', 'sum', 'object', 'two', 'argument', 'b', 'new', 'message', 'class', 'define']) 
Overlap: 13 

Question:
 7. Ocaml:  Define a function max such that given a function of two
    arguments giving a bool and a list, it returns Some maximum
    element of the list, and None otherwise.  [3pt]
    # type 'a opt = None | Some of 'a;;
    type 'a opt = None | Some of 'a
    # max;;
    - : ('a -> 'a -> bool) -> 'a list -> 'a opt = <fun>
    # (>);;
    - : 'a -> 'a -> bool = <fun>
    # max (>) [3; 1; 4; 1; 5; 9];;
    - : int opt = Some 9
    # max (<) [3; 1; 4; 1; 5; 9];;
    - : int opt = Some 1
    # max (>) [];;
    - : 'a opt = None

Overlapped: set(['function', 'given', 'int', 'max', 'list', 'two', 'maximum', 'returns', 'bool', 'arguments', 'fun', 'element', 'type']) 
Overlap: 13 

Question:
12. Define a function range with two integer arguments and which
   returns a list of all arguments in order including the two
   arguments.  If the first number is larger than the second, return
   an empty list.  [3pt]

    (a) Ocaml.
        # range 2 7;;
        - : int list = [2; 3; 4; 5; 6; 7]
        # range 7 2;;
        - : int list = []

    (b) Scheme.
        > (range 2 7)
        (2 3 4 5 6 7)
        > (range 7 2)
        ()

    (c) Perl.
        print "[@{[range(2,7)]}]\n";
        [2 3 4 5 6 7]
        print "[@{[range(7,2)]}]\n";
        []

Overlapped: set(['function', 'c', 'b', 'return', 'int', 'list', 'returns', 'number', 'second', 'arguments', 'order', 'two', 'first']) 
Overlap: 13 

Question:
5. Ocaml.  Define the function ip (inner product) which is the sum of
   pairwise products of two lists.  Use tail recursion.  Raise an
   exception if the lists are of different lengths.  The formula is
   given mathematically here.  [2pt]

   .EQ
   p = sum from { i = 0 } to { n - 1 } u sub i v sub i
   .EN

   # ip;;
   - : float list -> float list -> float = <fun>
   # ip [1.;2.;3.] [4.;5.;6.];;
   - : float = 32.

Overlapped: set(['function', 'product', 'sub', 'recursion', 'sum', 'list', 'two', 'n', 'tail', 'inner', 'v', 'fun', 'given']) 
Overlap: 13 

Question:
7. Smalltalk.  Define a class List.  It has instance variables car and
   cdr, and functions of the same name which return those values.  It
   has class methods new which returns nil and car:cdr:  which create
   a new List containing the two operands in the appropriate fields.
   It has instance methods car:cdr:  which update the car and cdr
   fields, and instance methods car and cdr which return them.  [4pt]

   st> a := List car:1 cdr: (List car:2 cdr: (List car:3 cdr: (List new))).
   st> a car.
   1
   st> a cdr car.
   2
   st> a cdr cdr car.
   3
   st> a cdr cdr cdr.
   nil
   st> a car:6 cdr:8.
   a List
   st> a car. a cdr.
   6
   8

Overlapped: set(['functions', 'return', 'methods', 'nil', 'car', 'variables', 'two', 'st', 'returns', 'cdr', 'new', 'class', 'name']) 
Overlap: 13 

Question:
1. Ocaml.  Define a tail-recursive function evenlen which returns true
   if its argument is a list of even length and false if there are an
   odd number of elements in the list.  Do not use a higher-order
   function.  [2pt]
   # evenlen [];;
   - : bool = true
   # evenlen [1];;
   - : bool = false
   # evenlen [1;2];;
   - : bool = true

Overlapped: set(['even', 'function', 'use', 'elements', 'false', 'true', 'list', 'argument', 'number', 'returns', 'bool', 'length', 'odd']) 
Overlap: 13 

Question:
7. Ocaml.  Define the function zipwith that takes a function and two
   lists and returns a new list with the elements combined.  Use
   failwith if the lists are not of the same length.  [2pt]
   val zipwith : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
   # zipwith (+) [1;2;3;4] [5;6;7;8];;
   - : int list = [6; 8; 10; 12]
   # zipwith (+) [1;2;3;4] [5;6;7;8;9];;
   Exception: Failure "zipwith".
   # zipwith (fun a b -> a,b) [1;2;3] ['a';'b';'c'];;
   - : (int * char) list = [(1, 'a'); (2, 'b'); (3, 'c')]
   # zipwith max [1;2;3;4] [4;3;2;1];;
   - : int list = [4; 3; 3; 4]

Overlapped: set(['function', 'b', 'length', 'val', 'int', 'max', 'list', 'two', 'returns', 'elements', 'fun', 'new', 'failwith']) 
Overlap: 13 

Question:
9. Scheme.  The Collatz conjectures states that for any positive
   integer $n$, if it is repeatedly replaced by $ n / 2 $ when even
   and $ 3 n + 1 $ when odd, it eventually converges on the integer
   $1$.  Write a function that uses a tail-recursive inner function to
   return a list of all integers starting from the argument and ending
   with 1.  The inner function produces the list in the reverse order,
   but the outer function reverses the list.  Some Scheme functions to
   use:  remainder, quotient, reverse, etc.  [4pt]
   > (collatz 4)
   (4 2 1)
   > (collatz 10)
   (10 5 16 8 4 2 1)
   > (collatz 20)
   (20 10 5 16 8 4 2 1)
   > (collatz 16)
   (16 8 4 2 1)
   > (collatz 17)
   (17 52 26 13 40 20 10 5 16 8 4 2 1)

Overlapped: set(['function', 'even', 'functions', 'outer', 'reverse', 'list', 'use', 'argument', 'inner', 'return', 'n', 'odd', 'order']) 
Overlap: 13 

Question:
 2. How much stack space does the following function use?
    let rec f n = match n with
        | 0 -> 0
        | 1 -> 1
        | n -> f (n - 1) + f (n - 2)
    (A) $ O ( 1 ) $
    (B) $ O ( log n ) $
    (C) $ O ( n ) $
    (D) $ O ( 2 sup n ) $

Overlapped: set(['function', 'use', 'log', 'space', 'f', 'n', 'much', 'let', 'sup', 'following', 'rec', 'stack', 'match']) 
Overlap: 13 

Question:
 4. Prolog:  Draw a picture of the undirected graph represented by the
    facts given below.  Write a function adjacent which will succeed if
    two nodes in the graph are adjacent to each other.  [2pt]
    edge(a,b).
    edge(b,c).
    edge(c,d).
    edge(d,a).
    edge(a,c).

Overlapped: set(['function', 'picture', 'given', 'b', 'graph', 'c', 'two', 'edge', 'adjacent', 'facts', 'nodes', 'undirected']) 
Overlap: 12 

Question:
 8. Which of the following functions can take a function, a unit, and
    a list as arguments, and which applies the function between each
    element of the list, along with the unit at one end, and which can
    use up constant stack space?
    (A) filter
    (B) foldl
    (C) foldr
    (D) map

Overlapped: set(['function', 'map', 'functions', 'space', 'list', 'use', 'one', 'arguments', 'applies', 'following', 'element', 'stack']) 
Overlap: 12 

Question:
3. Ocaml.  The Collatz conjecture states that for any positive integer
   $n$, if it is replaced by $ n / 2 $ when even and $ 3 n + 1 $ when
   odd, that the sequence eventually converges on $1$.  Write a
   function which uses a tail-recursive inner function to return a
   list of all integers starting from the argument and ending with 1.
   The inner function produces the list in reverse order, but the
   result is reversed by the outer function.  [3pt]
   # collatz;;
   - : int -> int list
   # collatz 1;;
   - : int list = [1]
   # collatz 2;;
   - : int list = [2; 1]
   # collatz 3;;
   - : int list = [3; 10; 5; 16; 8; 4; 2; 1]

Overlapped: set(['function', 'even', 'outer', 'reverse', 'int', 'list', 'argument', 'n', 'inner', 'return', 'odd', 'order']) 
Overlap: 12 

Question:
7. Ocaml.  Given the function at the left, fill in the table at the
   right giving the Ocaml types for each item.  [2pt]

                                             +------+--------------------------------+
   let fac n =                               | fac  |                                |
       if n < 0                              +------+--------------------------------+
       then failwith "fac n | n < 0"         | n    |                                |
       else let rec fac' n' m' =             +------+--------------------------------+
                if n' = 0                    | 0    |                                |
                then m'                      +------+--------------------------------+
                else fac' (n' - 1) (n' * m') | fac' |                                |
            in fac' n 1                      +------+--------------------------------+
   ;;                                        | n'   |                                |
                                             +------+--------------------------------+
                                             | m'   |                                |
                                             +------+--------------------------------+
                                             | -    |                                |
                                             +------+--------------------------------+
                                             | *    |                                |
                                             +------+--------------------------------+

Overlapped: set(['function', 'right', 'left', 'else', 'let', 'fac', 'rec', 'table', 'n', 'failwith', 'types', 'fill']) 
Overlap: 12 

Question:
8. Prolog.  Given the graph shown here, write edge facts to describe
   it.  Write a rule adjacent which uses edge to determine if two
   nodes are adjacent.  [2pt]

   .PS 0.75i
   A: circle "a"
   B: circle "b" at A+(-4*circlerad,-4*circlerad)
   C: circle "c" at A+(0,-4*circlerad)
   D: circle "d" at A+(4*circlerad,-4*circlerad)
   line from A to B chop
   line from A to C chop
   line from A to D chop
   line from B to C chop
   line from C to D chop
   .PE

Overlapped: set(['chop', 'c', 'b', 'graph', 'two', 'edge', 'write', 'circle', 'adjacent', 'facts', 'line', 'nodes']) 
Overlap: 12 

Question:
4. Ocaml.  Define drop, which returns its argument list without the
   first $n$ elements.  If $n$ is larger than the length of the list,
   it returns a null list.  If $n$ is not positive, it just returns
   the list.  Use a tail call.  Do not compute the length of the list.
   [2pt]
   # drop;;
   - : int -> 'a list -> 'a list = <fun>
   # drop 3 [1;2;3;4;5;6;7];;
   - : int list = [4; 5; 6; 7]
   # drop 10 [1;2;3;4];;
   - : int list = []
   # drop (-5) [1;2;3;4];;
   - : int list = [1; 2; 3; 4]
   # drop 5 [];;
   - : 'a list = []

Overlapped: set(['elements', 'without', 'int', 'list', 'tail', 'argument', 'returns', 'n', 'fun', 'length', 'null', 'first']) 
Overlap: 12 

Question:
 8. What function is called immediately after d() if d() is true?
    for (a(); b(); c()){
       if (d()) continue;
       e();
       if (f()) break;
       g();
    }
    h();
    (A) b()
    (B) c()
    (C) e()
    (D) h()

Overlapped: set(['function', 'c', 'b', 'e', 'g', 'f', 'h', 'break', 'continue', 'immediately', 'true', 'called']) 
Overlap: 12 

Question:
 7. Scheme:  Define a function split that takes a single list argument
    and returns a list of two elements, with the car of the result
    containing the odd numberd elements (counting from 1) cdr the even
    numbered elements.  The elements remain in the same relative order.
    [3pt]

    > (split '(1 2 3 4 5 6 7 8 9))
    ((1 3 5 7 9) (2 4 6 8))

Overlapped: set(['even', 'function', 'elements', 'car', 'list', 'argument', 'two', 'returns', 'cdr', 'odd', 'order']) 
Overlap: 11 

Question:
 8. Scheme:  Without using any higher order functions, code reverse,
    which reverses a list.  Hint:  Think about two stacks.  Use tail
    recursive form and a helper function that uses accumulator style.
    [2pt]

Overlapped: set(['function', 'functions', 'reverse', 'helper', 'list', 'two', 'tail', 'style', 'using', 'order', 'higher']) 
Overlap: 11 

Question:
 6. Scheme:  Using apply and max, define the Scheme function depth.
    The depth of anything that is not a list is 0.  The depth of a
    list is one more than the maximum depth of its constituent
    elements.  [2pt]

    > (depth '(1 2 (3 4 (5 6)) 88))
    3
    > (depth '(a b c))
    1
    > (depth '())
    1
    > (depth 7)
    0

Overlapped: set(['function', 'c', 'elements', 'max', 'list', 'maximum', 'one', 'depth', 'b', 'apply', 'define']) 
Overlap: 11 

Question:
 1. Define a function grep in Scheme whose first argument is a
    predicate and second argument a list.  It returns a new list of
    all of the elements of the argument list for which the predicate
    is true.  Do not use a higher-order function.  [2pt]

Overlapped: set(['function', 'use', 'elements', 'predicate', 'list', 'second', 'argument', 'returns', 'new', 'true', 'first']) 
Overlap: 11 

Question:
 2. Ocaml:  Define the function mapf whose first argument is a unary
    function, and second argument list.  The result is a list of the
    function applied to each element of the argument list.  Write a
    one-liner using fold_right, and not a recursive function.  [2pt] 1
    point.
    # fold_right;;
    - : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b = <fun>
    # mapf (fun x -> x + 2) [1;3;5;6];;
    - : int list = [3; 5; 7; 8]
    # mapf ((-)3) [1;2;5;6];;
    - : int list = [2; 1; -2; -3]

Overlapped: set(['function', 'point', 'int', 'list', 'argument', 'element', 'second', 'x', 'fun', 'using', 'first']) 
Overlap: 11 

Question:
 4. Ocaml:  Define the functions car and cdr in Ocaml so that they
    work in the expected way.  Use pattern matching.  Neither function
    may call any other.  Use failwith for a [] argument.  [2pt]
    # car;;
    - : 'a list -> 'a = <fun>
    # cdr;;
    - : 'a list -> 'a list = <fun>
    # car [1;2;3;4];;
    - : int = 1
    # cdr [1;2;3;4];;
    - : int list = [2; 3; 4]

Overlapped: set(['function', 'functions', 'cdr', 'int', 'car', 'work', 'list', 'argument', 'way', 'fun', 'failwith']) 
Overlap: 11 

Question:
5. Ocaml, or any functional language.  Rules about type checking.
    (i) Every expression has exactly one type.
   (ii) When an expression is evaluated, exactly one of four general
        things may happen.  List them.  [2pt]

         (a)

         (b)

         (c)

         (d)

6. \lambda-calculus.  For both applicative and normal order, perform
   \beta-reduction on the following expression.  [2pt]

   +-------------------------------------------------+--------------------------------------------------+
   |Applicative order                                | Normal order                                     |
   +-------------------------------------------------+--------------------------------------------------+
   |$ ( lambda x . ~ ~ * ~ x ~ x ) ~ ( + ~ 2 ~ 3 ) $ | $ ( lambda x . ~ ~ * ~ x ~ x ) ~ ( + ~ 2 ~ 3 ) $ |
   |                                                 |                                                  |
   |                                                 |                                                  |
   |                                                 |                                                  |
   |                                                 |                                                  |
   |                                                 |                                                  |
   |                                                 |                                                  |
   +-------------------------------------------------+--------------------------------------------------+

Overlapped: set(['c', 'b', 'language', 'checking', 'functional', 'one', 'following', 'x', 'type', 'order', 'lambda']) 
Overlap: 11 

Question:
13. Write a function that takes two lists as arguments and which
   returns a single list where each element is a list of corresponding
   pairs.  If the lists are of different lengths, trailing elements of
   the longer list are ignored.

    (a) Scheme.  [2pt]
        > (pairthem '(1 2 3 4) '(a b c d e))
        ((1 a) (2 b) (3 c) (4 d))
        > (pairthem '(1 2 3 4 5) '(a b))
        ((1 a) (2 b))

    (b) Ocaml.  [2pt]
        # pairthem [1;2;3] ['a';'b';'c';'d'];;
        - : (int * char) list = [(1, 'a'); (2, 'b'); (3, 'c')]
        # pairthem [1;2;3;4;5] ['a';'b'];;
        - : (int * char) list = [(1, 'a'); (2, 'b')]

Overlapped: set(['function', 'c', 'elements', 'e', 'int', 'list', 'two', 'element', 'returns', 'b', 'arguments']) 
Overlap: 11 

Question:
4. Using a loop, not recursion, write a function whose single argument
   is a number and which returns the factorial of that number.  Return
   1 for any number less-equal 0.  Do not consider what happens when
   the result is very large.

    (a) In Perl, write a sub.  [1pt]

    (b) In Smalltalk, extend the class Number with the unary selector
        fac.  [2pt]

Overlapped: set(['function', 'b', 'sub', 'extend', 'recursion', 'number', 'argument', 'write', 'returns', 'fac', 'class']) 
Overlap: 11 

Question:
 9. The following interaction indicates what kind of polymorphism?
    # List.length;;
    - : 'a list -> int = <fun>
    (A) conversion
    (B) inclusion
    (C) overloading
    (D) parametric

Overlapped: set(['polymorphism', 'conversion', 'inclusion', 'int', 'following', 'list', 'kind', 'overloading', 'indicates', 'fun', 'parametric']) 
Overlap: 11 

Question:
 7. For a list of length $n$, how much function call stack space is
    used by fold left and fold right?
    (A) fold left $ O ( 1 ) $ and fold right $ O ( 1 ) $
    (B) fold left $ O ( 1 ) $ and fold right $ O ( n ) $
    (C) fold left $ O ( n ) $ and fold right $ O ( 1 ) $
    (D) fold left $ O ( n ) $ and fold right $ O ( n ) $

Overlapped: set(['function', 'right', 'space', 'list', 'used', 'n', 'fold', 'length', 'much', 'stack', 'left']) 
Overlap: 11 

Question:
5. Ocaml.  Define the function max which finds the largest element in
   a list, given a comparison operator and a list.  Use failwith if
   the list is empty.  The solution must be tail-recursive.  Do not
   use a higher-order function.  [4pt]
   # max;;
   - : ('a -> 'a -> bool) -> 'a list -> 'a = <fun>
   # max (>) [1;2;3;4];;
   - : int = 4
   # max (<) [1;2;3;4];;
   - : int = 1
   # max (>) [];;
   Exception: Failure "max".

Overlapped: set(['function', 'given', 'int', 'max', 'list', 'use', 'solution', 'bool', 'fun', 'element', 'failwith']) 
Overlap: 11 

Question:
11. Ocaml.  Define the function max which returns Some maximum element
   of a list as determined by its function argument.  Return None if
   the list is empty.  [3pt]
   # type 'a opt = None | Some of 'a;;
   type 'a opt = None | Some of 'a
   # max;;
   - : ('a -> 'a -> bool) -> 'a list -> 'a opt = <fun>
   # max (>) [3;1;4;1;5;9];;
   - : int opt = Some 9
   # max (<) [3;1;4;1;5;9];;
   - : int opt = Some 1
   # max (>) [];;
   - : 'a opt = None

Overlapped: set(['function', 'int', 'max', 'list', 'argument', 'maximum', 'returns', 'bool', 'fun', 'element', 'type']) 
Overlap: 11 

Question:
 3. The function List.fold_left uses up how much stack space on a list
    of length $n$?
    (A) $ O ( 1 ) $
    (B) $ O ( 2 sup n ) $
    (C) $ O ( log sub 2 n ) $
    (D) $ O ( n ) $

Overlapped: set(['function', 'sub', 'space', 'list', 'n', 'length', 'much', 'sup', 'stack', 'log']) 
Overlap: 10 

Question:
 2. Scheme:  Define the function foldl, which has three arguments in
    this order:  a function, a unit, and a list.  A single result is
    returned such that the function is applied to the unit and the car
    of the list, sending that down as the next unit, and the cdr of the
    list is sent in on each recursive call.  It is tail recursive.
    [2pt]

    Using foldl, define the function length, which returns the length of
    a list.  [1pt]

Overlapped: set(['function', 'car', 'list', 'length', 'tail', 'arguments', 'cdr', 'returns', 'order', 'define']) 
Overlap: 10 

Question:
 4. C++:  Define a function print whose argument is a vector<string>,
    and which uses an iterator to print out all of the elements, one per
    line.  [2pt]

    Instead, for an extra point, make it a template function whose type
    can be anything for which operator<< is properly defined.  [1pt]

Overlapped: set(['function', 'elements', 'string', 'point', 'defined', 'argument', 'one', 'vector', 'line', 'type']) 
Overlap: 10 

Question:
 5. Fold right (foldr) uses up how much stack space on a list of length
    $n$?
    (A) $ O ( 1 ) $
    (B) $ O ( 2 sup n ) $
    (C) $ O ( log sub 2 n ) $
    (D) $ O ( n ) $

Overlapped: set(['right', 'sub', 'space', 'list', 'n', 'length', 'much', 'sup', 'stack', 'log']) 
Overlap: 10 

Question:
 1. Ocaml:  Define a function evenlen in Ocaml which returns true if
    the list's length is even and false if not.  It must be tail-
    recursive and may not use the function List.length or any of the
    folding functions.  [2pt]

    # evenlen [];;
    - : bool = true
    # evenlen [1];;
    - : bool = false
    # evenlen [1;2;3;4];;
    - : bool = true

Overlapped: set(['even', 'function', 'use', 'false', 'list', 'length', 'returns', 'bool', 'true', 'functions']) 
Overlap: 10 

Question:
 9. Ocaml:  The Collatz conjecture states that for any positive
    integer $n$, if it is replaced by $n / 2$ when even and $3 n + 1$
    when odd, eventually it converges to the integer $1$.  Write a
    function which accepts any integer and returns the number of steps
    necessary to reach the value of $1$.  Your solution must be tail-
    recursive.  Do not handle a case where $n < 1$ or is larger than
    the maximum integer.  [2pt]

    # collatz 1;;
    - : int = 0
    # collatz 2;;
    - : int = 1
    # collatz 3;;
    - : int = 7
    # collatz 10;;
    - : int = 6

Overlapped: set(['even', 'function', 'int', 'solution', 'maximum', 'value', 'number', 'returns', 'n', 'odd']) 
Overlap: 10 

Question:
 4. Some early languages, like PL/I, allowed non-local gotos, i.e.,
    the ability to use a goto to transfer control to a different
    function.  A structured way of doing this in Java is with:
    (A) break
    (B) continue
    (C) throw
    (D) try

Overlapped: set(['control', 'function', 'use', 'like', 'structured', 'languages', 'continue', 'way', 'break', 'throw']) 
Overlap: 10 

Question:
 9. In C++, templates such as stack<int> are an example of what kind
    of polymorphism?
    (A) ad-hoc conversion
    (B) ad-hoc overloading
    (C) universal inclusion
    (D) universal parametric

Overlapped: set(['templates', 'polymorphism', 'conversion', 'inclusion', 'int', 'universal', 'kind', 'overloading', 'parametric', 'stack']) 
Overlap: 10 

Question:
11. Draw a picture of the following Scheme expression.  For each cell,
    draw a rectangular box with two fields in it, and draw a pointer
    from inside the box to the thing being pointed at.  Atoms are
    drawn outside of all of these boxes.  [2pt]
    ((a b c) (d ((e)) f 6))

Overlapped: set(['picture', 'draw', 'b', 'e', 'f', 'c', 'two', 'cell', 'following', 'pointer']) 
Overlap: 10 

Question:
 4. For a list of length $n$, foldr, which does not use tail
    recursion, will take up how much stack space?
    (A) $ O ( 1 ) $
    (B) $ O ( log n ) $
    (C) $ O ( n ) $
    (D) $ O ( n log n ) $

Overlapped: set(['use', 'log', 'space', 'recursion', 'list', 'length', 'n', 'tail', 'much', 'stack']) 
Overlap: 10 

Question:
 2. Scheme:  Define a function that will return the largest number in
    a list of numbers.  Return 'undef if the list is empty.  The
    function max will return the largest of its arguments.  You must
    either use an inner tail-recursive function, or correctly use
    apply.  [2pt]
    (define (maxlist list)

Overlapped: set(['function', 'use', 'return', 'max', 'list', 'number', 'inner', 'apply', 'define', 'arguments']) 
Overlap: 10 

Question:
 8. Scheme:  Define the function zipwith in Scheme.  Note that for
    both of these programs, if the first list is shorter, the value is
    used as the first argument, and if the second list is shorter, the
    value is the second argument to the function.  [4pt]
    > (zipwith - 5 '(9 8 7) '(5 4 3 2 1))
    (4 4 4 3 4)
    > (zipwith string-append "**"
      '("hello" "foo" "qux" "goto") '(" world" " bar"))
    ("hello world" "foo bar" "qux**" "goto**")

Overlapped: set(['function', 'used', 'bar', 'programs', 'list', 'argument', 'value', 'second', 'foo', 'first']) 
Overlap: 10 

Question:
2. Ocaml.  Define the functions reverse and sum using fold_left.
   (Fill in the blanks.)  [3pt]
   # List.fold_left;;
   - : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a

   # let reverse = List.fold_left
   ________________________________________;;
   val reverse : '_a list -> '_a list

   # let sum = List.fold_left
   ________________________________________;;
   val sum : int list -> int

   # let length = List.fold_left
   ________________________________________;;
   val length : '_a list -> int

Overlapped: set(['functions', 'blanks', 'reverse', 'val', 'int', 'sum', 'list', 'length', 'let', 'using']) 
Overlap: 10 

Question:
3. Smalltalk.  Extend class Object with the message fibonacci:, which
   returns an array filled with the first $n$ Fibonacci numbers.
   [3pt]
                           |
   Expected output.        | Your answer.
   st> a := Object new.    | Object extend [
   an Object               |    fibonacci: n [
   st> a fibonacci: 10.    |
   (0 1 1 2 3 5 8 13 21 34 |
   )                       |
                           |
                           |
                           |
                           |

Overlapped: set(['extend', 'class', 'st', 'returns', 'answer', 'new', 'array', 'n', 'message', 'first']) 
Overlap: 10 

Question:
 1. A thunk is:
    (A) A heap allocated value yet to be initialized.
    (B) A pointer to a virtual function table used in dynamic
        dispatch.
    (C) An unevaluated expression passed into a function which may be
        evaluated by the function if needed.
    (D) The sound of dead code dropping.

Overlapped: set(['function', 'value', 'used', 'dynamic', 'dispatch', 'thunk', 'virtual', 'heap', 'table', 'pointer']) 
Overlap: 10 

Question:
7. Write the name of a programming language associated with each of
   the following people.  Score 1/4 point for each correct answer, but
   not more than 2 points total.  Choose answers from:  AWK, BASIC, C,
   C++, COBOL, FORTRAN, Java, Lisp, Perl, Python, Scheme,
   \lambda-calculus.  [2pt]

   +---------------------+---------------------+--------------------+
   |Alfred Aho           |John Backus          |Alonzo Church       |
   +---------------------+---------------------+--------------------+
   |James Gosling        |Grace Hopper         |John Kemeny         |
   +---------------------+---------------------+--------------------+
   |John McCarthy        |Dennis Ritchie       |Guy Steele          |
   +---------------------+---------------------+--------------------+
   |Bjarne Stroustrup    |Larry Wall           |Guido van Rossum    |
   +---------------------+---------------------+--------------------+

Overlapped: set(['name', 'language', 'point', 'programming', 'answers', 'following', 'points', 'answer', 'total', 'correct']) 
Overlap: 10 

Question:
 8. If we have a function not (bool -> bool) and a function even (int
    -> bool), how might the function odd be defined?
    (A) let odd = compose not even
    (B) let odd = map not even
    (C) let odd = not even
    (D) let odd x = not even x

Overlapped: set(['even', 'map', 'int', 'might', 'defined', 'bool', 'x', 'let', 'function', 'odd']) 
Overlap: 10 

Question:
12. What is the type of tail in the following?
    let cdr s = match s with | x::xs -> xs
    (A) val cdr : 'a -> 'a = <fun>
    (B) val cdr : 'a -> 'a list = <fun>
    (C) val cdr : 'a list -> 'a = <fun>
    (D) val cdr : 'a list -> 'a list = <fun>

Overlapped: set(['val', 'list', 'following', 'tail', 'let', 'cdr', 'fun', 'x', 'type', 'match']) 
Overlap: 10 

Question:
7. C or C++.  Code the function in C or C++ to reverse a list.  Do not
   allocate or free any memory.  Do not cause memory leak or use
   uninitialized memory.  Assume the nodes are properly initialized as
   a valid linked list.  Use $ O ( 1 ) $ stack space.  [2pt]
                             |
   typedef struct node node; | node* reverse (node* head) {
   struct node {             |
      int value;             |
      node* link;            |
   };                        |

Overlapped: set(['function', 'use', 'reverse', 'space', 'int', 'list', 'value', 'nodes', 'cause', 'stack']) 
Overlap: 10 

Question:
10. Scheme.  Write a function that takes two lists as arguments and
   which returns a single list where each element is a list of
   corresponding pairs.  If the lists are of different lengths,
   trailing elements of the longer list are ignored.  [2pt]
   > (pairthem '(1 2 3 4) '(a b c d e))
   ((1 a) (2 b) (3 c) (4 d))
   > (pairthem '(1 2 3 4 5) '(a b))
   ((1 a) (2 b))

Overlapped: set(['function', 'c', 'elements', 'e', 'list', 'two', 'element', 'returns', 'b', 'arguments']) 
Overlap: 10 

Question:
 6. Where is the variable a kept, given the following function
    definition?
    int f() { int a; return a; }
    (A) function call stack
    (B) heap
    (C) initialized data segment
    (D) uninitialized data segment

Overlapped: set(['function', 'given', 'return', 'f', 'int', 'following', 'heap', 'variable', 'data', 'stack']) 
Overlap: 10 

Question:
4. Ocaml.  Define the function reverse to reverse an arbitrary list.
   Use $ O ( n ) $ time and $ O ( 1 ) $ stack.  You may code tail
   recursion explicitly, or express the function as a one-liner using
   List.fold_left.  [2pt]
   val reverse : 'a list -> 'a list
   # reverse [1;2;3;4];;
   - : int list = [4; 3; 2; 1]

Overlapped: set(['function', 'reverse', 'val', 'int', 'recursion', 'list', 'n', 'tail', 'using', 'stack']) 
Overlap: 10 

Question:
6. Ocaml.  Define length and sum for a list using a \beta-reduced
   version of the definitions.  Fill in the space with an appropriate
   fun and another argument.  [2pt]
   # let foldl = List.fold_left;;
   val foldl : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a

   # let length = foldl
   _____________________________________________;;
   val length : '_a list -> int

   # let sum = foldl _____________________________________________;;
   val sum : int list -> int

Overlapped: set(['val', 'space', 'int', 'sum', 'list', 'argument', 'length', 'let', 'fun', 'using']) 
Overlap: 10 

Question:
10. C or C++.  Code a function to reverse a list.  Do not allocate or
   free any memory.  Do not cause memory leak or use uninitialized
   memory.  Do not use recursion.  Write a loop which does nothing but
   manipulate pointers.  Return a pointer to the first node in the
   reversed list.  [2pt]
                             |
   typedef struct node node; | node* reverse (node* head) {
   struct node {             |
      int value;             |
      node* link;            |
   };                        |
                             |
                             | }

Overlapped: set(['function', 'use', 'reverse', 'int', 'pointer', 'list', 'value', 'recursion', 'cause', 'first']) 
Overlap: 10 

Question:
5. Ocaml.  Define the function filter which takes a predicate and a
   list and returns a list in the same order as the original list, but
   with only those elements for which the predicate is true.  [2pt]
   # filter;;
   - : ('a -> bool) -> 'a list -> 'a list = <fun>
   # filter ((>)0) [1;2;-3;-4;8;-3];;
   - : int list = [-3; -4; -3]

Overlapped: set(['function', 'predicate', 'elements', 'int', 'list', 'returns', 'bool', 'fun', 'true', 'order']) 
Overlap: 10 

Question:
 8. Ocaml:  Define the function zip whose arguments are a curried pair
    of lists and whose result is a list of tuples.  Raise Invalid_
    argument if the lengths are different.  [2pt]
    # zip;;
    - : 'a list -> 'b list -> ('a * 'b) list
    # zip [1;2;3] ["foo";"bar";"baz"];;
    - : (int * string) list = [(1, "foo"); (2, "bar"); (3, "baz")]
    # zip [1;2;3] [];;
    Exception: Invalid_argument "length mismatch".

Overlapped: set(['function', 'bar', 'string', 'int', 'list', 'argument', 'length', 'arguments', 'foo']) 
Overlap: 9 

Question:
11. Ocaml:  Write a function iota which has an integer argument $n$ and
    returns a list of numbers from $1$ to $n$ inclusive.  The empty list
    is returned for non-positive numbers.  Use a local helper function
    to make your solution tail-recursive.  [2pt]
    # iota;;
    - : int -> int list = <fun>
    # iota 5;;
    - : int list = [1; 2; 3; 4; 5]
    # iota (-5);;
    - : int list = []

Overlapped: set(['function', 'helper', 'int', 'list', 'argument', 'solution', 'returns', 'fun', 'n']) 
Overlap: 9 

Question:
 8. Which of the following data structures violates the spirit of
    functional programming?
    (A) array
    (B) list
    (C) stack
    (D) tree

Overlapped: set(['programming', 'tree', 'list', 'functional', 'data', 'following', 'array', 'structures', 'stack']) 
Overlap: 9 

Question:
 1. Scheme:  The following function by filius Bonacci takes $ O ( 2 sup
    n ) $ time and $ O ( n ) $ stack.  Recode it using a helper function
    so that it takes $ O ( n ) $ time and $ O ( 1 ) $ stack.  [2pt]
    (define (f n) (if (< n 2) n (+ (f (- n 1)) (f (- n 2)))))

Overlapped: set(['function', 'helper', 'f', 'n', 'sup', 'following', 'using', 'stack', 'define']) 
Overlap: 9 

Question:
 6. Perl:  Define a function fold, which uses a loop to join all
    elements of an array into a single value.  Its first argument is a
    reference to a binary function, it second argument is a unit value,
    and its third argument is a reference to an array.  [2pt]

    print fold sub{$_[0]+$_[1]}, 0, [1, 2, 3, 4, 5, 6];
    21

Overlapped: set(['function', 'elements', 'sub', 'argument', 'value', 'fold', 'second', 'array', 'first']) 
Overlap: 9 

Question:
14. Ocaml:  Define the function zipwith whose arguments are a function
    of two curried arguments, and two lists.  The lists must have
    element types acceptable to the function, and the result is a
    single list computed by applying the function to pair elements of
    the lists.  Do not compute the lengths of the lists.  If the lists
    are of different lengths, raise (Invalid_argument "zipwith").
    [3pt]

    # zipwith;;
    - : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list = <fun>
    # zipwith (+);;
    - : int list -> int list -> int list = <fun>
    # zipwith (+) [1;3;5] [2;4;6];;
    - : int list = [3; 7; 11]
    # zipwith (+) [1;3;5] [2];;
    Exception: Invalid_argument "zipwith".

Overlapped: set(['function', 'elements', 'int', 'list', 'two', 'element', 'arguments', 'fun', 'types']) 
Overlap: 9 

Question:
 6. A closure is:
    (A) the address of the local variables that are passed to another
        function during a function call.
    (B) automatically closing all opened files when the exit function
        is called.
    (C) a heap allocated structure which points at a function and
        contains the values of all non-local variables used by that
        function.
    (D) a structure which holds an unevauated expression used when
        parameters are passed in normal form.

Overlapped: set(['function', 'closure', 'used', 'variables', 'contains', 'points', 'heap', 'called', 'structure']) 
Overlap: 9 

Question:
 7. A thunk is:
    (A) the address of the local variables that are passed to another
        function during a function call.
    (B) automatically closing all opened files when the exit function
        is called.
    (C) a heap allocated structure which points at a function and
        contains the values of all non-local variables used by that
        function.
    (D) a structure which holds an unevauated expression used when
        parameters are passed in normal form.

Overlapped: set(['function', 'used', 'variables', 'contains', 'thunk', 'points', 'heap', 'called', 'structure']) 
Overlap: 9 

Question:
 7. Define a Scheme function map2 whose arguments are a binary
    function and two lists.  It returns a list whose length is the
    same as the shorter list consisting of elements by using the
    function to combine corresponding elements of the list.  [3pt]

    > (map2 * '(1 2 3) '(4 5 6))
    (4 10 18)
    > (map2 = '(1 2 3) '(1 4 3 8 9))
    (#t #f #t)

Overlapped: set(['function', 'elements', 'length', 'f', 'list', 'two', 'returns', 'arguments', 'using']) 
Overlap: 9 

Question:
 7. With respect to Java, the term ``overloading'' refers to:
    (A) Automatic type conversion when the argument does not match the
        declared type of the parameter.
    (B) Generic classes with type parameterization.
    (C) Multiple functions with the same name and different
        signatures, defined in the same class.
    (D) Multiple functions with the same name and signature, defined
        in different classes.

Overlapped: set(['conversion', 'name', 'defined', 'argument', 'overloading', 'type', 'class', 'match', 'functions']) 
Overlap: 9 

Question:
 5. Ocaml:  Define a function contains which accepts a predicate and a
    list and returns true if the predicate is true for some element in
    the list.  [2pt]
    # contains ((=)3) [1;2;3;4];;
    - : bool = true
    # contains ((<)9) [1;2;3;4];;
    - : bool = false

Overlapped: set(['function', 'predicate', 'false', 'contains', 'list', 'element', 'returns', 'bool', 'true']) 
Overlap: 9 

Question:
 2. Prolog:  Define a function filter which takes three arguments:  a
    predicate, an input list, and an output list.  The output list
    contains all elements of the input list for which the predicate is
    true, and in the same order.  [2pt]
    | ?- filter( even, [1,2,3,4,5,6,7,8], X).
    X = [2,4,6,8] ?

Overlapped: set(['even', 'function', 'predicate', 'elements', 'contains', 'list', 'arguments', 'true', 'order']) 
Overlap: 9 

Question:
11. In PL/I, a goto statement had the capability of being executed in
    one function and transver control to another function, perhaps the
    one that called it.  The equivalent feature of Java uses what
    keyword?
    (A) break
    (B) continue
    (C) throw
    (D) synchronized

Overlapped: set(['control', 'function', 'called', 'perhaps', 'one', 'break', 'continue', 'statement', 'throw']) 
Overlap: 9 

Question:
 5. Which of the following data structures violates the spirit of
    functional programming?
    (A) array
    (B) list
    (C) stack
    (D) tree

Overlapped: set(['programming', 'tree', 'list', 'functional', 'data', 'following', 'array', 'structures', 'stack']) 
Overlap: 9 

Question:
 3. Define a function sum which returns the sum of all elements of a
    list.  Do not use any higher-order functions.  Use constant ($ O (
    1 ) $) stack space.  [2pt]

Overlapped: set(['function', 'use', 'elements', 'space', 'sum', 'list', 'functions', 'returns', 'stack']) 
Overlap: 9 

Question:
 6. A static (access) link is:
    (A) a pointer to the instruction which called the current
        function.
    (B) a pointer to the next free byte of storage on the heap.
    (C) a pointer to the stack frame in which the current function is
        nested.
    (D) a pointer to the stack frame of the caller of the current
        function.

Overlapped: set(['function', 'called', 'caller', 'nested', 'current', 'static', 'heap', 'pointer', 'stack']) 
Overlap: 9 

Question:
11. What does the static link in a stack frame point at?
    (A) The call instruction that activated this function.
    (B) The heap allocated closure in which escaping variables are
        stored.
    (C) The stack frame of the function in which this function is
        nested.
    (D) The stack frame of the function that called this function.

Overlapped: set(['function', 'closure', 'point', 'variables', 'nested', 'static', 'called', 'heap', 'stack']) 
Overlap: 9 

Question:
6. Scheme.  Define the higher-order function foldl whose arguments are
   a binary function, an identity element, and a list in that order.
   It folds them from left to right into a single value.  [2pt]

   (define (foldl fn unit list)

   )

Overlapped: set(['function', 'right', 'list', 'value', 'element', 'arguments', 'left', 'order', 'define']) 
Overlap: 9 

Question:
 6. An object-oriented language like C++ does dynamic dispatching of
    method calls using a:
    (A) friend function
    (B) heap-allocated closure
    (C) template declaration
    (D) virtual function table

Overlapped: set(['function', 'closure', 'like', 'using', 'dynamic', 'virtual', 'language', 'declaration', 'table']) 
Overlap: 9 

Question:
11. What is the type of car in the following?
    let car s = match s with | x::xs -> x
    (A) val car : 'a -> 'a = <fun>
    (B) val car : 'a -> 'a list = <fun>
    (C) val car : 'a list -> 'a = <fun>
    (D) val car : 'a list -> 'a list = <fun>

Overlapped: set(['val', 'car', 'list', 'following', 'let', 'fun', 'x', 'type', 'match']) 
Overlap: 9 

Question:
3. Define the function length, which returns the length of a list.
   Use tail-recursion:  the function must use $ O ( 1 ) $ stack.  Do
   not use a higher-order function.

    (a) Scheme.  [1pt]
        > (length '(1 2 3 4 5))
        5

    (b) Ocaml.  [1pt]
        # length;;
        - : 'a list -> int = <fun>
        # length [1;2;3;4;5];;
        - : int = 5

Overlapped: set(['function', 'use', 'b', 'int', 'list', 'length', 'returns', 'fun', 'stack']) 
Overlap: 9 

Question:
3. Scheme.  Define the function eval for arbitrarily nested arithmetic
   expressions.  Use map and apply.  Assume the car of each list and
   sublist is a function, and any operand that is not a number?  is a
   subexpression.  [2pt]

   > (map even '(1 2 3 4 5 6))
   (#t #f #f #f #f #f)
   > (apply + '(1 2))
   3
   > (eval `(,+ (,* 3 4) (,/ (,- 2 3) 4)))
   47/4

Overlapped: set(['even', 'function', 'map', 'car', 'f', 'list', 'number', 'nested', 'apply']) 
Overlap: 9 

Question:
4. Smalltalk.  Define a block called sum which when sent the value:
   message with an array argument, returns the sum of the elements of
   the array.  [2pt]

   st> sum value: #(1 2 3 4 5).
   15

Overlapped: set(['elements', 'called', 'sum', 'argument', 'value', 'st', 'returns', 'array', 'message']) 
Overlap: 9 

Question:
8. Prolog.  Write rules for determining the greatest common divisor of
   two positive integers.  Write code equivalent to the following C
   function:
   int gcd (int x, int y) {
      while (x != y) if (x > y) x -= y; else y -= x;
      return x;
   }
   An example of interaction is given here.  [2pt]
   | ?- gcd(111,259,Z).
   Z = 37 ?
   (1 ms) yes

Overlapped: set(['function', 'given', 'return', 'int', 'two', 'else', 'rules', 'following', 'x']) 
Overlap: 9 

Question:
2. Scheme.  Define a tail-recursive function oddlen which returns #t
   if the list has an odd number of elements, and #f if not.  Do not
   use a higher-order function.  [2pt]
   > (oddlen '())
   #f
   > (oddlen '(1))
   #t
   > (oddlen '(1 2))
   #f

Overlapped: set(['function', 'use', 'elements', 'f', 'oddlen', 'list', 'number', 'returns', 'odd']) 
Overlap: 9 

Question:
 3. Perl:  Write a function that will accept a function and an array and
    return all elements of the array in the same order, for which the
    function applied to an element of the array returns true.  [2pt]

Overlapped: set(['function', 'elements', 'return', 'element', 'returns', 'array', 'true', 'order']) 
Overlap: 8 

Question:
12. Give an example of one function nested inside another, where the
    inner function refers to a local variable of the outer function in
    such a way that the program crashes due to a dangling pointer.
    [2pt]

Overlapped: set(['function', 'outer', 'nested', 'inner', 'way', 'variable', 'one', 'pointer']) 
Overlap: 8 

Question:
 9. Of the ones listed here, the attribute most associated with
    functional programming is:
    (A) dynamic dispatch
    (B) referential transparency
    (C) static type checking
    (D) unification

Overlapped: set(['checking', 'programming', 'dynamic', 'functional', 'dispatch', 'ones', 'static', 'type']) 
Overlap: 8 

Question:
 5. What is the stack efficiency of this function?
    let rec f n =
        if n <= 1 then n
        else f (n - 1) + f (n - 2);;
    (A) $ O ( 1 ) $
    (B) $ O ( n ) $
    (C) $ O ( n sup 2 ) $
    (D) $ O ( 2 sup n ) $

Overlapped: set(['function', 'f', 'else', 'let', 'sup', 'rec', 'n', 'stack']) 
Overlap: 8 

Question:
 6. If guess is a predicate that searches a database to return one of
    its elements, and verify checks to see if the thing found is good,
    then we may define the predicate find, which returns a valid entry
    from the database as:
    (A) find(X) :- guess(X), verify(X).
    (B) find(X) :- guess(X).
        find(X) :- verify(X).
    (C) find(X) :- verify(X), guess(X).
    (D) guess(X) :- find(X), verify(X).

Overlapped: set(['predicate', 'good', 'return', 'returns', 'one', 'see', 'elements', 'define']) 
Overlap: 8 

Question:
 7. What is the stack efficiency of this function?
    let rec f n =
        if n <= 1 then n
        else f (n - 1) + f (n - 2);;
    (A) $ O ( 1 ) $
    (B) $ O ( n ) $
    (C) $ O ( n sup 2 ) $
    (D) $ O ( 2 sup n ) $

Overlapped: set(['function', 'f', 'else', 'let', 'sup', 'rec', 'n', 'stack']) 
Overlap: 8 

Question:
 3. Write a function in Perl which takes a filename as an argument and
    prints out a lexicographically sorted list of words in the file.
    Each word is printed only once, followed by a list of line numbers
    where they occur.  A word is any sequence of characters that match
    \S+ (Note the capital S, meaning non-whitespace.)  [4pt]

    sub makexref ($) {                                             Example output:   bar 7 7 88 88 9
       my ($filename) = @_;                                                          foo 3 44 98
       open my $file, "<$filename" or die "$0: $filename: $!\n";

Overlapped: set(['function', 'bar', 'sub', 'list', 'argument', 'line', 'foo', 'match']) 
Overlap: 8 

Question:
 2. Prolog:  Define some facts or rules such that the predicate
    oddlen/1 succeeds if the length of its list is odd and fails
    otherwise.  Do not do any computation on the length of the list.
    [2pt]

    | ?- oddlen([]).
    no
    | ?- oddlen([1]).
    yes
    | ?- oddlen([1,2,3,4]).
    no

Overlapped: set(['predicate', 'rules', 'oddlen', 'list', 'length', 'computation', 'facts', 'odd']) 
Overlap: 8 

Question:
 5. Haskell:  Consider the following two Ocaml functions.  Define the
    functions filter and map in Haskell in terms of list
    comprehensions.  [2pt]

    # filter;;
    - : ('a -> bool) -> 'a list -> 'a list = <fun>
    # filter ((>)4) [3; 1; 4; 1; 5; 9];;
    - : int list = [3; 1; 1]
    # map;;
    - : ('a -> 'b) -> 'a list -> 'b list = <fun>
    # map ((-)8) [3; 1; 4; 1; 5; 9];;
    - : int list = [5; 7; 4; 7; 3; -1]

Overlapped: set(['map', 'functions', 'int', 'list', 'two', 'following', 'bool', 'fun']) 
Overlap: 8 

Question:
10. A static link is a pointer to the:
    (A) call instruction that activated the current function.
    (B) segment in an executable binary containing all of a C
        program's static variables.
    (C) stack frame of the calling function.
    (D) stack frame of the most recent function activation for the
        function in which the current function is nested.

Overlapped: set(['function', 'variables', 'nested', 'current', 'static', 'calling', 'pointer', 'stack']) 
Overlap: 8 

Question:
 8. Ocaml:  Define a function unzip which takes a list of tuples and
    returns a tuple of lists, the first list containing the first item
    in each tuple, and the second list, the second item.  [3pt]
    # let l1, l2 = unzip [(1, 'a'); (2, 'b'); (3, 'c')];;
    val l1 : int list = [1; 2; 3]
    val l2 : char list = ['a'; 'b'; 'c']

Overlapped: set(['function', 'val', 'int', 'list', 'returns', 'second', 'let', 'first']) 
Overlap: 8 

Question:
 5. A function which accepts a unit value, a function, and a list, and
    which produces a single value in an eager language using $ O ( 1 )
    $ stack space is:
    (A) filter
    (B) fold_left
    (C) fold_right
    (D) map

Overlapped: set(['function', 'map', 'language', 'space', 'list', 'value', 'using', 'stack']) 
Overlap: 8 

Question:
10. Java:  Finish the following program by specifying the class >V=
    say .  When started from the main function, it prints the message
    ``hello'' and then quits.  [2pt]

    class hello {
       // What goes here?
       public static void main (String[] args) {
          Thread say = new Thread (new say ());
          say.start();
       }
    }

Overlapped: set(['function', 'void', 'static', 'following', 'new', 'message', 'main', 'class']) 
Overlap: 8 

Question:
 4. In an object-oriented language like C++, a virtual function
    (instance method) is called based on a:
    (A) duck-typing response
    (B) generic declaration
    (C) heap-allocated closure
    (D) virtual function table

Overlapped: set(['function', 'closure', 'like', 'language', 'virtual', 'declaration', 'table', 'called']) 
Overlap: 8 

Question:
 2. Define a function positives which uses grep (above) to accept a
    list of numbers and return only the positive ones.  Use a lambda
    expression, not a function name, as one of its arguments.  [1pt]

Overlapped: set(['function', 'return', 'name', 'list', 'one', 'ones', 'arguments', 'lambda']) 
Overlap: 8 

Question:
 3. What is the running time of the following function?
       (define (f n)
          (if (< n 2) n
              (+ (f (- n 1)) (f (- n 2)))))
    (A) $ O ( n ) $
    (B) $ O ( log sub 2 n ) $
    (C) $ O ( n sup 2 ) $
    (D) $ O ( 2 sup n ) $

Overlapped: set(['function', 'sub', 'f', 'n', 'log', 'sup', 'following', 'define']) 
Overlap: 8 

Question:
 4. What amount of stack space is taken up by evaluating that same
    function?
    (A) $ O ( n ) $
    (B) $ O ( log sub 2 n ) $
    (C) $ O ( n sup 2 ) $
    (D) $ O ( 2 sup n ) $

Overlapped: set(['function', 'log', 'space', 'n', 'sup', 'taken', 'stack', 'sub']) 
Overlap: 8 

Question:
 1. Haskell:  Define the function map whose first argument is a unary
    function, and second argument list.  The result is a list of the
    function applied to each element of the argument list.  The
    definition is a one-liner using a list comprehension.  [1pt]
    Prelude> map (+2) [1,3,5,6]
    [3,5,7,8]
    Prelude> map (3-) [1,2,5,6]
    [2,1,-2,-3]

Overlapped: set(['function', 'map', 'list', 'argument', 'element', 'second', 'using', 'first']) 
Overlap: 8 

Question:
 5. Perl:  Write a program in Perl which reads words and keeps track
    of their lengths.  At end of file, print out a table of two
    columns, with each line consisting of the length of a word and the
    number of words of that length.  Use <> to read lines.  A word is
    any sequence of characters that matches the regex m/\w+/.  The
    example output shows that for this input, there is 1 word of
    length 1, 4 words of length 3, and 3 words of length 5.  [3pt]

    +--------------+----------------+
    |example input | example output |
    +--------------+----------------+
    |foo bar baz x |      1     1   |
    |hello world   |      3     4   |
    |qux quuux     |      5     3   |
    +--------------+----------------+

Overlapped: set(['regex', 'bar', 'number', 'two', 'length', 'x', 'table', 'line']) 
Overlap: 8 

Question:
 4. What is the required amount of stack space for fold left and fold
    right on a list of length $n$?
    (A) fold left $ O ( 1 ) $;  fold right $ O ( 1 ) $
    (B) fold left $ O ( 1 ) $;  fold right $ O ( n ) $
    (C) fold left $ O ( n ) $;  fold right $ O ( 1 ) $
    (D) fold left $ O ( n ) $;  fold right $ O ( n ) $

Overlapped: set(['right', 'space', 'list', 'n', 'fold', 'length', 'stack', 'left']) 
Overlap: 8 

Question:
 5. If guess is a predicate that searches a database to return one of
    its elements, and verify checks to see if the thing found is good,
    then we may define the predicate find, which returns a valid entry
    from the database as:
    (A) find(X) :- guess(X), verify(X).
    (B) find(X) :- guess(X).
        find(X) :- verify(X).
    (C) find(X) :- verify(X), guess(X).
    (D) guess(X) :- find(X), verify(X).

Overlapped: set(['predicate', 'good', 'return', 'returns', 'one', 'see', 'elements', 'define']) 
Overlap: 8 

Question:
5. Smalltalk.  Extend class Array with an instance method find:  whose
   argument is a value which is searched for in the array.  If the
   value is present in the array, return the index of the first
   position where it is.  If not found, return nil.  [2pt]
   st> a := #(5 6 7 8 9).
   (5 6 7 8 9 )
   st> a find: 6
   2
   st> a find: 99
   nil

Overlapped: set(['return', 'nil', 'argument', 'value', 'st', 'array', 'class', 'first']) 
Overlap: 8 

Question:
6. Perl.  Write a program which prints out the file size, modification
   time, and filename for each file mentioned in @ARGV.  Hints:  The
   result of the stat function is an array where $stat[7] is the file
   size and $stat[9] is the modification time.  Use the strftime
   format "%b %e %H:%S" to print out the time.  Print a suitable error
   message if @stat has length 0.  [3pt]
   -bash-60$ ls.perl *.perl
         84 Nov 12 13:37 count.perl
        240 Nov 16 12:39 euclid.perl
        253 Nov 25 19:03 ls.perl
        110 Dec  5 17:53 range.perl
         91 Mar 14 21:31 wc.perl

Overlapped: set(['function', 'b', 'e', 'format', 'length', 'array', 'message', 'size']) 
Overlap: 8 

Question:
4. Code sub' according to the specifications of the project.  Assume
   that the number of larger magnitude is the first argument, and the
   carry is the third argument.  Assume sub has taken care of the
   signs so that sub' does not need to do so.  [2pt]
   val sub' : int list -> int list -> int -> int list

Overlapped: set(['sub', 'val', 'int', 'list', 'argument', 'number', 'taken', 'first']) 
Overlap: 8 

Question:
6. Ocaml.  Define the function zip which takes two lists as arguments
   and returns a single list of pairwise tuples with the same data.
   Raise an exception of the lengths of the lists are different.
   [2pt]
   # zip;;
   - : 'a list -> 'b list -> ('a * 'b) list = <fun>
   # zip [1;2;3] [4;5;5];;
   - : (int * int) list = [(1, 4); (2, 5); (3, 5)]

Overlapped: set(['function', 'int', 'list', 'two', 'returns', 'arguments', 'fun', 'data']) 
Overlap: 8 

Question:
 5. What is the running time of let rec f n = if n <= 1 then n else f
    (n - 1) + f (n - 2)?
    (A) $ O ( log sub 2 n ) $
    (B) $ O ( n ) $
    (C) $ O ( 2 sup n ) $
    (D) $ O ( n sup 2 ) $

Overlapped: set(['sub', 'f', 'else', 'let', 'sup', 'rec', 'n', 'log']) 
Overlap: 8 

Question:
4. Prolog.  Write a relation findpath(X,Y,P) so that if there is a
   path from X to Y in the previous question, it returns the path.
   For example, in the first question, findpath(a,e,P) could return
   P=[a,c,d,e] or P=[a,b,e], etc.  Assume an acyclic graph.  [3pt]

Overlapped: set(['c', 'b', 'return', 'graph', 'question', 'returns', 'e', 'first']) 
Overlap: 8 

Question:
7. Ocaml:  Define a function unzip which takes a list of tuples and
   returns a tuple of lists, the first list containing the first item
   in each tuple, and the second list, the second item.  [2pt]
   # let l1, l2 = unzip [(1, 'a'); (2, 'b'); (3, 'c')];;
   val l1 : int list = [1; 2; 3]
   val l2 : char list = ['a'; 'b'; 'c']

Overlapped: set(['function', 'val', 'int', 'list', 'returns', 'second', 'let', 'first']) 
Overlap: 8 

Question:
2. Ocaml.  Fill in the blanks:  [2pt]
   # List.fold_left;;
   - : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
   # let sum = __________________________________________________
   val sum : int list -> int = <fun>
   # sum [1;2;3;4;5];;
   - : int = 15
   # let length = __________________________________________________
   val length : '_a list -> int = <fun>
   # length [1;2;3;4;5];;
   - : int = 5

Overlapped: set(['blanks', 'val', 'int', 'sum', 'list', 'length', 'let', 'fun']) 
Overlap: 8 

Question:
 4. What kind of polymorphism is vector<string> an example of?
    (A) conversion
    (B) inclusion
    (C) overloading
    (D) parametric

Overlapped: set(['polymorphism', 'conversion', 'string', 'inclusion', 'kind', 'overloading', 'vector', 'parametric']) 
Overlap: 8 

Question:
 2. C++:  Write code to print out the elements of a vector, one item per
    line.  Assume that operator<< is defined on type foo.  Use a const_
    iterator.  [2pt]
    vector<foo> vec;

Overlapped: set(['elements', 'defined', 'one', 'vector', 'line', 'foo', 'type']) 
Overlap: 7 

Question:
 5. Prolog:  Write drop/3 such that it returns all elements of the
    second argument, starting with the one that matches the first
    argument, or none, if none match.  The third argument is the result.
    [2pt]
    | ?- drop(3,[5,4,3,2,1],X).
    X = [3,2,1]
    | ?- drop(9,[1,2,3],X).
    X = []
    | ?- drop(1,[1,2,3,4],X).
    X = [1,2,3,4]

Overlapped: set(['elements', 'returns', 'argument', 'second', 'one', 'match', 'first']) 
Overlap: 7 

Question:
 6. Ocaml:  Define the function merge which takes a predicate as an
    argument and a pair of sorted lists.  The result is a single list in
    sorted order.  [3pt]
    # merge;;
    - : ('a -> 'a -> bool) -> 'a list -> 'a list -> 'a list
    # merge (<) [1;3;5] [2;4;8;9];;
    - : int list = [1; 2; 4; 4; 8; 9; 9]

Overlapped: set(['function', 'predicate', 'int', 'list', 'argument', 'bool', 'order']) 
Overlap: 7 

Question:
 9. Ocaml:  Define the function map, which a unary function to a list
    and returns the list of results.  Use recursion.  Do not use a
    higher-order function.  [2pt]
    # map;;
    - : ('a -> 'b) -> 'a list -> 'b list
    # map ((+)2) [1;2;3;4];;
    - : int list = [3; 4; 5; 6]

Overlapped: set(['function', 'map', 'use', 'int', 'recursion', 'list', 'returns']) 
Overlap: 7 

Question:
10. Ocaml:  Write the function reverse which reverses list.  Do not use
    any higher-order functions.  Your function must be tail-recursive or
    use a local tail-recursive helper.  [2pt]
    # reverse;;
    - : 'a list -> 'a list
    # reverse [1;2;3];;
    - : int list = [3; 2; 1]

Overlapped: set(['function', 'use', 'reverse', 'helper', 'int', 'list', 'functions']) 
Overlap: 7 

Question:
15. Scheme:  Write the function elim, which takes a symbol and a list
    and returns a list consisting of elements of the list starting with
    the first one that is eqv?  to its first argument;  or the empty
    list, if none.  [2pt]
    > (elim 3 '(5 4 3 2 1))
    (3 2 1)
    > (elim 9 '(1 2 3))
    ()
    > (elim 1 '(1 2 3 4))
    (1 2 3 4)

Overlapped: set(['function', 'elements', 'list', 'argument', 'one', 'returns', 'first']) 
Overlap: 7 

Question:
 1. Haskell is a purely functional language which maintains state using
    a:
    (A) closure
    (B) daemon
    (C) monad
    (D) thunk

Overlapped: set(['closure', 'language', 'monad', 'functional', 'thunk', 'state', 'using']) 
Overlap: 7 

Question:
 4. An object-oriented language such as C++ does dynamic dispatching of
    method calls by means of a:
    (A) virtual function table
    (B) template declaration
    (C) heap-allocated closure
    (D) friend function

Overlapped: set(['function', 'closure', 'language', 'dynamic', 'virtual', 'declaration', 'table']) 
Overlap: 7 

Question:
 5. In perl, lexical scope is introduced by the my declaration, while
    dynamic scope is introduced via a local declaration.  Lacking a
    declaration implies global scope.  What is the output of running
    this program with each of the statements on the right?  [2pt]

    +-----------------------------------------------------------------+---------------------+
    |                                                                 | scope.perl 0        |
    |                                                                 |                     |
    |%fn = ("0" => sub {print "0=$var."},                             +---------------------+
    |       "d" => sub {local $var = "dyn"; yes(); print "d=$var. "}, | scope.perl s        |
    |       "s" => sub {my $var = "stat"; yes(); print "s=$var. "},   |                     |
    |       "g" => sub {$var = "foo"; yes(); print "f=$var. "},       +---------------------+
    |      );                                                         | scope.perl d        |
    |sub yes {$var = "yes"}                                           |                     |
    |$var = "glo"; $fn{$ARGV[0]}(); print "//$var\n";                 +---------------------+
    |                                                                 | scope.perl g        |
    |                                                                 |                     |
    +-----------------------------------------------------------------+---------------------+

Overlapped: set(['right', 'sub', 'g', 'dynamic', 'perl', 'declaration', 'foo']) 
Overlap: 7 

Question:
 6. In the following statement, continue goes to what part ?
          for (i = 0; i < n; ++i) {
             f (); continue; g ();
          } h ();
    (A) ++i
    (B) h ();
    (C) i < n
    (D) i = 0

Overlapped: set(['g', 'f', 'h', 'n', 'continue', 'statement', 'following']) 
Overlap: 7 

Question:
 4. Smalltalk:  Define a class List in which supports the class
    messages new and cons:with:;  and the instance messages car, cdr,
    and setcar:setcdr:.  Note that cons:with:  has to call setcar:
    setcdr:  to initialize the instance just created.  [4pt]

    st> a := List cons: 3 with: (List cons: 4 with: List new).
    a List
    st> a car.
    3
    st> a cdr.
    a List
    st> a cdr car.
    4
    st> a cdr cdr.
    nil

Overlapped: set(['cons', 'nil', 'car', 'st', 'cdr', 'new', 'class']) 
Overlap: 7 

Question:
10. Smalltalk:  Write some smalltalk code to create a SortedCollection
    and store it in a variable called sc.  Then use cascaded (chained)
    messages to add the numbers 23, 498, 33, 87, and 10, in that
    order.  Then print out all the numbers, one per line, in sorted
    order.  [2pt]

Overlapped: set(['use', 'called', 'one', 'variable', 'line', 'order', 'smalltalk']) 
Overlap: 7 

Question:
 1. In Ocaml, what is the depth of recursive non-tail calls for the
    following functions, where $n$ is the length of the list argument?
    (A) fold_left:  $ O ( 1 ) $;  fold_right:  $ O ( 1 ) $
    (B) fold_left:  $ O ( 1 ) $;  fold_right:  $ O ( n ) $
    (C) fold_left:  $ O ( n ) $;  fold_right:  $ O ( 1 ) $
    (D) fold_left:  $ O ( n ) $;  fold_right:  $ O ( n ) $

Overlapped: set(['functions', 'argument', 'list', 'length', 'n', 'depth', 'following']) 
Overlap: 7 

Question:
 2. If a balanced binary search treeis implemented in a purely
    functional language, the insertion of one new node will take how
    long?
    (A) $ O ( 1 ) $
    (B) $ O ( log sub 2 n ) $
    (C) $ O ( n ) $
    (D) $ O ( n log sub 2 n ) $

Overlapped: set(['log', 'language', 'functional', 'one', 'new', 'n', 'sub']) 
Overlap: 7 

Question:
 9. Define a function ip which computes the inner product of two lists
    by using map2 and foldl.  Elements of the two lists are pair-wise
    multiplied together, and the sum is taken.  [1pt]

    > (ip '(1 2 3) '(4 5 6))
    32

Overlapped: set(['function', 'product', 'sum', 'two', 'inner', 'taken', 'using']) 
Overlap: 7 

Question:
 3. Which of the following is a higher-order function whose arguments
    are a function and a list, and whose result is a list containing
    the results of having applied the function to each element of the
    list?
    (A) filter
    (B) foldl
    (C) lambda
    (D) map

Overlapped: set(['function', 'map', 'list', 'element', 'arguments', 'following', 'lambda']) 
Overlap: 7 

Question:
 5. When is a static variable in C bound to a specific virtual
    address?
    (A) When the compiler produces an object file.
    (B) When the linker produces an executable image.
    (C) When the program is loaded via the exec system call.
    (D) When the main function is called.

Overlapped: set(['function', 'object', 'virtual', 'static', 'variable', 'main', 'called']) 
Overlap: 7 

Question:
 7. Ocaml:  Define a function zip which takes two lists and returns a
    list of tuples, pairing each corresponding element.  If the lists
    are of different lengths, ignore excess elements in the longer
    list.  [2pt]
    # zip [1;2;3] ['a';'b';'c';'d'];;
    - : (int * char) list = [(1, 'a'); (2, 'b'); (3, 'c')]

Overlapped: set(['function', 'elements', 'int', 'list', 'two', 'element', 'returns']) 
Overlap: 7 

Question:
 9. The Ocaml function List.tl functions like cdr in Scheme.  Its type
    is:
    (A) 'a list -> 'a
    (B) 'a list -> 'a list -> 'a list
    (C) 'a list -> 'a list
    (D) 'a list -> int

Overlapped: set(['function', 'functions', 'like', 'int', 'list', 'cdr', 'type']) 
Overlap: 7 

Question:
 9. Smalltalk:  Define a class Find with a single class method key:
    array: which accepts a key and an array and returns the first
    position in the array equal to the key.  If not found, return V>=
    nil.  [3pt]
    st> Find key: 5 array: #(1 3 5 7 9).
    3
    st> Find key: 11 array: #(1 3 5 7 9).
    nil

Overlapped: set(['return', 'nil', 'st', 'returns', 'array', 'class', 'first']) 
Overlap: 7 

Question:
 7. Which of the following functions is a higher-order function whose
    arguments are a function and a list, and whose result is a list
    containing the result of applying the function to each of the
    elements of the list?
    (A) filter
    (B) foldl
    (C) foldr
    (D) map

Overlapped: set(['function', 'map', 'functions', 'elements', 'list', 'arguments', 'following']) 
Overlap: 7 

Question:
10. Which of the following programs will cause a dangling pointer?
    (A) int *f() {int i = 6; return &i; }
    (B) int *f() {int i = 6; return *i; }
    (C) int *f() {int i = 6; return  i; }
    (D) int  f() {int i = 6; return  i; }

Overlapped: set(['return', 'f', 'int', 'pointer', 'programs', 'following', 'cause']) 
Overlap: 7 

Question:
 9. Define the same function in Perl.  It takes a reference to a
    function of two arguments, followed by references to two arrays
    and applies the function pairwise to the arrays, returning an
    array of the shorter length.  [2pt]
    Example:  @y = zip sub{$_[0]+$_[1]}, [1, 2, 3], [4, 5, 6, 7];
    print "@y\n";
    Prints:  5 7 9

Overlapped: set(['function', 'sub', 'two', 'length', 'arguments', 'applies', 'array']) 
Overlap: 7 

Question:
1. Ocaml.  Define the function reverse which reverses a list.  Use an
   inner function that is tail recursive.  Do not use a higher-order
   function.  [2pt]
   val reverse : 'a list -> 'a list

Overlapped: set(['function', 'use', 'reverse', 'val', 'list', 'tail', 'inner']) 
Overlap: 7 

Question:
4. Scheme.  Write a function take in Scheme which will make a copy of
   the first $n$ elements of a list.  If there are fewer than $n$
   elements in the list, it returns the complete list.  If $n <= 0$ it
   returns the empty list.  [2pt]

   (define (take n list)

Overlapped: set(['function', 'elements', 'list', 'n', 'returns', 'first', 'define']) 
Overlap: 7 

Question:
11. A C++ compiler does object-oriented dynamic dispatch via:
    (A) default memory allocator
    (B) help-allocated closure
    (C) inferential type indicator
    (D) virtual function table

12. ``Structured Programming with goto Statements''
    (A) Edsger Dijkstra
    (B) C.A.R. Hoare
    (C) Donald Knuth
    (D) Niklaus Wirth

Overlapped: set(['function', 'closure', 'dynamic', 'virtual', 'dispatch', 'table', 'type']) 
Overlap: 7 

Question:
3. Define a Smalltalk class Complex.  [4pt]
   (a) It has two instance fields real and imag.
   (b) Define the instance methods real:  (sets imag to 0), imag:
      (sets real to 0), and real:imag:  (sets both).
   (c) Define the binary operator +, which assumes the operand is
      another Complex and returns the sum.

Overlapped: set(['c', 'b', 'methods', 'sum', 'two', 'returns', 'class']) 
Overlap: 7 

Question:
4. Scheme.  Define the function merge which takes two lists of numbers
   sorted in ascending order and returns a list of these numbers
   sorted into ascending order.  [3pt]
                          |
   Expected output.       | Your answer.
   >(merge '(1 3 5) '(2 4 | (define (merge list1 list2)
   6 8))                  |
   (1 2 3 4 5 6 8)        |
   >(merge '(0 1 1 2 3)   |
   '(1 4 9))              |
   (0 1 1 1 2 3 4 9)      |
                          |
                          |

Overlapped: set(['function', 'list', 'two', 'returns', 'answer', 'order', 'define']) 
Overlap: 7 

Question:
9. Smalltalk.  Define a block called product so that when given a
   vector as its value: argument, it returns the product of the
   vector.  [2pt]

   product := [

   ].
   product value: #(1 2 3 4 5).
   120

Overlapped: set(['product', 'given', 'value', 'argument', 'returns', 'vector', 'called']) 
Overlap: 7 

Question:
11. Ocaml.  Write a function eval which takes an expr as an argument
   and returns a float result.  An expr is either a Number or an Expr
   with a char operator and two exprs.  The only operators recognized
   are '+' and '*'.  [2pt]
   Definitions:
   type expr = Number of float
             | Expr of char * expr * expr;;
   let a = Expr ('+',
           Expr ('*', Number 6.0, Number 7.2),
           Expr ('*', Number 1.5, Number 2.7));;
   Interaction:
   # eval;;
   - : expr -> float = <fun>
   # eval a;;
   - : float = 47.25

Overlapped: set(['function', 'argument', 'two', 'returns', 'let', 'fun', 'type']) 
Overlap: 7 

Question:
 4. What is the Ocaml type signature for the definition:   let f x =
    x;;
    (A) val f : 'a -> 'a = <fun>
    (B) val f : 'a -> 'b -> 'b * 'a = <fun>
    (C) val f : 'a -> 'b -> 'b = <fun>
    (D) val f : int -> int = <fun>

Overlapped: set(['val', 'f', 'int', 'let', 'fun', 'x', 'type']) 
Overlap: 7 

Question:
 1. What kind of polymorphism is exhibited by generic classes in Java
    and template classes in C++?
    (A) conversion
    (B) inheritance
    (C) overloading
    (D) parametric

Overlapped: set(['polymorphism', 'conversion', 'inheritance', 'kind', 'overloading', 'parametric', 'exhibited']) 
Overlap: 7 

Question:
6. Ocaml:  Define a function zip which takes two lists and returns a
   list of tuples, pairing each corresponding element.  If the lists
   are of different lengths, ignore excess elements in the longer
   list.  [2pt]
   # zip [1;2;3] ['a';'b';'c';'d'];;
   - : (int * char) list = [(1, 'a'); (2, 'b'); (3, 'c')]

Overlapped: set(['function', 'elements', 'int', 'list', 'two', 'element', 'returns']) 
Overlap: 7 

Question:
10. What is the type of
    let f x y z = x + y + z;;
    (A) val f : int * int * int -> int
    (B) val f : int * int -> int -> int
    (C) val f : int -> int * int -> int
    (D) val f : int -> int -> int -> int

Overlapped: set(['val', 'f', 'int', 'let', 'x', 'z', 'type']) 
Overlap: 7 

Question:
11. Scheme.  Define the functions map and filter.  Do not use higher-
   order functions.

   (a) map [1pt]
       > (map (lambda (n) (+ 1 n)) '(3 6 9))
       (4 7 10)

   (b) filter [2pt]
       > (filter (lambda (n) (< n 4)) '(1 2 3 4 5 6 7))
       (1 2 3)

Overlapped: set(['map', 'functions', 'b', 'use', 'n', 'order', 'lambda']) 
Overlap: 7 

Question:
13. Scheme.  Define the function map2 which takes three arguments:  a
   binary function and two lists.  It returns a list with the two
   lists merged using the function.  If the lists are of different
   lengths, excess elements of the long list are ignored.  [2pt]
   > (map2 + '(1 2 3) '(4 5 6 7))
   (5 7 9)
   > (map2 * '(1 2 3 4 5) '(6 7 8))
   (6 14 24)

Overlapped: set(['function', 'elements', 'list', 'two', 'returns', 'arguments', 'using']) 
Overlap: 7 

Question:
 8. Which was a language designed in the 1950s for use mainly in
    business data processing?
    (A) 1957 FORTRAN
    (B) 1958 Algol 58
    (C) 1958 Lisp
    (D) 1959 COBOL

Overlapped: set(['use', 'language', 'business', 'processing', '1957', 'designed', 'data']) 
Overlap: 7 

Question:
10. Java generics and C++ templates are an example of __ polymorphism.
    (A) conversion
    (B) inclusion
    (C) overloading
    (D) parametric

Overlapped: set(['templates', 'polymorphism', 'conversion', 'inclusion', 'overloading', 'generics', 'parametric']) 
Overlap: 7 

Question:
 2. Write a Perl program which reads in a sequence of lines using <>.
    Each line consists of a key and a value separated by an equal (=)
    sign.  Strip off leading and trailing whitespace from each key and
    value.  Put the key and value into a hash.  Print an error message
    if any line does not have an equal sign, but ignore any line
    containing only whitespace.  At end of file, print out each key and
    value pair in lexicographic order.  You need not use strict or use
    warnings.  [4pt]

Overlapped: set(['use', 'value', 'order', 'using', 'message', 'line']) 
Overlap: 6 

Question:
11. Scheme:  Define the function iota, which returns a list of all
    integers from 1 to the argument given.  It returns an empty list
    for an argument less than 1.  [2pt]

    > (iota -5)
    ()
    > (iota 0)
    ()
    > (iota 1)
    (1)
    > (iota 8)
    (1 2 3 4 5 6 7 8)

Overlapped: set(['function', 'given', 'less', 'list', 'argument', 'returns']) 
Overlap: 6 

Question:
 5. In Prolog, if guess is a function that searches a database to
    return one of its elements, and verify checks to see if the
    selection is valid, then we may define the function find to look
    up a valid entity in the database.
    (A) find(X) :- guess(X), verify(X).
    (B) guess(X) :- verify(X), find(X).
    (C) find(X) :- guess(X).
        find(X) := verify(X).
    (D) verify(X) :- guess(X), find(X).

Overlapped: set(['function', 'elements', 'return', 'one', 'see', 'define']) 
Overlap: 6 

Question:
 6. Write a program in Perl which reads either the standard input or
    all of the files whose names are given on the command line and
    prints out each word followed by the number of times it appears in
    the file.  Words are printed in lexicographic order.  A word
    matches \w+ and each word is printed only once.  Your program must
    use strict; use warnings;.  [3pt]

    % ./count.perl f1 f2
    a 4
    file 10
    second 2
    test 4
    the 10

Overlapped: set(['given', 'use', 'number', 'second', 'line', 'order']) 
Overlap: 6 

Question:
 8. Define a function foldl which takes a function, a unit value, and
    a list, and returns a single value by applying the function
    between each member of the list.  It must be tail recursive.
    [2pt]

    > (foldl + 0 '(4 10 18))
    27
    > (foldl cons '() '(1 2 3))
    (((() . 1) . 2) . 3)

Overlapped: set(['function', 'cons', 'list', 'tail', 'value', 'returns']) 
Overlap: 6 

Question:
 3. Scheme:  Define a function to reverse a list.  Your solution must
    be tail-recursive.  Hint:  You will need an internal helper
    function.  [3pt]
    (define (rev list)

Overlapped: set(['function', 'reverse', 'helper', 'list', 'solution', 'define']) 
Overlap: 6 

Question:
 6. Ocaml:  Define a function merge whose arguments are a binary
    predicate returning a relative ordering and two lists that are
    assumed sorted.  Return a merged with combining the two lists into
    a single sorted list.  [3pt]
    # merge (<=) [1;5;7;9] [2;4;6;88];;
    - : int list = [1; 2; 4; 5; 6; 7; 9; 88]
    # merge (>) [9;5;3;1] [100;13];;
    - : int list = [100; 13; 9; 5; 3; 1]

Overlapped: set(['function', 'predicate', 'int', 'list', 'two', 'arguments']) 
Overlap: 6 

Question:
 4. In a language with garbage collection, where the function free is
    unavailable, which of the following is impossible?
    (A) dangling pointers
    (B) memory leak
    (C) null pointer exception
    (D) segmentation fault

Overlapped: set(['function', 'language', 'following', 'impossible', 'null', 'pointer']) 
Overlap: 6 

Question:
 3. Scheme:  Define a function maxzip which takes a predicate and two
    lists and zips the lists into a single list by taking the larger
    of each of the paired elements.  The length of the result is the
    same as the length of the shorter list.  [3pt]
    > (maxzip > '(1 3 5 7 9) '(9 7 5 3 1))
    (9 7 5 7 9)
    > (maxzip < '(1 3 5 7 9) '(9 7 5 3 1))
    (1 3 5 3 1)
    > (maxzip <= '(1 3 5 7 9) '(9 9))
    (1 3)

Overlapped: set(['function', 'predicate', 'elements', 'list', 'two', 'length']) 
Overlap: 6 

Question:
 6. Scheme:  Define a function exclude which takes a count and a list
    and returns a list with the first count items removed.  A negative
    count is the same as 0.  If more items are excluded than exist in
    the list, return the empty list.  [2pt]
    > (exclude 2 '(1 2 3 4 5))
    (3 4 5)
    > (exclude -5 '(1 2 3 4 5))
    (1 2 3 4 5)
    > (exclude 10 '(1 2 3))
    ()

Overlapped: set(['function', 'return', 'list', 'negative', 'returns', 'first']) 
Overlap: 6 

Question:
 8. Prolog:  Define A function exclude/3 with the same semantics.  The
    first two arguments are as before, and the third argument is the
    output list.  Do not consider the result of backtracking from the
    ? prompt.  [2pt]
    | ?- exclude(2,[1,2,3,4,5],U).
    U = [3,4,5] ?
    yes
    | ?- exclude(-5,[1,2,3,4,5],U).
    U = [1,2,3,4,5] ?
    yes
    | ?- exclude(10,[1,2,3],U).
    U = [] ?
    yes

Overlapped: set(['function', 'list', 'argument', 'two', 'arguments', 'first']) 
Overlap: 6 

Question:
 4. What kind of type equivalence is used to determine if two
    different typedefs in C declare the same type?
    (A) anonymous
    (B) name
    (C) structural
    (D) value

Overlapped: set(['kind', 'used', 'name', 'two', 'value', 'type']) 
Overlap: 6 

Question:
 4. Define the same function sum using the higher-order function
    foldleft, whose arguments are a unit value, a binary function, and
    a list.  [1pt]

Overlapped: set(['function', 'sum', 'list', 'value', 'arguments', 'using']) 
Overlap: 6 

Question:
 8. A static link in a stack frame points at:
    (A) the address of the call instruction that activated this
        function.
    (B) the stack frame of the calling function.
    (C) the stack frame of the function in which this function is
        nested.
    (D) the top of the function call stack.

Overlapped: set(['function', 'calling', 'points', 'static', 'nested', 'stack']) 
Overlap: 6 

Question:
 3. Ocaml:  Define the function mapr having exactly the functionality
    in the previous questions, except do not use any higher order
    functions.  Use recursion.  [2pt]

Overlapped: set(['function', 'use', 'recursion', 'functions', 'order', 'higher']) 
Overlap: 6 

Question:
 4. If you have a function not (bool->bool) and a function even
    (int->bool), which higher-order function would be useful in
    combining them to make a function called odd?
    (A) compose
    (B) filter
    (C) fold_left
    (D) map

Overlapped: set(['even', 'map', 'function', 'bool', 'odd', 'called']) 
Overlap: 6 

Question:
 9. Which of the following is not part of the local stack frame in
    ANSI C?
    (A) register save area
    (B) access (static) link
    (C) dynamic (control) link
    (D) return address

Overlapped: set(['control', 'return', 'dynamic', 'static', 'following', 'stack']) 
Overlap: 6 

Question:
 3. What is the expected running time of fold left and fold right on a
    list of length $n$?
    (A) fold left $ O ( 1 ) $;  fold right $ O ( 1 ) $
    (B) fold left $ O ( 1 ) $;  fold right $ O ( n ) $
    (C) fold left $ O ( n ) $;  fold right $ O ( 1 ) $
    (D) fold left $ O ( n ) $;  fold right $ O ( n ) $

Overlapped: set(['right', 'list', 'n', 'fold', 'length', 'left']) 
Overlap: 6 

Question:
 7. In Perl, to apply a block to every element of an array, what
    function is used?
    (A) grep
    (B) join
    (C) map
    (D) split

Overlapped: set(['function', 'map', 'used', 'element', 'apply', 'array']) 
Overlap: 6 

Question:
11. Scheme.  Define the function reverse, which reverses a list.  Do
   not use any higher-order functions.  Do not use append.  [2pt]

   (define (reverse list)

Overlapped: set(['function', 'use', 'reverse', 'list', 'functions', 'define']) 
Overlap: 6 

Question:
 6. Java supports:
    (A) single inheritance only.
    (B) multiple (mixin) inheritance of functions (methods) but not
        fields.
    (C) multiple inheritance of functions (methods) and shared
        inheritance of fields.
    (D) multiple inheritance of functions (methods) and repeated
        inheritance of fields.

Overlapped: set(['functions', 'multiple', 'methods', 'inheritance', 'repeated', 'shared']) 
Overlap: 6 

Question:
11. In Smalltalk and Scheme, type checking is:
    (A) strong and dynamic.
    (B) strong and static.
    (C) weak and dynamic.
    (D) weak and static.

Overlapped: set(['checking', 'dynamic', 'weak', 'static', 'strong', 'type']) 
Overlap: 6 

Question:
11. What kind of function is
    let f x y z = x + y + z;;
    (A) curried
    (B) thunked
    (C) tupled
    (D) unified

Overlapped: set(['function', 'kind', 'f', 'let', 'x', 'z']) 
Overlap: 6 

Question:
2. Name two kinds of ad hoc polymorphism, and give a brief example of
   each.  Do not use more than a few lines of code.  [2pt]

    (a)

    (b)

Overlapped: set(['polymorphism', 'use', 'b', 'ad', 'two', 'hoc']) 
Overlap: 6 

Question:
11. The PL/1 language allows a non-local goto directly from a function
    to a label in a function deeper down in the function call stack,
    thus returning past several levels of function calls.  In Java,
    something similar can be accomplished by what statement?
    (A) goto
    (B) implements
    (C) synchronized
    (D) throw

Overlapped: set(['function', 'language', 'throw', 'past', 'statement', 'stack']) 
Overlap: 6 

Question:
 7. The PL/1 language allows a non-local goto directly from a function
    to a label in a function deeper down in the function call stack,
    thus returning past several levels of function calls.  In Java,
    something similar can be accomplished by what statement?
    (A) goto
    (B) implements
    (C) synchronized
    (D) throw

Overlapped: set(['function', 'language', 'throw', 'past', 'statement', 'stack']) 
Overlap: 6 

Question:
3. Scheme.  Define the tail-recursive function foldl so that it may be
   used in the following example.  [2pt]
   > (define (sum list) (foldl + 0 list))
   > (sum '(1 2 3))
   6

Overlapped: set(['function', 'used', 'sum', 'list', 'following', 'define']) 
Overlap: 6 

Question:
8. Ocaml.  In a strongly typed language:
   (a) Every expression has exactly one type.
   (b) When an expression is evaluated, exactly one of the following
       general things might happen:  [2pt]

       (i)

       (ii)

       (iii)

       (iv)

Overlapped: set(['b', 'language', 'might', 'one', 'following', 'type']) 
Overlap: 6 

Question:
 3. In smalltalk code is executed by:
    (A) calling functions which are static members of classes.
    (B) making use of the standard template library.
    (C) sending messages to objects.
    (D) using higher-order functions.

Overlapped: set(['functions', 'use', 'calling', 'static', 'using', 'smalltalk']) 
Overlap: 6 

Question:
4. Define the function zipwith that takes a function and two lists and
   uses the function to join the lists.  If the lists are of different
   lengths, ignore the excess elements of the longer list.  [2pt]
   # zipwith;;
   - : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list = <fun>
   # zipwith (+) [1;2;3] [4;5;6;7];;
   - : int list = [5; 7; 9]

Overlapped: set(['function', 'elements', 'int', 'list', 'two', 'fun']) 
Overlap: 6 

Question:
 5. Two kinds of universal polymorphism are:
    (A) conversion & overloading
    (B) inclusion & parametric
    (C) overloading & inclusion
    (D) parametric & overloading

Overlapped: set(['polymorphism', 'conversion', 'inclusion', 'universal', 'overloading', 'parametric']) 
Overlap: 6 

Question:
 1. Give an example of how a function call in normal order might return
    a result, but the same function call in applicative order might
    crash or go into an infinite loop.  [2pt]

Overlapped: set(['go', 'function', 'might', 'return', 'order']) 
Overlap: 5 

Question:
 7. Ocaml:  Define the function sum in terms of List.fold_left in a
    curried manner to sum a list of integers.  Do not write a recursive
    function.  [1pt]
    # sum;;
    - : int list -> int
    # sum [1;2;3;4;5];;
    - : int = 15

Overlapped: set(['int', 'write', 'sum', 'function', 'list']) 
Overlap: 5 

Question:
 2. Partial parameterization of a currried function keeps arguments in
    a:
    (A) closure
    (B) daemon
    (C) monad
    (D) thunk

Overlapped: set(['monad', 'thunk', 'function', 'closure', 'arguments']) 
Overlap: 5 

Question:
 3. In C++, a static variable is bound to a virtual address:
    (A) at compile (CC) time.
    (B) at link (ld) time.
    (C) at exec() time.
    (D) when main() is called.

Overlapped: set(['variable', 'main', 'static', 'called', 'virtual']) 
Overlap: 5 

Question:
 4. In Java, a static variable is allocated:
    (A) at translation time.
    (B) when the class files are put in a jar.
    (C) when the class is loaded.
    (D) when an object is created with new.

Overlapped: set(['variable', 'new', 'object', 'static', 'class']) 
Overlap: 5 

Question:
 6. What is the type of f?
    let f x y = x + y;;
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int

Overlapped: set(['int', 'let', 'type', 'x', 'f']) 
Overlap: 5 

Question:
 7. When arguments to functions are evaluated before the function is
    called, this is __ order.
    (A) applicative
    (B) efficient
    (C) normal
    (D) short circuit

Overlapped: set(['function', 'functions', 'order', 'arguments', 'called']) 
Overlap: 5 

Question:
 1. What is the type of swap?
    let swap f x y = f y x;;
    (A) ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    (B) ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    (C) ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
    (D) ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b

Overlapped: set(['let', 'list', 'type', 'x', 'f']) 
Overlap: 5 

Question:
10. Which of these is not part of the local stack frame in ANSI C?
    (A) access (static) link
    (B) control (dynamic) link
    (C) register save area
    (D) return address

Overlapped: set(['control', 'static', 'dynamic', 'return', 'stack']) 
Overlap: 5 

Question:
 2. C++ is primarily thought of as an example of what kind of language?
    (A) functional
    (B) imperative
    (C) logic
    (D) object oriented

Overlapped: set(['oriented', 'kind', 'object', 'functional', 'language']) 
Overlap: 5 

Question:
 6. The following two declarations are examples of:
    ostream &operator<< (ostream &,
                const string &);
    template <typename item_t>
    ostream &operator<< (ostream &,
                const vector<item_t> &);
    (A) overhanging
    (B) overlapping
    (C) overloading
    (D) overriding

Overlapped: set(['following', 'overloading', 'vector', 'two', 'string']) 
Overlap: 5 

Question:
10. In C++, if we have a call of the form a.f(x,y), inside the function
    f, how is a field x in the object a referred to?
    (A) this->*x
    (B) this->x
    (C) this.x
    (D) this[x]

Overlapped: set(['function', 'field', 'object', 'x', 'f']) 
Overlap: 5 

Question:
 3. What might cause a dangling pointer in C++?
    (A) catch
    (B) delete
    (C) new
    (D) throw

Overlapped: set(['new', 'cause', 'might', 'throw', 'pointer']) 
Overlap: 5 

Question:
 7. What declares a variable m of type map whose keys are strings and
    whose values are ints?
    (A) m: (string, int) map;
    (B) map <string, int> m;
    (C) map [int, string] m;
    (D) map m <string, int>;

Overlapped: set(['int', 'map', 'type', 'string', 'variable']) 
Overlap: 5 

Question:
 8. Both Perl and Scheme have type systems which are:
    (A) strong and dynamic.
    (B) strong and static.
    (C) weak and dynamic.
    (D) weak and static.

Overlapped: set(['static', 'strong', 'dynamic', 'weak', 'type']) 
Overlap: 5 

Question:
 9. For which function will C++ say:  Warning:  Returning a reference to
    a local variable or temporary.
    (A) int &f (int &i) {int j; return j; }
    (B) int f (int &i) {int j; return j; }
    (C) int f (int i) {int j; return j; }
    (D) int f (int i) {int &j; return j; }

Overlapped: set(['int', 'function', 'return', 'variable', 'f']) 
Overlap: 5 

Question:
12. Prolog:  Define after/3, which returns in its third argument all
    of the elements of the second argument that appear after the first
    argument.  Return [] if not found.  [2pt]

    | ?- after(3,[1,2,3,4,5,6],X).
    X = [4,5,6] ?
    yes
    | ?- after(0,[1,2,3,4,5,6],X).
    X = [] ?
    yes
    | ?- after(6,[],X).
    X = [] ?
    yes

Overlapped: set(['second', 'returns', 'argument', 'elements', 'first']) 
Overlap: 5 

Question:
13. Enter the names of these programming languages in the appropriate
    box:  C, C++, Haskell, Java, Ocaml, Perl, Prolog, Scheme.  [1pt]

                   +---------------------------+--------------------------+
                   |      strong typing        |       weak typing        |
    +--------------+---------------------------+--------------------------+
    |static types  |                           |                          |
    |              |                           |                          |
    +--------------+---------------------------+--------------------------+
    |dynamic types |                           |                          |
    |              |                           |                          |
    +--------------+---------------------------+--------------------------+

Overlapped: set(['languages', 'programming', 'strong', 'weak', 'types']) 
Overlap: 5 

Question:
 4. Which expression will cause Scheme to print:
       (3)
    (A) (caar '(1 2 3))
    (B) (cadr '(1 2 3))
    (C) (cdar '(1 2 3))
    (D) (cddr '(1 2 3))

Overlapped: set(['cdar', 'cadr', 'cause', 'caar', 'cddr']) 
Overlap: 5 

Question:
 6. Ocaml does *not* have:
    (A) applicative order evaluation
    (B) operator overloading
    (C) parametric polymorphism
    (D) type inference

Overlapped: set(['overloading', 'order', 'type', 'parametric', 'polymorphism']) 
Overlap: 5 

Question:
 8. What kind of function is
       let f x y = x + y
    (A) curried
    (B) thunked
    (C) tupled
    (D) unified

Overlapped: set(['function', 'x', 'kind', 'let', 'f']) 
Overlap: 5 

Question:
 1. Fill in the blank with a lambda expression so that mul behaves as
    shown here.  [1pt]
    The answer, in Perl, would be:
    my $mul = sub {my $x = $_[0]; sub {$x * $_[0]}};  print
    $mul->(3)->(4), "\n";

    > (define mul (______________________________))
    > ((mul 3) 4)
    12

Overlapped: set(['answer', 'x', 'lambda', 'sub', 'define']) 
Overlap: 5 

Question:
 8. Perl and Scheme are languages whose type checking is:
    (A) Strong and dynamic.
    (B) Strong and static.
    (C) Weak and dynamic.
    (D) Weak and static.

Overlapped: set(['languages', 'static', 'checking', 'dynamic', 'type']) 
Overlap: 5 

Question:
 9. How might one declare an array variable in Perl with lexical
    scope?
    (A) local @a;
    (B) my @a;
    (C) our @a;
    (D) use @a;

Overlapped: set(['variable', 'array', 'might', 'use', 'one']) 
Overlap: 5 

Question:
 3. Allowing partial parameterization of a function in a functional
    language such as Ocaml is called:
    (A) currying
    (B) lambda lifting
    (C) tupling
    (D) unification

Overlapped: set(['function', 'lambda', 'functional', 'language', 'called']) 
Overlap: 5 

Question:
 7. Write a complete program in Perl that reads in words from all of
    the filenames specified in @ARGV, and after end of file of the
    last file, prints out each word, one per line, sorted
    lexicographically, with each word followed by a count of the
    number of times it occurred.  Exit status is 0 for success and 1
    if any file could not be opened.  Print suitable error messaages
    for files that could not be opened.  If no files are specified,
    read the standard input.  Do not use the <> operator.  Use /\w+/
    to match words or /\W+/ to split delimiters.  If @ARGV is empty,
    use "-" (standard input).  [5pt]

    #!/usr/bin/perl
    use strict;
    use warnings;
    $0 =~ s|.*/||;

Overlapped: set(['use', 'line', 'number', 'match', 'one']) 
Overlap: 5 

Question:
 8. Define the function zip in Scheme.  It takes a function and a pair
    of lists and returns a list having pairwise applied the function
    to corresponding pairs of elements in the list.  If the lists are
    of unequal length, the function stops when the shorter list runs
    out.  [2pt]
    Example:  (zip + '(1 2 3) '(4 5 6 7))
    Returns:  (5 7 9)

Overlapped: set(['function', 'returns', 'elements', 'list', 'length']) 
Overlap: 5 

Question:
10. Write a program in Perl which prints out all of the command line
    arguments (but not the program name) on one line, each separated
    from the next with one space, but does not print a space in the
    front or at the end.  It finishes by printing a newline character.
    [1pt]

    #!/usr/bin/perl

Overlapped: set(['line', 'one', 'arguments', 'name', 'space']) 
Overlap: 5 

Question:
 6. In C, when is a static local variable bound to a particular
    virtual address?
    (A) When the program is compiled.
    (B) When the program is linked.
    (C) When the program is loaded into execution by the exec system
        call.
    (D) When the function in which it is declared is called.

Overlapped: set(['function', 'variable', 'static', 'called', 'virtual']) 
Overlap: 5 

Question:
 7. Data types in Perl and Scheme are:
    (A) strong and dynamic.
    (B) strong and static.
    (C) weak and dynamic.
    (D) weak and static.

Overlapped: set(['static', 'strong', 'dynamic', 'types', 'weak']) 
Overlap: 5 

Question:
 6. After the following open statement, what can be used to read one
    line from the file?
       open my $file, "<$filename"
    (A) $line = '$file';
    (B) $line = <$file>;
    (C) $line = "$file";
    (D) $line = `$file`;

Overlapped: set(['following', 'line', 'used', 'statement', 'one']) 
Overlap: 5 

Question:
 7. In a lazy language, unevaluated arguments are passed into
    functions by means of a:
    (A) closure
    (B) curry
    (C) thunk
    (D) tuple

Overlapped: set(['closure', 'thunk', 'functions', 'arguments', 'language']) 
Overlap: 5 

Question:
 1. What is not to be avoided in a pure functional language?
    (A) goto
    (B) lambda
    (C) loops
    (D) variables

Overlapped: set(['language', 'variables', 'functional', 'pure', 'lambda']) 
Overlap: 5 

Question:
 8. What is the type of the Ocaml function
    let g () = 3;;
    (A) int * unit
    (B) int -> unit
    (C) unit * int
    (D) unit -> int

Overlapped: set(['int', 'function', 'let', 'type', 'g']) 
Overlap: 5 

Question:
7. Using Perl, write a program that reads lines from files using <>,
   and splits each line into words.  A word is any sequence of
   characters delimited by m/\W+/, that is non-alphanumeric
   characters.  Count the frequency of occurrence of each word.  At
   end of file, print out the ten most frequently occurring words in
   descending order, along with the number of times each appeared in
   the input.  [3pt]

Overlapped: set(['write', 'using', 'line', 'number', 'order']) 
Overlap: 5 

Question:
 9. If we define the block sum := [:i :j| i + j] in Smalltalk, how
    might we obtain the number 7?
    (A) 3 4 sum
    (B) 3 sum: 4
    (C) sum 3 value 4 value
    (D) sum value: 3 value: 4

Overlapped: set(['sum', 'might', 'number', 'value', 'define']) 
Overlap: 5 

Question:
5. Scheme.  Write the function product in tail recursive accumulator
   style so that it computes the product of a list of numbers.  [1pt]

Overlapped: set(['function', 'style', 'product', 'list', 'tail']) 
Overlap: 5 

Question:
8. Scheme.  Using foldl, define the function length, which returns the
   length of a list.  [1pt]

Overlapped: set(['function', 'returns', 'list', 'length', 'define']) 
Overlap: 5 

Question:
 2. If guess finds something in a sequence of facts, and verify checks
    to see if it is a good one, then find can be defined in Prolog as:
    (A) find(X) :- guess(X), verify(X).
    (B) find(X) :- guess(X).
        find(X) :- verify(X).
    (C) find(X) :- guess(X), !, verify(X).
    (D) guess(X), verify(X) := find(X).

Overlapped: set(['defined', 'facts', 'see', 'good', 'one']) 
Overlap: 5 

Question:
1. What are the very general possibilities that a function might
   exhibit when called?  [2pt]

    (a)

    (b)

    (c)

    (d)

Overlapped: set(['function', 'c', 'b', 'might', 'called']) 
Overlap: 5 

Question:
 6. The type system in Scheme are:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static

Overlapped: set(['static', 'strong', 'dynamic', 'weak', 'type']) 
Overlap: 5 

Question:
 7. The type system in Ocaml are:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static

Overlapped: set(['static', 'strong', 'dynamic', 'weak', 'type']) 
Overlap: 5 

Question:
1. Name two kinds of universal polymorphism, and give a brief example
   of each.  Do not use more than a few lines of code.  [2pt]

    (a)

    (b)

Overlapped: set(['polymorphism', 'universal', 'b', 'use', 'two']) 
Overlap: 5 

Question:
10. Which function can be implemented using a constant amount of stack
    space?
    (A) filter
    (B) fold_left
    (C) fold_right
    (D) map

Overlapped: set(['function', 'map', 'stack', 'using', 'space']) 
Overlap: 5 

Question:
 7. In a ``lazy'' language, unevaluated arguments are passed into
    functions by means of a:
    (A) closure
    (B) curry
    (C) thunk
    (D) tuple

Overlapped: set(['closure', 'thunk', 'functions', 'arguments', 'language']) 
Overlap: 5 

Question:
 9. Unification is part of the static type checking algorithm used by
    what language?
    (A) C++
    (B) Ocaml
    (C) Prolog
    (D) Smalltalk

Overlapped: set(['checking', 'type', 'used', 'static', 'language']) 
Overlap: 5 

Question:
11. Smalltalk determines if an object can respond to a message by the
    method of:
    (A) same as in Java
    (B) duck-typing
    (C) generic parameters
    (D) multiple inheritance

Overlapped: set(['respond', 'message', 'object', 'multiple', 'inheritance']) 
Overlap: 5 

Question:
11. Which expression causes a list of length zero to be passed into
    the function f?
    (A) (f '())
    (B) (f ())
    (C) (f null?)
    (D) (f nullptr)

Overlapped: set(['function', 'length', 'null', 'list', 'f']) 
Overlap: 5 

Question:
 7. What feature of imperative languages is typically missing from
    functional languages?
    (A) conditionals
    (B) functions
    (C) loops
    (D) recursion

Overlapped: set(['languages', 'recursion', 'functions', 'functional', 'missing']) 
Overlap: 5 

Question:
6. Ocaml.  Rewrite the second filter statement above using a fun (i.
   e., lambda) expression instead of ((>)0).  [1pt]

Overlapped: set(['fun', 'using', 'second', 'statement', 'lambda']) 
Overlap: 5 

Question:
12. Scheme.  Write a tail-recursive function called reverse that re-
   verses a list.  Do not use a higher-order function.  [2pt]
   > (reverse '(1 2 3 4 5))
   (5 4 3 2 1)

Overlapped: set(['function', 'use', 'list', 'reverse', 'called']) 
Overlap: 5 

Question:
 6. Which of the following functions can be written tail-recursively
    without the need for reversing the list?
    (A) filter
    (B) fold_left
    (C) fold_right
    (D) map

Overlapped: set(['following', 'map', 'functions', 'without', 'list']) 
Overlap: 5 

Question:
 7. Edsger Dijkstra published a paper entitled ``__ statement
    considered harmful''.
    (A) continue
    (B) goto
    (C) switch
    (D) throw

Overlapped: set(['harmful', 'considered', 'continue', 'throw', 'statement']) 
Overlap: 5 

Question:
 5. From what segment does a call to new in C++ allocate memory?
    (A) data
    (B) heap
    (C) stack
    (D) text

Overlapped: set(['new', 'data', 'stack', 'heap']) 
Overlap: 4 

Question:
10. If a is a list, which expression produces the same list?
    (A) (car (cdr (cons a))
    (B) (car (cons a (cdr a))
    (C) (cons (car a) (cdr a))
    (D) (cons (cdr a) (car a))

Overlapped: set(['car', 'cons', 'list', 'cdr']) 
Overlap: 4 

Question:
 2. What is 6?
    (A) ((lambda (x)(+ x 3 ))3)
    (B) (cdar '(7 6 5 4 3))
    (C) (if (2 < 3) 4 6)
    (D) (map * '(1 2 3))

Overlapped: set(['map', 'lambda', 'cdar', 'x']) 
Overlap: 4 

Question:
 1. Which expression is not valid, given the following two declarations?
       int *p; int i;
    (A) i + i
    (B) i + p
    (C) p + i
    (D) p + p

Overlapped: set(['int', 'following', 'given', 'two']) 
Overlap: 4 

Question:
 7. In C++, a protected field of a class foo is visible only to
    functions which are members:
    (A) of foo, and any class that inherits from foo.
    (B) of foo, any class that inherits from foo, and any class that foo
        names as a friend
    (C) of foo, any class that inherits from foo, and any class that
        names foo as a friend
    (D) only of foo.

Overlapped: set(['field', 'functions', 'foo', 'class']) 
Overlap: 4 

Question:
 9. Which of these is a C++ keyword that might cause a pointer to become
    dangling?
    (A) delete
    (B) free
    (C) malloc
    (D) new

Overlapped: set(['might', 'cause', 'pointer', 'new']) 
Overlap: 4 

Question:
 1. What expression will print (3)?
    (A) (caar '(1 2 3))
    (B) (cadr '(1 2 3))
    (C) (cdar '(1 2 3))
    (D) (cddr '(1 2 3))

Overlapped: set(['cadr', 'cdar', 'caar', 'cddr']) 
Overlap: 4 

Question:
 2. In Ocaml, the expression 3+4 means:
    (A) The same as the expression (3)(+)(4).
    (B) The operands 3 and 4 are pushed on a stack, and the operator +
        pops the stack and pushes the sum.
    (C) The operator + is applied to the operand 3, the result of
        which is a function which is applied to the number 4.
    (D) The operator + is applied to the operands 3 and 4.

Overlapped: set(['function', 'sum', 'number', 'stack']) 
Overlap: 4 

Question:
 2. Fill in the following table.  Answers (in alphabetical order) are:
    John Backus;  Grace Hopper et.al.;  John Kemeny & Thomas Kurtz;
    John McCarthy.  [1pt]

    +---------------+----------------+----------------+----------------+
    |FORTRAN (1957) | LISP (1958)    | COBOL (1959)   | BASIC (1964)   |
    |               |                |                |                |
    +---------------+----------------+----------------+----------------+

Overlapped: set(['following', 'table', '1957', 'order']) 
Overlap: 4 

Question:
 2. Which Scheme expression will evaluate to the atom 2?
    (A) (caar '(1 2 3))
    (B) (cadr '(1 2 3))
    (C) (cdar '(1 2 3))
    (D) (cddr '(1 2 3))

Overlapped: set(['cadr', 'cdar', 'caar', 'cddr']) 
Overlap: 4 

Question:
 6. A variable declared inside a C or Java function has:
    (A) Dynamic scope and dynamic lifetime.
    (B) Dynamic scope and static lifetime.
    (C) Static scope and dynamic lifetime.
    (D) Static scope and static lifetime.

Overlapped: set(['function', 'static', 'dynamic', 'variable']) 
Overlap: 4 

Question:
10. Which expression will cause the empty list to be passed into f?
    (A) (f '())
    (B) (f ())
    (C) (f null?)
    (D) f (null)

Overlapped: set(['list', 'null', 'cause', 'f']) 
Overlap: 4 

Question:
 6. What is the type of the Ocaml expression
       map ((+)3)
    (A) ('a -> 'b) -> 'a list -> 'b list
    (B) int list -> (int -> int) list
    (C) int list -> int list
    (D) int list

Overlapped: set(['int', 'map', 'list', 'type']) 
Overlap: 4 

Question:
 7. How would the first element (the element with the smallest
    subscript) of a Smalltalk array be set?
    (A) (set! a 1 6).
    (B) a at:1 put:6.
    (C) a put:6 at:1.
    (D) a[1] := 6.

Overlapped: set(['array', 'set', 'first', 'element']) 
Overlap: 4 

Question:
 8. What is the value of
       (cdr (car (cons '(1 2 3) '(4 5 6))))
    (A) ((1 2 3) 4 5 6)
    (B) (1 2 3)
    (C) (2 3)
    (D) (cons '(1 2 3) '(4 5 6))

Overlapped: set(['car', 'cons', 'value', 'cdr']) 
Overlap: 4 

Question:
 3. In Ocaml, what is the type of List.tl?  (Hint:  like cdr in
    Scheme).
    (A) 'a list * 'a list -> 'a list
    (B) 'a list -> 'a
    (C) 'a list -> 'a list
    (D) 'a list -> 'a list -> 'a list

Overlapped: set(['list', 'type', 'like', 'cdr']) 
Overlap: 4 

Question:
 1. In Java, if two functions have the same name in the same class,
    but have different signatures, this is referred to as:
    (A)

Overlapped: set(['functions', 'two', 'name', 'class']) 
Overlap: 4 

Question:
 9. From what memory segment does the malloc(3) function allocate
    memory?
    (A) test
    (B) data
    (C) heap
    (D) stack

Overlapped: set(['function', 'data', 'stack', 'heap']) 
Overlap: 4 

Question:
 6. Name the two kinds of ad hoc polymorphism and give an example of
    each.  [2pt]

Overlapped: set(['ad', 'polymorphism', 'two', 'hoc']) 
Overlap: 4 

Question:
9. Scheme.  Define the functions map and filter.  [2pt]
   > (map (lambda (n) (+ 1 n)) '(3 4 5))
   (4 5 6)
   > (filter (lambda (n) (> n 4)) '(3 4 5 6 7))
   (5 6 7)

Overlapped: set(['map', 'functions', 'lambda', 'n']) 
Overlap: 4 

Question:
10. Perl.  Write a script in Perl which will iterate over all of the
   input files given on the command line and print the contents of all
   of the files to the standard output.  If no files are specified,
   copy the standard input.  You are limited to one statement only.
   Hint:  Use <>.  [1pt]

   #!/usr/bin/perl

Overlapped: set(['given', 'line', 'statement', 'one']) 
Overlap: 4 

Question:
 9. Unification is a part of the static type checking algorithm used
    by compilers of?
    (A) C and C++
    (B) Java and Smalltalk
    (C) ML and Ocaml
    (D) Perl and Python

Overlapped: set(['checking', 'type', 'used', 'static']) 
Overlap: 4 

Question:
 8. Given the Smalltalk statement a:=[:x|x+1].
    What expression would return the number 4?
    (A) 3 to: a.
    (B) a 3.
    (C) a at: 3.
    (D) a value: 3.

Overlapped: set(['value', 'return', 'number', 'statement']) 
Overlap: 4 

Question:
6. Name two kinds if ad hoc polymorphism and give an extremely brief
   example of each in Java or C++.  [2pt]

Overlapped: set(['polymorphism', 'ad', 'two', 'hoc']) 
Overlap: 4 

Question:
 6. In C and C++, when is an external variable bound to a particular
    address?
    (A) When the preprocessor is run.
    (B) When the program is compiled.
    (C) When the program is linked.
    (D) When the main function is called.

Overlapped: set(['function', 'variable', 'main', 'called']) 
Overlap: 4 

Question:
7. Scheme.  Using foldl, define the function product, which computes
   the product of a list of numbers.  [1pt]

Overlapped: set(['function', 'product', 'list', 'define']) 
Overlap: 4 

Question:
10. Perl.  Write a line of code that uses map to compute the product
   of an array.  [1pt]

Overlapped: set(['map', 'product', 'line', 'array']) 
Overlap: 4 

Question:
 2. What is 2?
    (A) (caar '(1 2 3))
    (B) (cadr '(1 2 3))
    (C) (cdar '(1 2 3))
    (D) (cddr '(1 2 3))

Overlapped: set(['cadr', 'cdar', 'caar', 'cddr']) 
Overlap: 4 

Question:
 9. Which of these functions can be written in a tail-recursive style?
    (A) append
    (B) fold_right
    (C) map
    (D) reverse

Overlapped: set(['map', 'functions', 'style', 'reverse']) 
Overlap: 4 

Question:
10. Perl.  Write a program that reads files mentioned on the command
   line, and reads STDIN if none.  Do not open files -- use the <>
   operator.  At the end of the last file, print each word followed by
   the number of times it appears.  Print the words lexicographically.
   A word is any sequence of characters that matches m/\w+/.  An
   example is given.  [2pt]

   +----------------+----------------+
   |example input   | example output |
   +----------------+----------------+
   |This is a test. | This 2         |
   |test is a This. | a 3            |
   |is this a test? | is 3           |
   |testing this.   | test 3         |
   |                | testing 1      |
   |                | this 2         |
   +----------------+----------------+

Overlapped: set(['use', 'given', 'line', 'number']) 
Overlap: 4 

Question:
 1. If a is a valid list, what is equal to a itself?
    (A) (car (cdr (cons a)))
    (B) (cons (car (cdr a)))
    (C) (cons (car a) (cdr a))
    (D) (cons (cdr a) (car a))

Overlapped: set(['car', 'cons', 'list', 'cdr']) 
Overlap: 4 

Question:
 1. The basic algorithm used in type inference is:
    (A) code replication
    (B) interpretation
    (C) overloading
    (D) unification

Overlapped: set(['overloading', 'used', 'type', 'basic']) 
Overlap: 4 

Question:
 3. What is 6?
    (A) (apply + '(1 2 3))
    (B) (cons + '(1 2 3))
    (C) (list + '(1 2 3))
    (D) (map + '(1 2 3))

Overlapped: set(['map', 'cons', 'list', 'apply']) 
Overlap: 4 

Question:
 9. What is 2?
    (A) (caar '(1 2 3))
    (B) (cadr '(1 2 3))
    (C) (cdar '(1 2 3))
    (D) (cddr '(1 2 3))

Overlapped: set(['cadr', 'cdar', 'caar', 'cddr']) 
Overlap: 4 

Question:
 1. Backus-Naur Form, used to define syntax, was first used in the
    definition of:
    (A) ALGOL
    (B) BASIC
    (C) COBOL
    (D) FORTRAN

Overlapped: set(['first', 'define', 'used', 'syntax']) 
Overlap: 4 

Question:
9. Name the two general types of polymorphism, and for each of them,
   name the specific kinds that represents each of them.  [2pt]

   +-------------------------------+-------------------------------+
   |           general             |           specific            |
   +-------------------------------+-------------------------------+
   |                               |                               |
   |                               +-------------------------------+
   |                               |                               |
   +-------------------------------+-------------------------------+
   |                               |                               |
   |                               +-------------------------------+
   |                               |                               |
   +-------------------------------+-------------------------------+

Overlapped: set(['polymorphism', 'two', 'types', 'name']) 
Overlap: 4 

Question:
 5. What is 6?
    (A) (apply + '(1 2 3))
    (B) (cons + '(1 2 3))
    (C) (list + '(1 2 3))
    (D) (map + '(1 2 3))

Overlapped: set(['map', 'cons', 'list', 'apply']) 
Overlap: 4 

Question:
 4. Which function can be written in a tail recursive purely
    functional manner?
    (A) filter
    (B) fold_left
    (C) fold_right
    (D) map

Overlapped: set(['function', 'map', 'tail', 'functional']) 
Overlap: 4 

Question:
11. Backus-Naur format describes what about a language?
    (A) environment
    (B) linkage
    (C) semantics
    (D) syntax

Overlapped: set(['environment', 'syntax', 'language', 'format']) 
Overlap: 4 

Question:
9. Scheme.  Define the function sum.  You may use the function foldl
   or explicitly write a tail-recursive function.  [1pt]

Overlapped: set(['function', 'write', 'use', 'sum']) 
Overlap: 4 

Question:
 9. The address of a static variable in C and C++ is determined when?
    (A) compile time
    (B) link time
    (C) exec time
    (D) when a function is called

Overlapped: set(['function', 'variable', 'static', 'called']) 
Overlap: 4 

Question:
14. Prolog:  Define the function product, which produces the product of
    all the numbers in a list.  [2pt]
    | ?- product(N,[1,2,3,4,5]).
    N = 120
    | ?- product(N,[]).
    N = 1

Overlapped: set(['function', 'product', 'list']) 
Overlap: 3 

Question:
11. The Java class that permits a process to have multiple things done
    concurrently is:
    (A) Daemon
    (B) Runnable
    (C) Task
    (D) Thread

Overlapped: set(['multiple', 'class', 'permits']) 
Overlap: 3 

Question:
 3. The address of a static variable in C++ is determined at what time?
    (A) compile
    (B) during a function call
    (C) link
    (D) program exec

Overlapped: set(['function', 'variable', 'static']) 
Overlap: 3 

Question:
 5. What is the name of the C++ variable used to print error messages?
    (A) STDERR
    (B) System.err
    (C) cerr
    (D) stderr

Overlapped: set(['variable', 'used', 'name']) 
Overlap: 3 

Question:
 4. In Ocaml, what is the type of the function (+)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int

Overlapped: set(['int', 'function', 'type']) 
Overlap: 3 

Question:
 8. Perl:  Write a program in Perl that uses <> to read all of the
    input lines.  At end of the last file, it prints the number of
    characters, words, and lines found in the file.  A word is any
    sequence of characters that does not match white space.  (A word
    matches \S+).  [2pt]

    bash-3.2$ (echo this is a test; \
    > echo 2 lines in the file) \
    > | wc.perl
    2 9 35

Overlapped: set(['number', 'match', 'space']) 
Overlap: 3 

Question:
 1. In Smalltalk, the expression 3+4 means:
    (A) The message + is sent to the number 3, the result of which is
        a function that accepts the message 4.
    (B) The message +4 is sent to the number 3.
    (C) The message 3+ is sent to the number 4.
    (D) The messages 3 and 4 are sent to the operator +.

Overlapped: set(['function', 'message', 'number']) 
Overlap: 3 

Question:
10. In Ocaml, what is the type of List.map?
    (A) ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    (B) ('a -> 'b) -> 'a list -> 'b list
    (C) ('a -> bool) -> 'a list -> 'a list
    (D) ('a -> bool) -> 'a list -> bool

Overlapped: set(['type', 'list', 'bool']) 
Overlap: 3 

Question:
 3. Write an expression in Java using the operator && which will
    return a result because && is a lazy operator, but which would
    throw an exception if it were evaluated eagerly.  [1pt]

Overlapped: set(['using', 'return', 'throw']) 
Overlap: 3 

Question:
 4. Write a Perl program that will read STDIN and print the number of
    characters, words, and lines in the file.  A word is any sequence
    of non-whitespace characters.  [2pt]

    % cat t
    this is a test
    second line
    last line in the file
    % wc.perl  <t
          3      11      49

Overlapped: set(['second', 'line', 'number']) 
Overlap: 3 

Question:
 3. In Smalltalk, an expression to which the value message may be sent
    in order to retrieve the value 9 is:
    (A) (4 + 5)
    (B) <4 + 5>
    (C) [4 + 5]
    (D) {4 + 5}

Overlapped: set(['message', 'order', 'value']) 
Overlap: 3 

Question:
10. The style of programming in Smalltalk is:
    (A) functional
    (B) imperative
    (C) logic
    (D) object-oriented

Overlapped: set(['style', 'programming', 'functional']) 
Overlap: 3 

Question:
 5. Name the two general kinds of polymorphism, and for each of them,
    name the two sub-kinds of polymporhism into which they may be
    classified.  [1pt]

Overlapped: set(['polymorphism', 'two', 'name']) 
Overlap: 3 

Question:
 7. Ocaml:  Define a function exclude which does the same.  [2pt]
    # exclude 2 [1;2;3;4;5];;
    - : int list = [3; 4; 5]
    # exclude (-5) [1;2;3;4;5];;
    - : int list = [1; 2; 3; 4; 5]
    # exclude 10 [1;2;3];;
    - : int list = []

Overlapped: set(['int', 'function', 'list']) 
Overlap: 3 

Question:
 5. A process that has exited, either by calling exit or from a
    signal, but has not yet been waited for by its parent process is
    called a:
    (A) daemon
    (B) fork bomb
    (C) init
    (D) zombie

Overlapped: set(['called', 'parent', 'calling']) 
Overlap: 3 

Question:
 6. In Perl, the default argument to a function requiring an argument,
    when none is given, is:
    (A) $!
    (B) $0
    (C) $_
    (D) @_

Overlapped: set(['function', 'given', 'argument']) 
Overlap: 3 

Question:
 2. In Java, if two functions in different classes have the same
    signature, but one of the classes is a subclass of another, this
    is referred to as:
    (A)

Overlapped: set(['functions', 'two', 'one']) 
Overlap: 3 

Question:
 6. All imperative featurs of Haskell must be isolated from the rest
    of the program and contained in a:
    (A) closure
    (B) monad
    (C) proxy
    (D) thunk

Overlapped: set(['monad', 'closure', 'thunk']) 
Overlap: 3 

Question:
 5. Name the two kinds of universal polymorphism and give an example
    of each.  [2pt]

Overlapped: set(['polymorphism', 'universal', 'two']) 
Overlap: 3 

Question:
 9. Assuming only pure Java code with no sneaky tricks written in C,
    If M = memory leaks, D = dangling references, and U = unsafe type
    conversions or casting, which of the following are possible in
    Java?
    (A) all of them.
    (B) none of them.
    (C) only D, but neither M nor U.
    (D) only M, but neither D nor U.

Overlapped: set(['following', 'type', 'pure']) 
Overlap: 3 

Question:
 2. Assuming a competent implemention in Ocaml, which function takes
    up the most stack space?
    (A) List.find
    (B) List.fold_left
    (C) List.fold_right
    (D) List.length

Overlapped: set(['function', 'stack', 'space']) 
Overlap: 3 

Question:
 8. The type of [1; 2; 3; 4] is:
    (A) 'a list
    (B) int list
    (C) list<Object>
    (D) list<int>

Overlapped: set(['int', 'list', 'type']) 
Overlap: 3 

Question:
10. The following prints the number 6 in which language?
       stdout << 6 << Character nl.
    (A) Ocaml
    (B) Perl
    (C) Scheme
    (D) Smalltalk

Overlapped: set(['following', 'number', 'language']) 
Overlap: 3 

Question:
 2. Which languages do not have parametric polymorphism?
    (A) C++
    (B) Java
    (C) Ocaml
    (D) Smalltalk

Overlapped: set(['languages', 'polymorphism', 'parametric']) 
Overlap: 3 

Question:
 6. What is the type of List.map?
    (A) ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    (B) ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    (C) ('a -> 'b) -> 'a list -> 'b list
    (D) ('a -> bool) -> 'a list -> 'a list

Overlapped: set(['bool', 'list', 'type']) 
Overlap: 3 

Question:
 7. In Smalltalk, the expression 3+4 means:
    (A) The message +4 is sent to the object 3.
    (B) The message 3 is sent to the function +, the result of which
        is a function to which the message 4 is sent.
    (C) The same as (+)3 4.
    (D) The tuple message (3,4) is sent to the object +.

Overlapped: set(['function', 'message', 'object']) 
Overlap: 3 

Question:
10. When a garbage collector forms the closure of the root set, it
    identifies all ___ objects on the heap.
    (A) dead
    (B) live
    (C) reachable
    (D) unreachable

Overlapped: set(['closure', 'set', 'heap']) 
Overlap: 3 

Question:
 3. What kind of garbage collection fails on cyclic data structures?
    (A) copying with semispaces
    (B) generational
    (C) mark and sweep
    (D) reference counting

Overlapped: set(['structures', 'kind', 'data']) 
Overlap: 3 

Question:
 7. Which is a fully curried lazy functional language with
    overloading?
    (A) Haskell
    (B) Ocaml
    (C) Scheme
    (D) Smalltalk

Overlapped: set(['overloading', 'functional', 'language']) 
Overlap: 3 

Question:
2. Write a program in perl which reads in lines using <>.  Each line
   consists of three numbers.  At end of file print out the totals of
   each of the three columns of numbers.  [3pt]

Overlapped: set(['using', 'line', 'perl']) 
Overlap: 3 

Question:
5. Name two kinds if universal polymorphism and give an extremely
   brief example of each in Java or C++.  [2pt]

Overlapped: set(['polymorphism', 'universal', 'two']) 
Overlap: 3 

Question:
2. Perl.  Write a program in Perl which will use <> to read in lines.
   At end of file, print the number of characters, words, and lines.
   A word is any sequence of characters delimited by white space.
   [2pt]

Overlapped: set(['use', 'number', 'space']) 
Overlap: 3 

Question:
 2. What is ((lambda (f x) (f x)) + 3)?
    (A) '(+ 3)
    (B) '(f x)
    (C) 3
    (D) 6

Overlapped: set(['x', 'lambda', 'f']) 
Overlap: 3 

Question:
 4. What is?
    (car (cdr (cons '(1 2 3) '(4 5 6))))
    (A) '(1 2 3)
    (B) '(4 5 6)
    (C) 1
    (D) 4

Overlapped: set(['car', 'cons', 'cdr']) 
Overlap: 3 

Question:
 5. In Ocaml, what is the type of [1;2;3;4]?
    (A) (list int)
    (B) int list
    (C) list->int
    (D) list<int>

Overlapped: set(['int', 'list', 'type']) 
Overlap: 3 

Question:
11. Which feature of imperative languages* is missing from Scheme?
    (A) conditionals
    (B) functions
    (C) loops
    (D) variables

Overlapped: set(['functions', 'variables', 'missing']) 
Overlap: 3 

Question:
 4. In a garbage collected language like Java, with no free function
    or its equivalent, if M = memory leaks and D = dangling pointers
    or references, which is possible?
    (A) D but not M
    (B) M but not D
    (C) both M and D
    (D) neither M nor D

Overlapped: set(['function', 'like', 'language']) 
Overlap: 3 

Question:
 8. In Smalltalk what is the meaning of:
    foo bar + foo set: 3 + 4 next
    (A) ((foo bar) + foo) set: (3 + (4 next))
    (B) (foo (bar + foo)) set: ((3 + 4) next)
    (C) (foo bar) + (foo set: 3) + (4 next)
    (D) (foo bar) + (foo set: 3) + (4 next)

Overlapped: set(['set', 'bar', 'foo']) 
Overlap: 3 

Question:
 1. Language designed primarily to handle scalars, vectors, matrices,
    and higher order arrays.
    (A) APL
    (B) COBOL
    (C) FORTRAN
    (D) PL/I

Overlapped: set(['order', 'designed', 'higher']) 
Overlap: 3 

Question:
 8. What kind of memory management fails to handle a cyclic data
    structure?
    (A) copying collector with semispaces
    (B) malloc and free
    (C) mark and sweep
    (D) reference counting

Overlapped: set(['kind', 'data', 'structure']) 
Overlap: 3 

Question:
 9. If multiple threads sharing global variables are not synchronized
    by means of a critical section, what program problem will appear?
    (A) deadlock
    (B) race condition
    (C) segmentation fault
    (D) semaphores

Overlapped: set(['variables', 'multiple', 'problem']) 
Overlap: 3 

Question:
 6. In Smalltalk, the expression 3+4.  means:
    (A) The message + is sent to the number 3, the result of which is
        a function that accepts the message 4.
    (B) The message +4 is sent to the number 3.
    (C) The message 3+ is sent to the number 4.
    (D) The messages 3 and 4 are sent to the operator +.

Overlapped: set(['function', 'message', 'number']) 
Overlap: 3 

Question:
 8. What is the signature of the Ocaml function List.hd (equivalent to
    car)?
    (A) 'a -> 'a list
    (B) 'a -> 'a
    (C) 'a list -> 'a list
    (D) 'a list -> 'a

Overlapped: set(['function', 'car', 'list']) 
Overlap: 3 

Question:
 9. Given:
    # List.map ((+)3) [1;2;3];;
    - : int list = [4; 5; 6]
    what is the type of List.map ((+)3)?
    (A) int -> int
    (B) int -> int list
    (C) int list -> int
    (D) int list -> int list

Overlapped: set(['int', 'list', 'type']) 
Overlap: 3 

Question:
10. In both Java and C++, what keyword is used to restrict access to a
    class itself but allow access to classes derived from it?
    (A) inheritance
    (B) private
    (C) protected
    (D) public

Overlapped: set(['used', 'class', 'inheritance']) 
Overlap: 3 

Question:
1. What are the four very general things a function might do when
   called?  [2pt]

   +-------------------------------+-------------------------------+
   |                               |                               |
   |                               |                               |
   +-------------------------------+-------------------------------+
   |                               |                               |
   |                               |                               |
   +-------------------------------+-------------------------------+

Overlapped: set(['function', 'might', 'called']) 
Overlap: 3 

Question:
7. Smalltalk.  List the kinds of messages that can be sent to a
   Smalltalk object, and give an example of each.  [3pt]

    (a) Highest precedence:

    (b) Middle precedence:

    (c) Lowest precedence:

Overlapped: set(['c', 'object', 'b']) 
Overlap: 3 

Question:
8. Fill in the following table.  Some possible answers:  John Backus.
   Alonzo Church.  Grace Hopper.  John Kemeny & Thomas Kurtz.  John
   McCarthy.  Dennis Ritchie.  Bjarne Stroustrup.  [1pt]

   +---------------+----------------+----------------+---------------+
   |Fortran        | Cobol          | Basic          |Lisp           |
   |               |                |                |               |
   |               |                |                |               |
   |               |                |                |               |
   +---------------+----------------+----------------+---------------+

Overlapped: set(['following', 'table', 'answers']) 
Overlap: 3 

Question:
 8. A garbage collector which is most friendly to the page tables by
    compacting heap objects into as few pages as possible:
    (A) concurrent reclamation of live objects
    (B) copying collector with semispaces
    (C) mark and sweep collector
    (D) reference counting

Overlapped: set(['page', 'heap']) 
Overlap: 2 

Question:
 9. Passing a parameter by __ means that it is passed in unevaluated and
    then evaluated only if needed.
    (A) name
    (B) reference
    (C) value
    (D) value-result

Overlapped: set(['name', 'value']) 
Overlap: 2 

Question:
 4. What time is the address returned by new determinaed?
    (A) compile
    (B) during a function call
    (C) link
    (D) program exec

Overlapped: set(['function', 'new']) 
Overlap: 2 

Question:
 8. Of the following languages, which is oldest?
    (A) Algol 60
    (B) C++
    (C) Fortran
    (D) Java

Overlapped: set(['languages', 'following']) 
Overlap: 2 

Question:
 2. What variable in a command in a Makefile has as its value the target
    of the recipe?
    (A) $*
    (B) $<
    (C) $?
    (D) $@

Overlapped: set(['variable', 'value']) 
Overlap: 2 

Question:
 3. What are the four general things that a function may do when
    called?  [2pt]

Overlapped: set(['function', 'called']) 
Overlap: 2 

Question:
 8. A Perl pattern that matches one or more white space characters is:
    (A) \d+
    (B) \s+
    (C) \t+
    (D) \w+

Overlapped: set(['space', 'one']) 
Overlap: 2 

Question:
11. The first computer bug was so named in 1947 at:
    (A) Carnegie-Mellon
    (B) Harvard
    (C) Princeton
    (D) Stanford

Overlapped: set(['computer', 'first']) 
Overlap: 2 

Question:
 3. If %h is a hash in Perl, and $k is its key, the value is obtained
    by the expression:
    (A) $h{$k}
    (B) %h{$k}
    (C) &h{$k}
    (D) @h{$k}

Overlapped: set(['h', 'value']) 
Overlap: 2 

Question:
 9. In Ocaml, the type of (+) is:
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int

Overlapped: set(['int', 'type']) 
Overlap: 2 

Question:
10. Explain the difference between static and dynamic scope, and give
    an example of each.  [2pt]

Overlapped: set(['static', 'dynamic']) 
Overlap: 2 

Question:
 1. Lazy evaluation of functions is the default in which language?
    (A) Fortran
    (B) Haskell
    (C) Ocaml
    (D) Scheme

Overlapped: set(['functions', 'language']) 
Overlap: 2 

Question:
 4. Perl:  Write a program which uses <> to read files and at end
    prints the number of characters, words, and lines in these files.
    A word is anything that matches /\S+/.  [2pt]
    % wc.perl foo
    4 28 149

Overlapped: set(['foo', 'number']) 
Overlap: 2 

Question:
 7. Unification is an important algorithm in performing automatic type
    inference in which of these languages?
    (A) Java
    (B) Ocaml
    (C) Prolog
    (D) Scheme

Overlapped: set(['languages', 'type']) 
Overlap: 2 

Question:
10. A process that sleeps in the background and wakes up whenever a
    request is made on its port, then performs that service, and
    returns to sleep to wait for the next request is called a:
    (A) daemon
    (B) fork bomb
    (C) init
    (D) zombie

Overlapped: set(['returns', 'called']) 
Overlap: 2 

Question:
 5. What is the value of:
       (cadr '((1 2 3) (4 5 6) (7 8 9)))
    (A) 1
    (B) (4 5 6)
    (C) (2 3)
    (D) ((7 8 9))

Overlapped: set(['cadr', 'value']) 
Overlap: 2 

Question:
 5. Assuming pure Java code with no native methods written in C, if M
    = memory leaks and D = dangling references, then which are
    possible?
    (A) D is possible, but not M.
    (B) M is possible, but not D.
    (C) both M and D.
    (D) neither M nor D.

Overlapped: set(['methods', 'pure']) 
Overlap: 2 

Question:
 3. What is ((lambda (x) x) (+ 2 3))?
    (A) (+ 2 3)
    (B) +
    (C) 5
    (D) x

Overlapped: set(['x', 'lambda']) 
Overlap: 2 

Question:
 4. What is the parenthesized equivalent of the Smalltalk expression a
    b c: d?
    (A) ((a b) c: d)
    (B) (a (b c: d))
    (C) (a b) (c: d)
    (D) a ((b c:) d)

Overlapped: set(['c', 'b']) 
Overlap: 2 

Question:
 5. In the \lambda-calculus expression $ ( lambda x . ^ + ^ x ^ y ) $:
    (A) $x$ is bound and $y$ is bound.
    (B) $x$ is bound and $y$ is free.
    (C) $x$ is free and $y$ is bound.
    (D) $x$ is free and $y$ is free.

Overlapped: set(['x', 'lambda']) 
Overlap: 2 

Question:
 7. What is ((lambda (x) x) '(+ 2 3))?
    (A) (+ 2 3)
    (B) +
    (C) 5
    (D) x

Overlapped: set(['x', 'lambda']) 
Overlap: 2 

Question:
 8. Static type checking in C and C++ is done:
    (A) by the preprocessor
    (B) by the compiler
    (C) by the linker
    (D) at run time

Overlapped: set(['checking', 'type']) 
Overlap: 2 

Question:
 5. Passing a parameter by ___ means that it is passed in unevaluated
    and then evaluated only if needed.
    (A) name
    (B) reference
    (C) value
    (D) value-result

Overlapped: set(['name', 'value']) 
Overlap: 2 

Question:
10. In Perl, what command will put the names of files in the current
    directory in the variable @files?
    (A) @files = <ls>;
    (B) @files = `ls`;
    (C) @files = glob "ls";
    (D) @files = system 'ls';

Overlapped: set(['current', 'variable']) 
Overlap: 2 

Question:
 4. Which will unexpectedly start a comment?
    (A) let f = (*);;
    (B) let f = (+);;
    (C) let f = (-);;
    (D) let f = (/);;

Overlapped: set(['let', 'f']) 
Overlap: 2 

Question:
 5. What Perl statement will open a pipe to a subprocess and allow
    writing to its standard input?
    (A) open my $file, "$name|"
    (B) open my $file, "<$name"
    (C) open my $file, ">$name"
    (D) open my $file, "|$name"

Overlapped: set(['name', 'statement']) 
Overlap: 2 

Question:
 3. What is type of (+) in Ocaml?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int

Overlapped: set(['int', 'type']) 
Overlap: 2 

Question:
 3. What is ((lambda (x) x) (+ 2 3))?
    (A) (+ 2 3)
    (B) +
    (C) 10
    (D) 5

Overlapped: set(['x', 'lambda']) 
Overlap: 2 

Question:
 6. The Java idea of an interface is implemented in Smalltalk as:
    (A) abstract classes
    (B) duck typing
    (C) multiple inheritance of fields
    (D) single inheritance

Overlapped: set(['multiple', 'inheritance']) 
Overlap: 2 

Question:
3. Prolog.  Write a relation ispath(X,Y) if there is a path from X to
   Y in one or more steps.  It fails if X=Y.  Assume an acyclic graph.
   [2pt]

Overlapped: set(['graph', 'one']) 
Overlap: 2 

Question:
 4. In the expression (lambda (x) (+ x y))
    (A) x is bound and y is bound.
    (B) x is bound and y is free.
    (C) x is free and y is bound.
    (D) x is free and y is free.

Overlapped: set(['x', 'lambda']) 
Overlap: 2 

Question:
 5. The make language can be referred to as:
    (A) a functional language.
    (B) a ``little'' language.
    (C) a logic language.
    (D) an object-oriented language.

Overlapped: set(['functional', 'language']) 
Overlap: 2 

Question:
 3. What is the Ocaml type signature of:
    (/);;
    (A) - : int * int * int
    (B) - : int * int -> int
    (C) - : int -> int * int
    (D) - : int -> int -> int

Overlapped: set(['int', 'type']) 
Overlap: 2 

Question:
3. Ocaml.  Define the function fold_left.

    (a) Ocaml.  [2pt]

    (b) Scheme.  [2pt]

Overlapped: set(['function', 'b']) 
Overlap: 2 

Question:
14. Ocaml.  Define mul' as per the project specifications.  [3pt]
   # add' [1;2;3] [4;5;6;7] 0;;
   - : int list = [5; 7; 9; 7]
   # add' [4;5;6;7] [2] 0;;
   - : int list = [6; 5; 6; 7]
   # add' [9;9;9;9] [1] 0;;
   - : int list = [0; 0; 0; 0; 1]

Overlapped: set(['int', 'list']) 
Overlap: 2 

Question:
13. Give an example of how memory leak might occur in Java.  [2pt]

Overlapped: set(['might']) 
Overlap: 1 

Question:
 4. Write the prototypes for the four default members of class box that
    are automatically added to a class if not explicitly overriden.
    [2pt]

    class box {

Overlapped: set(['class']) 
Overlap: 1 

Question:
 3. If M = memory leak, D = dangling references, and U = unsafe type
    conversions, which is possible in Java?
    (A) all of them
    (B) none of them
    (C) D but neither M nor U
    (D) M but neither D nor U

Overlapped: set(['type']) 
Overlap: 1 

Question:
 5. Unification is an important algorithm in determining the flow of
    control in:
    (A) Ocaml
    (B) Prolog
    (C) Scheme
    (D) Smalltalk

Overlapped: set(['control']) 
Overlap: 1 

Question:
 7. In Perl, the name of the script being run is:
    (A) $!
    (B) $0
    (C) $ARGV[0]
    (D) $ENV{SCRIPT}

Overlapped: set(['name']) 
Overlap: 1 

Question:
 1. Which of the following Java operators uses lazy evaluation?
    (A) &&
    (B) ++
    (C) ==
    (D) >>

Overlapped: set(['following']) 
Overlap: 1 

Question:
 9. After a Perl program has executed a subprocess, the completion
    status of that process is available in what variable?
    (A) $!
    (B) $&
    (C) $?
    (D) $_

Overlapped: set(['variable']) 
Overlap: 1 

Question:
 2. In Smalltalk, $ sqrt 2 $ can be computed with the following
    expression:
    (A) (sqrt 2)
    (B) 2 sqrt
    (C) sqrt (2)
    (D) sqrt 2.0;;

Overlapped: set(['following']) 
Overlap: 1 

Question:
11. Give an example of how memory leak might occur in Java.  [2pt]

Overlapped: set(['might']) 
Overlap: 1 

Question:
 1. What will make Smalltalk print 9?
    (A) (4 + 5) value.
    (B) (4 + 5) value:.
    (C) [4 + 5] value.
    (D) [4 + 5] value:.

Overlapped: set(['value']) 
Overlap: 1 

Question:
 8. Given the declarations int *p;  and int i;, which C expression is
    not valid?
    (A) i + i
    (B) i + p
    (C) p + i
    (D) p + p

Overlapped: set(['int']) 
Overlap: 1 

Question:
 1. Which of these languages evaluates expressions in a lazy manner by
    default?
    (A) Haskell
    (B) Lisp
    (C) Perl
    (D) Scheme

Overlapped: set(['languages']) 
Overlap: 1 

Question:
 2. Which of the following C operators is ``lazy''?
    (A) &&
    (B) ++
    (C) ==
    (D) >>

Overlapped: set(['following']) 
Overlap: 1 

Question:
10. Given the C declaration char **p;, which expression is invalid?
    (A) &(&p)
    (B) &(*p)
    (C) *(&p)
    (D) *(*p)

Overlapped: set(['declaration']) 
Overlap: 1 

Question:
 1. The type signature of (/.)  is:
    (A) float * float * float
    (B) float * float -> float
    (C) float -> float * float
    (D) float -> float -> float

Overlapped: set(['type']) 
Overlap: 1 

Question:
 1. Which language is not completely strongly typed?
    (A) C++
    (B) Perl
    (C) Scheme
    (D) Smalltalk

Overlapped: set(['language']) 
Overlap: 1 

Question:
 4. In Ocaml, what is the type of (/.)?
    (A) float * float * float
    (B) float * float -> float
    (C) float -> float * float
    (D) float -> float -> float

Overlapped: set(['type']) 
Overlap: 1 

Question:
 9. In Perl, what will print the current date and time?
    (A) print "date";
    (B) print 'date';
    (C) print (date);
    (D) print `date`;

Overlapped: set(['current']) 
Overlap: 1 

Question:
10. What is not false in Perl?
    (A) 0
    (B) 0.0/0.0
    (C) ""
    (D) undef

Overlapped: set(['false']) 
Overlap: 1 

Question:
 1. Which of the following C operators uses lazy evaluation?
    (A) !=
    (B) *=
    (C) >>
    (D) ? :

Overlapped: set(['following']) 
Overlap: 1 

Question:
 2. The Perl variable equivalent to strerror(errno) is:
    (A) $!
    (B) $0
    (C) $?
    (D) $_

Overlapped: set(['variable']) 
Overlap: 1 

Question:
 4. In Smalltalk, what produces 13?
    (A) '4+9' value
    (B) (4+9) value
    (C) [4+9] value
    (D) {4+9} value

Overlapped: set(['value']) 
Overlap: 1 

Question:
 8. If $p is a reference to a Perl hash and $k is a key whose
    corresponding value is a scalar, how is the value extracted?
    (A) $p->{$k}
    (B) $p{$k}
    (C) %p->{$k}
    (D) %p{$k}

Overlapped: set(['value']) 
Overlap: 1 

Question:
10. What is not false in Perl?
    (A) 0
    (B) 0.0/0.0
    (C) ""
    (D) undef

Overlapped: set(['false']) 
Overlap: 1 

Question:
10. In Smalltalk, how does one compute $ sqrt 2 $?
    (A) 2 **: 0.5
    (B) 2 sqrt
    (C) Number sqrt: 2
    (D) sqrt 2

Overlapped: set(['one']) 
Overlap: 1 

Question:
 3. In Perl, how can $p be made to be a reference to an array
    containing some integers?
    (A) $p = (1, 2, 3, 4);
    (B) $p = <1, 2, 3, 4>;
    (C) $p = [1, 2, 3, 4];
    (D) $p = {1, 2, 3, 4};

Overlapped: set(['array']) 
Overlap: 1 

Question:
 6. Which language uses lazy evaluation by default?
    (A) Haskell
    (B) Lisp
    (C) Ocaml
    (D) Scheme

Overlapped: set(['language']) 
Overlap: 1 

Question:
10. If $key is a key, what is the value associated with it in a hash?
    $hash{$key} %hash{$key} &hash{$key} @hash{$key}

Overlapped: set(['value']) 
Overlap: 1 

Question:
10. Lisp and Scheme, in general form, are based on a form of
    mathematics first formulated by Alonzo Church.
    (A) \lambda-calculus
    (B) \mu-calculus
    (C) \pi-calculus
    (D) \psi-calculus

Overlapped: set(['first']) 
Overlap: 1 

Question:
 9. What is 7 in Smalltalk?
    (A) (+) 3 4.
    (B) (3+4) value.
    (C) [3+4] value.
    (D) {3+4} value.

Overlapped: set(['value']) 
Overlap: 1 

Question:
 2. Scripting language covered during the last few lectures.
    (A) Bash
    (B) Perl
    (C) Python
    (D) Ruby

Overlapped: set(['language']) 
Overlap: 1 

Question:
 3. First two characters of a script source file.
    (A) #!
    (B) /*
    (C) //
    (D) ;;

Overlapped: set(['two']) 
Overlap: 1 

Question:
 4. Earliest language which is an ancestor of Scheme.
    (A) BCPL
    (B) Cobol
    (C) Fortran
    (D) Lisp

Overlapped: set(['language']) 
Overlap: 1 

Question:
 5. Besides C, the object-oriented language which is an ancestor of
    C++.
    (A) Algol 60
    (B) Fortran IV
    (C) Pascal
    (D) Simula 67

Overlapped: set(['language']) 
Overlap: 1 

Question:
 8. Lisp was designed when, by whom, and where?
    (A) 1953, John Backus.
    (B) 1958, John McCarthy.
    (C) 1959, Grace Hopper, et al.
    (D) 1964, John Kemeny, Thomas Kurtz.

Overlapped: set(['designed']) 
Overlap: 1 

Question:
 3. What Perl regex matches a sequence of letters, digits, and
    underscores?
    (A) \d+
    (B) \n+
    (C) \s+
    (D) \w+

Overlapped: set(['regex']) 
Overlap: 1 

Question:
 4. Which of the following C++ operators is ``lazy''?
    (A) *=
    (B) ==
    (C) >>
    (D) ? :

Overlapped: set(['following']) 
Overlap: 1 

Question:
 2. Static type inference is a major feature of:
    (A) C
    (B) Java
    (C) Ocaml
    (D) Scheme

Overlapped: set(['type']) 
Overlap: 1 

Question:
 1. What is the Scheme value of:
    (caddr '(1 2 3 4 5))
    (A) (3 4 5)
    (B) (4 5)
    (C) 2
    (D) 3

Overlapped: set(['value']) 
Overlap: 1 

Question:
 5. Lisp (McCarthy) and Scheme (Steele and Sussman), in general form,
    are based on a form of mathematics first formulated by Alonzo
    Church.
    (A) \lambda-calculus
    (B) \mu-calculus
    (C) \pi-calculus
    (D) \psi-calculus

Overlapped: set(['first']) 
Overlap: 1 

Question:
 6. Which line is a comment in Scheme?
    (A) (*...*)
    (B) /*...*/
    (C) //...
    (D) ;;...

Overlapped: set(['line']) 
Overlap: 1 

Question:
10. Java.  Give an example of how memory leak might happen in Java.
   [2pt]

Overlapped: set(['might']) 
Overlap: 1 

Question:
 1. Replacing $ (\lambdax~ . ~ + ~ x ~ 1) ~  2 $ by $ ( + ~ 2 ~ 1 ) $
    is an example of
    (A) \alpha-reduction
    (B) \beta-reduction
    (C) \eta-reduction
    (D) \lambda-reduction

Overlapped: set(['x']) 
Overlap: 1 

Question:
 3. A garbage collector automatically recycles what kind of objects?
    (A) dead
    (B) live
    (C) reachable
    (D) unreachable

Overlapped: set(['kind']) 
Overlap: 1 

Question:
11. Which C operator uses normal order evaluation?
    (A) ++
    (B) <<
    (C) ==
    (D) ||

Overlapped: set(['order']) 
Overlap: 1 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
10. In C++, which of these operators is ``lazy''?
    (A) &&
    (B) ++
    (C) <<
    (D) ==

Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
 2. In Smalltalk, what is 1.4142135623730951?
    (A) (sqrt 2)
    (B) 2 ** .5
    (C) 2 sqrt
    (D) sqrt (2)

Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
 3. In Smalltalk, the expression 3-4/5-6 is equivalent to:
    (A) ((3-4)/5)-6
    (B) (3-(4/5))-6
    (C) (3-4)/(5-6)
    (D) 3-((4/5)-6)

Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
 2. What is a comment in Ocaml?
    (A) (*...*)
    (B) /*...*/
    (C) //...
    (D) ;;...

Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
 3. In Smalltalk, a-b*c+d is equivalent to:
    (A) ((a-b)*c)+d
    (B) (a-(b*c))+d
    (C) (a-b)*(c+d)
    (D) a-(b*(c+d))

Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
 2. What is the Perl equivalent to strerror(errno)?
    (A) "$!"
    (B) "$0"
    (C) "$?"
    (D) "$_"

Overlapped: set([]) 
Overlap: 0 

Question:
 7. The Perl pattern equivalent to [a-zA-Z0-9_] is:
    (A) \d+
    (B) \s+
    (C) \t+
    (D) \w+

Overlapped: set([]) 
Overlap: 0 

Question:
 7. In Ocaml, what is 7?
    (A) (+) (3, 4);;
    (B) (+) 3 4;;
    (C) (+) 3, 4;;
    (D) 3 (+) 4;;

Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
 8. In C, C++, and Java, which operator is lazy?
    (A) ++
    (B) --
    (C) //
    (D) ||

Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
 2. What is the Smalltalk expression for $ sqrt 2 $ ?
    (A) sqrt (2)
    (B) 2 sqrt
    (C) Number::sqrt 2
    (D) 2 ^ .5

Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
 6. In Smalltalk:  $ sqrt 2.0 $
    (A) (sqrt 2.0)
    (B) 2.0 sqrt
    (C) 2.718281828459045
    (D) sqrt (2.0)

Overlapped: set([]) 
Overlap: 0 

Question:
10. Prolog:
    | ?- X is sin(pi).
    (A) X = -1.0
    (B) X = 1.2246467991473532e-16
    (C) X = 2.7182818284590451
    (D) X = 3.1415926535897931

Overlapped: set([]) 
Overlap: 0 

Question:
 2. The classic paper ``Go To Statement Considered Harmful'', CACM,
    1968, was written by:
    (A) John Backus
    (B) Edsger Dijkstra
    (C) Grace Hopper
    (D) Donald Knuth

Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
Overlapped: set([]) 
Overlap: 0 

Question:
 2. The \lambda-calculus was invented by:
    (A) Ada Lovelace
    (B) Alan Turing
    (C) Alonzo Church
    (D) Grace Hopper

Overlapped: set([]) 
Overlap: 0 

