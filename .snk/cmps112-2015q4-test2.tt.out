Question:
8. Smalltalk.  Define classes Num and Mul that can be used as a basis
   for expression trees.  Num has an instance value number, a class
   method new:  which sets the number;  and instance methods set:
   which updates the number, and value which returns the number.  Mul
   has two instance values which point at left and right
   subexpressions, a class method left:right:  which creates a new
   instance with pointers to other Nums and Muls, and instance methods
   left:right:  which updates the left and right children of the
   expression tree, and value which evaluates the expression.  [4pt]

   st> a:= Num new: 6.
   a Num
   st> b:= Num new: 8.
   a Num
   st> a value.
   6
   st> b value.
   8
   st> c:= Mul left:a right:b.
   a Mul
   st> c value.
   48
   st> b set: 99.
   a Num
   st> c value.
   594

Overlapped: set(['two', 'c', 'set', 'methods', 'point', 'tree', 'number', 'used', 'st', 'creates', 'returns', 'right', 'value', 'left', 'new', 'b', 'class', 'smalltalk', 'define']) 
Overlap: 19 
Accuracy: 0.13768115942 

Question:
5. Ocaml.  Define the function ip (inner product) which is the sum of
   pairwise products of two lists.  Use tail recursion.  Raise an
   exception if the lists are of different lengths.  The formula is
   given mathematically here.  [2pt]

   .EQ
   p = sum from { i = 0 } to { n - 1 } u sub i v sub i
   .EN

   # ip;;
   - : float list -> float list -> float = <fun>
   # ip [1.;2.;3.] [4.;5.;6.];;
   - : float = 32.

Overlapped: set(['function', 'use', 'sub', 'recursion', 'sum', 'list', 'two', 'ocaml', 'product', 'tail', 'n', 'inner', 'v', 'fun', 'given', 'define']) 
Overlap: 16 
Accuracy: 0.166666666667 

Question:
7. Smalltalk.  Define a class List.  It has instance variables car and
   cdr, and functions of the same name which return those values.  It
   has class methods new which returns nil and car:cdr:  which create
   a new List containing the two operands in the appropriate fields.
   It has instance methods car:cdr:  which update the car and cdr
   fields, and instance methods car and cdr which return them.  [4pt]

   st> a := List car:1 cdr: (List car:2 cdr: (List car:3 cdr: (List new))).
   st> a car.
   1
   st> a cdr car.
   2
   st> a cdr cdr car.
   3
   st> a cdr cdr cdr.
   nil
   st> a car:6 cdr:8.
   a List
   st> a car. a cdr.
   6
   8

Overlapped: set(['functions', 'return', 'methods', 'nil', 'car', 'variables', 'list', 'two', 'name', 'returns', 'cdr', 'new', 'st', 'class', 'smalltalk', 'define']) 
Overlap: 16 
Accuracy: 0.135593220339 

Question:
 7. For a list of length $n$, how much function call stack space is
    used by fold left and fold right?
    (A) fold left $ O ( 1 ) $ and fold right $ O ( 1 ) $
    (B) fold left $ O ( 1 ) $ and fold right $ O ( n ) $
    (C) fold left $ O ( n ) $ and fold right $ O ( 1 ) $
    (D) fold left $ O ( n ) $ and fold right $ O ( n ) $

Overlapped: set(['function', 'c', 'right', 'space', 'list', 'used', 'n', 'fold', 'length', 'much', 'b', 'stack', 'left']) 
Overlap: 13 
Accuracy: 0.154761904762 

Question:
3. Scheme.  Define the function eval for arbitrarily nested arithmetic
   expressions.  Use map and apply.  Assume the car of each list and
   sublist is a function, and any operand that is not a number?  is a
   subexpression.  [2pt]

   > (map even '(1 2 3 4 5 6))
   (#t #f #f #f #f #f)
   > (apply + '(1 2))
   3
   > (eval `(,+ (,* 3 4) (,/ (,- 2 3) 4)))
   47/4

Overlapped: set(['even', 'function', 'use', 'map', 'car', 'f', 'list', 'number', 'nested', 'apply', 'scheme', 'define']) 
Overlap: 12 
Accuracy: 0.127659574468 

Question:
4. Smalltalk.  Define a block called sum which when sent the value:
   message with an array argument, returns the sum of the elements of
   the array.  [2pt]

   st> sum value: #(1 2 3 4 5).
   15

Overlapped: set(['elements', 'called', 'sum', 'argument', 'value', 'st', 'returns', 'array', 'message', 'smalltalk', 'define']) 
Overlap: 11 
Accuracy: 0.297297297297 

Question:
6. Ocaml.  Define the function zip which takes two lists as arguments
   and returns a single list of pairwise tuples with the same data.
   Raise an exception of the lengths of the lists are different.
   [2pt]
   # zip;;
   - : 'a list -> 'b list -> ('a * 'b) list = <fun>
   # zip [1;2;3] [4;5;5];;
   - : (int * int) list = [(1, 4); (2, 5); (3, 5)]

Overlapped: set(['function', 'int', 'list', 'two', 'ocaml', 'returns', 'arguments', 'fun', 'data', 'define']) 
Overlap: 10 
Accuracy: 0.104166666667 

Question:
 1. Backus-Naur Form, used to define syntax, was first used in the
    definition of:
    (A) ALGOL
    (B) BASIC
    (C) COBOL
    (D) FORTRAN

Overlapped: set(['c', 'used', 'syntax', 'fortran', 'b', 'cobol', 'basic', 'algol', 'first', 'define']) 
Overlap: 10 
Accuracy: 0.384615384615 

Question:
 5. What is the running time of let rec f n = if n <= 1 then n else f
    (n - 1) + f (n - 2)?
    (A) $ O ( log sub 2 n ) $
    (B) $ O ( n ) $
    (C) $ O ( 2 sup n ) $
    (D) $ O ( n sup 2 ) $

Overlapped: set(['c', 'b', 'sub', 'f', 'else', 'let', 'sup', 'rec', 'n', 'log']) 
Overlap: 10 
Accuracy: 0.153846153846 

Question:
11. The PL/1 language allows a non-local goto directly from a function
    to a label in a function deeper down in the function call stack,
    thus returning past several levels of function calls.  In Java,
    something similar can be accomplished by what statement?
    (A) goto
    (B) implements
    (C) synchronized
    (D) throw

Overlapped: set(['function', 'c', 'b', 'java', 'language', 'stack', 'past', 'statement', 'throw']) 
Overlap: 9 
Accuracy: 0.204545454545 

Question:
2. Name two kinds of ad hoc polymorphism, and give a brief example of
   each.  Do not use more than a few lines of code.  [2pt]

    (a)

    (b)

Overlapped: set(['polymorphism', 'use', 'b', 'ad', 'two', 'name', 'hoc']) 
Overlap: 7 
Accuracy: 0.291666666667 

Question:
10. Which function can be implemented using a constant amount of stack
    space?
    (A) filter
    (B) fold_left
    (C) fold_right
    (D) map

Overlapped: set(['function', 'map', 'c', 'b', 'space', 'using', 'stack']) 
Overlap: 7 
Accuracy: 0.304347826087 

Question:
1. Name two kinds of universal polymorphism, and give a brief example
   of each.  Do not use more than a few lines of code.  [2pt]

    (a)

    (b)

Overlapped: set(['polymorphism', 'use', 'b', 'name', 'universal', 'two']) 
Overlap: 6 
Accuracy: 0.260869565217 

Question:
 4. In a garbage collected language like Java, with no free function
    or its equivalent, if M = memory leaks and D = dangling pointers
    or references, which is possible?
    (A) D but not M
    (B) M but not D
    (C) both M and D
    (D) neither M nor D

Overlapped: set(['function', 'c', 'b', 'java', 'like', 'language']) 
Overlap: 6 
Accuracy: 0.1875 

Question:
 6. The Java idea of an interface is implemented in Smalltalk as:
    (A) abstract classes
    (B) duck typing
    (C) multiple inheritance of fields
    (D) single inheritance

Overlapped: set(['c', 'b', 'multiple', 'inheritance', 'java', 'smalltalk']) 
Overlap: 6 
Accuracy: 0.230769230769 

Question:
 8. In Smalltalk what is the meaning of:
    foo bar + foo set: 3 + 4 next
    (A) ((foo bar) + foo) set: (3 + (4 next))
    (B) (foo (bar + foo)) set: ((3 + 4) next)
    (C) (foo bar) + (foo set: 3) + (4 next)
    (D) (foo bar) + (foo set: 3) + (4 next)

Overlapped: set(['c', 'set', 'bar', 'b', 'foo', 'smalltalk']) 
Overlap: 6 
Accuracy: 0.0652173913043 

Question:
 2. What is the Smalltalk expression for $ sqrt 2 $ ?
    (A) sqrt (2)
    (B) 2 sqrt
    (C) Number::sqrt 2
    (D) 2 ^ .5

Overlapped: set(['c', 'b', 'number', 'smalltalk']) 
Overlap: 4 
Accuracy: 0.129032258065 

Question:
 3. What is ((lambda (x) x) (+ 2 3))?
    (A) (+ 2 3)
    (B) +
    (C) 10
    (D) 5

Overlapped: set(['x', 'c', 'b', 'lambda']) 
Overlap: 4 
Accuracy: 0.117647058824 

Question:
 9. What is 7 in Smalltalk?
    (A) (+) 3 4.
    (B) (3+4) value.
    (C) [3+4] value.
    (D) {3+4} value.

Overlapped: set(['c', 'b', 'value', 'smalltalk']) 
Overlap: 4 
Accuracy: 0.114285714286 

Question:
Overlapped: set([]) 
Overlap: 0 
Accuracy: 0 

