dictionary: ['0', '00', '03', '07', '1', '10', '11', '112', 11pt, '12', '149', '15',
  1pt, '2', '2012', 2012q1, '28', 2pt, '3', '30', '39', 3pt, '4', '4142135623730951',
  '5', '6', '60', 6pt, '7', '8', '9', a, accepts, algol, algorithm, all, allocate,
  allocated, allowing, along, an, and, anonymous, another, answer, answers, anything,
  applies, applying, are, args, argument, arguments, array, as, at, attempt, automatic,
  b, background, backtracking, backus, based, bash, basic, be, been, before, being,
  between, bomb, books, bool, break, but, by, c, calculator, called, calling, can,
  capability, capacity, cat, cause, cdr, character, characters, choice, class, classes,
  classified, closure, cmps, cmps112, cobol, column, computer, conditions, consider,
  constant, contained, containing, contains, continue, control, correct, count, counts,
  crashes, create, creates, currying, d, daemon, dangling, data, declaration, declarations,
  declare, default, define, delim, described, determine, different, do, does, don,
  duck, e, each, either, element, elements, elsewhere, email, empty, en, end, enter,
  eq, equal, equivalence, equivalent, even, exam3, examboxes, exampage, example, exclude,
  excluded, executed, exist, exit, exited, expression, f, feature, featurs, filein,
  files, filestream, filter, final, find, finish, first, fixed, foldl, foldr, following,
  foo, for, fork, form, fortran, found, from, fun, function, functional, functions,
  general, generic, give, given, goes, goto, gst, had, has, haskell, have, heap, hello,
  here, higher, hint, how, i, id, if, imperative, important, in, indicates, inference,
  init, initializes, input, inspect, instance, int, internally, internet, into, is,
  isolated, it, item, items, its, java, key, keyword, kind, kinds, lambda, language,
  languages, larger, leak, left, length, letter, lexical, lifting, like, lines, list,
  lists, local, made, main, make, malloc, map, matches, max, maximum, maxzip, may,
  memory, message, method, methods, might, missing, mm, monad, more, multiple, must,
  my, name, naur, neatness, negative, new, next, nil, nl, 'no', none, not, notes,
  number, object, ocaml, occur, of, 'on', one, only, onto, or, order, oriented, other,
  our, output, overflow, p, paired, parameterization, parent, partial, pe, performing,
  performs, perhaps, perl, phone, pl, pointer, points, polymorphism, polymporhism,
  pop, port, position, post, pre, predicate, print, prints, process, program, programming,
  programs, prolog, prompt, provided, proxy, ps, public, push, pushes, question, quits,
  read, referred, remain, removed, removes, reports, representation, request, requiring,
  response, rest, result, return, returns, risk, s, same, say, scheme, scope, scratch,
  second, segment, semantics, service, sets, shorter, signal, signature, signatures,
  simply, single, size, sleep, sleeps, smalltalk, space, spaces, specifying, spirit,
  split, sqrt, st, stack, start, started, statement, static, stdout, string, structural,
  structures, sub, subclass, such, synchronized, t, table, take, takes, taking, test,
  than, that, the, them, then, these, they, third, this, thread, three, throw, thunk,
  tl, to, top, total, transver, tree, 'true', tuple, tupling, two, type, typedefs,
  typing, u, underflow, unification, unit, up, use, used, uses, using, v, valid, value,
  variable, verify, violates, virtual, void, wait, waited, wakes, want, was, wc, what,
  when, whenever, where, whether, which, whiletrue, whose, will, winter, with, word,
  words, work, worth, write, wrong, x, 'yes', yet, you, your, z, zips, zombie]
name: cmps112-2012q1-final.tt
path: /Users/stonegates/Documents/repos/sneak.peeker/cmps112-2012q1-final.tt
text:
- !!binary |
  Q01QUy0xMTIgtyBQcm9ncmFtbWluZyBMYW5ndWFnZXMgtyBXaW50ZXIgMjAxMiC3IEZpbmFsIEV4
  YW1wYWdlIDEgb2YgMQ==
- '$Id: cmps112-2012q1-exam3.mm,v 1.30 2012-03-15 00:39:39-07 - - $'
- ''
- .PS
- examboxes(5)
- .PE
- ''
- No books;  No calculator;  No computer;  No email;  No internet;  No
- notes;  No phone.  Neatness counts!  Do your scratch work elsewhere
- and enter only your final answer into the spaces provided.
- ''
- .EQ
- delim $$
- .EN
- ''
- ' 1. Ocaml:  Define a function split which takes a predicate and a list'
- '    and returns a 2-tuple of lists, where all elements of the first'
- '    list cause the predicate to return true, and all other elements'
- '    are in the second list.  The elements must remain in the same'
- '    order as on input.  [3pt]'
- '    # split;;'
- '    - : (''a -> bool) -> ''a list -> ''a list * ''a list = <fun>'
- '    # split even [1; 3; 5; 2; 8; 4; 1; 10];;'
- '    - : int list * int list = ([2; 8; 4; 10], [1; 3; 5; 1])'
- ''
- ' 2. Prolog:  Define a function filter which takes three arguments:  a'
- '    predicate, an input list, and an output list.  The output list'
- '    contains all elements of the input list for which the predicate is'
- '    true, and in the same order.  [2pt]'
- '    | ?- filter( even, [1,2,3,4,5,6,7,8], X).'
- '    X = [2,4,6,8] ?'
- ''
- ' 3. Scheme:  Define a function maxzip which takes a predicate and two'
- '    lists and zips the lists into a single list by taking the larger'
- '    of each of the paired elements.  The length of the result is the'
- '    same as the length of the shorter list.  [3pt]'
- '    > (maxzip > ''(1 3 5 7 9) ''(9 7 5 3 1))'
- '    (9 7 5 7 9)'
- '    > (maxzip < ''(1 3 5 7 9) ''(9 7 5 3 1))'
- '    (1 3 5 3 1)'
- '    > (maxzip <= ''(1 3 5 7 9) ''(9 9))'
- '    (1 3)'
- ''
- ' 4. Perl:  Write a program which uses <> to read files and at end'
- '    prints the number of characters, words, and lines in these files.'
- '    A word is anything that matches /\S+/.  [2pt]'
- '    % wc.perl foo'
- '    4 28 149'
- ''
- ' 5. Name the two general kinds of polymorphism, and for each of them,'
- '    name the two sub-kinds of polymporhism into which they may be'
- '    classified.  [1pt]'
- ''
- ' 6. Scheme:  Define a function exclude which takes a count and a list'
- '    and returns a list with the first count items removed.  A negative'
- '    count is the same as 0.  If more items are excluded than exist in'
- '    the list, return the empty list.  [2pt]'
- '    > (exclude 2 ''(1 2 3 4 5))'
- '    (3 4 5)'
- '    > (exclude -5 ''(1 2 3 4 5))'
- '    (1 2 3 4 5)'
- '    > (exclude 10 ''(1 2 3))'
- '    ()'
- ''
- ' 7. Ocaml:  Define a function exclude which does the same.  [2pt]'
- '    # exclude 2 [1;2;3;4;5];;'
- '    - : int list = [3; 4; 5]'
- '    # exclude (-5) [1;2;3;4;5];;'
- '    - : int list = [1; 2; 3; 4; 5]'
- '    # exclude 10 [1;2;3];;'
- '    - : int list = []'
- ''
- ' 8. Prolog:  Define A function exclude/3 with the same semantics.  The'
- '    first two arguments are as before, and the third argument is the'
- '    output list.  Do not consider the result of backtracking from the'
- '    ? prompt.  [2pt]'
- '    | ?- exclude(2,[1,2,3,4,5],U).'
- '    U = [3,4,5] ?'
- '    yes'
- '    | ?- exclude(-5,[1,2,3,4,5],U).'
- '    U = [1,2,3,4,5] ?'
- '    yes'
- '    | ?- exclude(10,[1,2,3],U).'
- '    U = [] ?'
- '    yes'
- ''
- ' 9. Smalltalk:  Define a class Find with a single class method key:'
- '    array: which accepts a key and an array and returns the first'
- '    position in the array equal to the key.  If not found, return V>='
- '    nil.  [3pt]'
- '    st> Find key: 5 array: #(1 3 5 7 9).'
- '    3'
- '    st> Find key: 11 array: #(1 3 5 7 9).'
- '    nil'
- ''
- '10. Java:  Finish the following program by specifying the class >V='
- '    say .  When started from the main function, it prints the message'
- '    ``hello'''' and then quits.  [2pt]'
- ''
- '    class hello {'
- '       // What goes here?'
- '       public static void main (String[] args) {'
- '          Thread say = new Thread (new say ());'
- '          say.start();'
- '       }'
- '    }'
- ''
- 11. Give an example of how memory leak might occur in Java.  [2pt]
- ''
- '12. Smalltalk:  Define the class Stack.  Internally it has an array of'
- '    fixed size and no attempt is made to verify pre- or post-'
- '    conditions.  It simply crashes on overflow or underflow.  Define'
- '    the following methods:  [6pt]'
- '     (a) Class method new uses new: to create a stack of maximum'
- '         capacity 10.'
- '     (b) Class method new: creates a stack of the size given by its'
- '         argument.'
- '     (c) Instance method init: initializes the array representation'
- '         and sets the top to 0'
- '     (d) Instance method pop removes and returns the top item on the'
- '         stack.'
- '     (e) Instance method push: pushes a new item onto the top of the'
- '         stack.'
- '     (f) Instance method empty reports on whether the stack is empty'
- '         or noT.'
- '    bash-3.2$ cat stack.test.st'
- '    FileStream fileIn: ''stack.st''.'
- '    s := Stack new.'
- '    s push: 1; push: 5; push: 10.'
- '    s inspect.'
- '    [s empty not] whileTrue: ['
- '       stdout << s pop << Character nl].'
- '    bash-3.2$ gst <stack.test.st'
- '    An instance of Stack'
- '      array: (1 5 10 nil nil nil nil nil nil nil )'
- '      top: 3'
- '    10'
- '    5'
- '    1'
- ''
- Multiple choice.  To the left of each question, write the letter that
- indicates your answer.  Write Z if you don't want to risk a wrong
- answer.  Wrong answers are worth negative points.  [11pt]
- ''
- +--------------------------+------+------+------------+
- !!binary |
  fG51bWJlciBvZiAgICAgICAgICAgICAgICAgfCAgICAgIHzXIDEgPSB8ICAgICAgJD0gYSQgfA==
- '|correct answers           |      |      |            |'
- +--------------------------+------+------+------------+
- !!binary |
  fG51bWJlciBvZiAgICAgICAgICAgICAgICAgfCAgICAgIHzXIL0gPSB8ICAgICAgJD0gYiQgfA==
- '|wrong answers             |      |      |            |'
- +--------------------------+------+------+------------+
- !!binary |
  fG51bWJlciBvZiAgICAgICAgICAgICAgICAgfCAgICAgIHzXIDAgPSB8ICAwICAgICAgICAgfA==
- '|missing answers           |      |      |            |'
- +--------------------------+------+------+------------+
- '|column total              |   11 |      |      $= c$ |'
- '|$ c = max ( a - b , 0 ) $ |      |      |            |'
- +--------------------------+------+------+------------+
- ''
- ' 1. What will make Smalltalk print 9?'
- '    (A) (4 + 5) value.'
- '    (B) (4 + 5) value:.'
- '    (C) [4 + 5] value.'
- '    (D) [4 + 5] value:.'
- ''
- ' 2. In Smalltalk, what is 1.4142135623730951?'
- '    (A) (sqrt 2)'
- '    (B) 2 ** .5'
- '    (C) 2 sqrt'
- '    (D) sqrt (2)'
- ''
- ' 3. In Ocaml, what is the type of List.tl?  (Hint:  like cdr in'
- '    Scheme).'
- '    (A) ''a list * ''a list -> ''a list'
- '    (B) ''a list -> ''a'
- '    (C) ''a list -> ''a list'
- '    (D) ''a list -> ''a list -> ''a list'
- ''
- ' 4. What kind of type equivalence is used to determine if two'
- '    different typedefs in C declare the same type?'
- '    (A) anonymous'
- '    (B) name'
- '    (C) structural'
- '    (D) value'
- ''
- ' 5. A process that has exited, either by calling exit or from a'
- '    signal, but has not yet been waited for by its parent process is'
- '    called a:'
- '    (A) daemon'
- '    (B) fork bomb'
- '    (C) init'
- '    (D) zombie'
- ''
- ' 6. In Perl, the default argument to a function requiring an argument,'
- '    when none is given, is:'
- '    (A) $!'
- '    (B) $0'
- '    (C) $_'
- '    (D) @_'
- ''
- ' 7. Which of the following functions is a higher-order function whose'
- '    arguments are a function and a list, and whose result is a list'
- '    containing the result of applying the function to each of the'
- '    elements of the list?'
- '    (A) filter'
- '    (B) foldl'
- '    (C) foldr'
- '    (D) map'
- ''
- ' 8. Which of the following functions can take a function, a unit, and'
- '    a list as arguments, and which applies the function between each'
- '    element of the list, along with the unit at one end, and which can'
- '    use up constant stack space?'
- '    (A) filter'
- '    (B) foldl'
- '    (C) foldr'
- '    (D) map'
- ''
- ' 9. How might one declare an array variable in Perl with lexical'
- '    scope?'
- '    (A) local @a;'
- '    (B) my @a;'
- '    (C) our @a;'
- '    (D) use @a;'
- ''
- 10. Which of the following programs will cause a dangling pointer?
- '    (A) int *f() {int i = 6; return &i; }'
- '    (B) int *f() {int i = 6; return *i; }'
- '    (C) int *f() {int i = 6; return  i; }'
- '    (D) int  f() {int i = 6; return  i; }'
- ''
- 11. In PL/I, a goto statement had the capability of being executed in
- '    one function and transver control to another function, perhaps the'
- '    one that called it.  The equivalent feature of Java uses what'
- '    keyword?'
- '    (A) break'
- '    (B) continue'
- '    (C) throw'
- '    (D) synchronized'
- ''
- Multiple choice.  To the left of each question, write the letter that
- indicates your answer.  Write Z if you don't want to risk a wrong
- answer.  Wrong answers are worth negative points.  [11pt]
- ''
- +--------------------------+------+------+------------+
- !!binary |
  fG51bWJlciBvZiAgICAgICAgICAgICAgICAgfCAgICAgIHzXIDEgPSB8ICAgICAgJD0gYSQgfA==
- '|correct answers           |      |      |            |'
- +--------------------------+------+------+------------+
- !!binary |
  fG51bWJlciBvZiAgICAgICAgICAgICAgICAgfCAgICAgIHzXIL0gPSB8ICAgICAgJD0gYiQgfA==
- '|wrong answers             |      |      |            |'
- +--------------------------+------+------+------------+
- !!binary |
  fG51bWJlciBvZiAgICAgICAgICAgICAgICAgfCAgICAgIHzXIDAgPSB8ICAwICAgICAgICAgfA==
- '|missing answers           |      |      |            |'
- +--------------------------+------+------+------------+
- '|column total              |   11 |      |      $= c$ |'
- '|$ c = max ( a - b , 0 ) $ |      |      |            |'
- +--------------------------+------+------+------------+
- ''
- ' 1. In Java, if two functions have the same name in the same class,'
- '    but have different signatures, this is referred to as:'
- '    (A)'
- ''
- ' 2. In Java, if two functions in different classes have the same'
- '    signature, but one of the classes is a subclass of another, this'
- '    is referred to as:'
- '    (A)'
- ''
- ' 3. Allowing partial parameterization of a function in a functional'
- '    language such as Ocaml is called:'
- '    (A) currying'
- '    (B) lambda lifting'
- '    (C) tupling'
- '    (D) unification'
- ''
- ' 4. In an object-oriented language like C++, a virtual function'
- '    (instance method) is called based on a:'
- '    (A) duck-typing response'
- '    (B) generic declaration'
- '    (C) heap-allocated closure'
- '    (D) virtual function table'
- ''
- ' 5. Which of the following data structures violates the spirit of'
- '    functional programming?'
- '    (A) array'
- '    (B) list'
- '    (C) stack'
- '    (D) tree'
- ''
- ' 6. All imperative featurs of Haskell must be isolated from the rest'
- '    of the program and contained in a:'
- '    (A) closure'
- '    (B) monad'
- '    (C) proxy'
- '    (D) thunk'
- ''
- ' 7. Unification is an important algorithm in performing automatic type'
- '    inference in which of these languages?'
- '    (A) Java'
- '    (B) Ocaml'
- '    (C) Prolog'
- '    (D) Scheme'
- ''
- ' 8. Given the declarations int *p;  and int i;, which C expression is'
- '    not valid?'
- '    (A) i + i'
- '    (B) i + p'
- '    (C) p + i'
- '    (D) p + p'
- ''
- ' 9. From what memory segment does the malloc(3) function allocate'
- '    memory?'
- '    (A) test'
- '    (B) data'
- '    (C) heap'
- '    (D) stack'
- ''
- 10. A process that sleeps in the background and wakes up whenever a
- '    request is made on its port, then performs that service, and'
- '    returns to sleep to wait for the next request is called a:'
- '    (A) daemon'
- '    (B) fork bomb'
- '    (C) init'
- '    (D) zombie'
- ''
- '11. The first language to be described using Backus-Naur form was:'
- '    (A) Algol 60'
- '    (B) Basic'
- '    (C) Cobol'
- '    (D) Fortran'
- ''
