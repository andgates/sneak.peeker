Question:
5. Define the function fold_left:  the first argument is a function to
   use to fold the list, the second argument is a unit value used to
   fold the first element, the third argument is a list.  Use tail
   recursion:  the function must use $ O ( 1 ) $ stack.

    (a) Scheme.  [2pt]
        > (define (length list) (fold_left (lambda (n _) (+ n 1)) 0
        list))
        > (define (sum list) (fold_left + 0 list))
        > (length '(1 2 3 4 5))
        5
        > (sum '(1 2 3 4 5))
        15

    (b) Ocaml.  [2pt]
        # fold_left;;
        - : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
        # let length list = fold_left (fun n _ -> n + 1) 0 list;;
        val length : 'a list -> int = <fun>
        # let sum list = fold_left (+) 0 list;;
        val sum : int list -> int = <fun>
        # length [1;2;3;4;5];;
        - : int = 5
        # sum [1;2;3;4;5];;
        - : int = 15

Overlapped: set(['int', 'argument', 'fold', 'second', 'element', 'use', 'val', 'recursion', 'sum', 'tail', 'scheme', 'define', 'function', 'used', 'let', 'stack', 'b', 'list', 'ocaml', 'value', 'n', 'length', 'fun', 'first', 'lambda']) 
Overlap: 25 
Accuracy: 0.102040816327 

Question:
2. Define the function filter whose first argument is a predicate and
   whose second argument is a list.  It returns a list consisting of
   all elements of the argument list which satisfy the predicate.  Do
   not use a higher-order function.

    (a) Scheme.  [2pt]
        > (filter (lambda (x) (> x 0)) '(1 -1 2 -3 5 -99 8))
        (1 2 5 8)
        > (filter even '(1 2 3 4 5 6 7 8 9))
        (2 4 6 8)

    (b) Ocaml.  [2pt]
        # filter;;
        - : ('a -> bool) -> 'a list -> 'a list = <fun>
        # filter (fun x -> x > 0) [1;-1;2;-3;5;-99;8];;
        - : int list = [1; 2; 5; 8]
        # filter even [1;2;3;4;5;6;7;8;9];;
        - : int list = [2; 4; 6; 8]

Overlapped: set(['even', 'function', 'use', 'scheme', 'predicate', 'lambda', 'int', 'list', 'argument', 'first', 'ocaml', 'second', 'elements', 'bool', 'fun', 'x', 'returns', 'b', 'define']) 
Overlap: 19 
Accuracy: 0.0954773869347 

Question:
6. Define the function reverse which produces a list in reverse order
   to that of its argument.  The function must use $ O ( 1 ) $ stack.
   You may use a tail-recursive function, or make it very simple by a
   call to fold_left.
   Bonus points:  These two ``reverse'' questions are worth 3 points
   each, not 2 points, if you correctly define them in terms of fold_
   left instead of writing a recursive function.

    (a) Scheme.  [2pt]  (3 points if you use fold_left correctly.)
        > (reverse '(1 2 3 4 5))
        (5 4 3 2 1)
        > (reverse '())
        ()

    (b) Ocaml.  [2pt]  (3 points if you use fold_left correctly.)
        # reverse;;
        - : 'a list -> 'a list = <fun>
        # reverse [1;2;3;4;5];;
        - : int list = [5; 4; 3; 2; 1]
        # reverse [];;
        - : 'a list = []

Overlapped: set(['function', 'use', 'b', 'reverse', 'int', 'list', 'argument', 'two', 'order', 'ocaml', 'points', 'left', 'fun', 'stack', 'scheme', 'worth', 'define']) 
Overlap: 17 
Accuracy: 0.0977011494253 

Question:
3. Define the function length, which returns the length of a list.
   Use tail-recursion:  the function must use $ O ( 1 ) $ stack.  Do
   not use a higher-order function.

    (a) Scheme.  [1pt]
        > (length '(1 2 3 4 5))
        5

    (b) Ocaml.  [1pt]
        # length;;
        - : 'a list -> int = <fun>
        # length [1;2;3;4;5];;
        - : int = 5

Overlapped: set(['function', 'use', 'b', 'int', 'list', 'ocaml', 'returns', 'fun', 'length', 'scheme', 'stack', 'define']) 
Overlap: 12 
Accuracy: 0.134831460674 

Question:
7. C or C++.  Code the function in C or C++ to reverse a list.  Do not
   allocate or free any memory.  Do not cause memory leak or use
   uninitialized memory.  Assume the nodes are properly initialized as
   a valid linked list.  Use $ O ( 1 ) $ stack space.  [2pt]
                             |
   typedef struct node node; | node* reverse (node* head) {
   struct node {             |
      int value;             |
      node* link;            |
   };                        |

Overlapped: set(['function', 'use', 'reverse', 'space', 'int', 'list', 'c', 'value', 'nodes', 'cause', 'stack']) 
Overlap: 11 
Accuracy: 0.154929577465 

Question:
 1. What kind of polymorphism is exhibited by generic classes in Java
    and template classes in C++?
    (A) conversion
    (B) inheritance
    (C) overloading
    (D) parametric

Overlapped: set(['polymorphism', 'c', 'b', 'java', 'inheritance', 'conversion', 'exhibited', 'overloading', 'parametric', 'kind']) 
Overlap: 10 
Accuracy: 0.4 

Question:
4. Code sub' according to the specifications of the project.  Assume
   that the number of larger magnitude is the first argument, and the
   carry is the third argument.  Assume sub has taken care of the
   signs so that sub' does not need to do so.  [2pt]
   val sub' : int list -> int list -> int -> int list

Overlapped: set(['sub', 'val', 'int', 'list', 'argument', 'number', 'taken', 'first']) 
Overlap: 8 
Accuracy: 0.166666666667 

Question:
 6. The type system in Scheme are:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static

Overlapped: set(['c', 'b', 'weak', 'dynamic', 'static', 'strong', 'scheme', 'type']) 
Overlap: 8 
Accuracy: 0.347826086957 

Question:
 7. The type system in Ocaml are:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static

Overlapped: set(['c', 'b', 'weak', 'dynamic', 'ocaml', 'static', 'strong', 'type']) 
Overlap: 8 
Accuracy: 0.347826086957 

Question:
 5. In Ocaml, what is the type of [1;2;3;4]?
    (A) (list int)
    (B) int list
    (C) list->int
    (D) list<int>

Overlapped: set(['c', 'b', 'int', 'list', 'ocaml', 'type']) 
Overlap: 6 
Accuracy: 0.162162162162 

Question:
 9. What is 2?
    (A) (caar '(1 2 3))
    (B) (cadr '(1 2 3))
    (C) (cdar '(1 2 3))
    (D) (cddr '(1 2 3))

Overlapped: set(['c', 'b', 'cdar', 'cadr', 'caar', 'cddr']) 
Overlap: 6 
Accuracy: 0.122448979592 

Question:
11. Which feature of imperative languages* is missing from Scheme?
    (A) conditionals
    (B) functions
    (C) loops
    (D) variables

Overlapped: set(['functions', 'b', 'missing', 'variables', 'c', 'scheme']) 
Overlap: 6 
Accuracy: 0.285714285714 

Question:
1. What are the very general possibilities that a function might
   exhibit when called?  [2pt]

    (a)

    (b)

    (c)

    (d)

Overlapped: set(['function', 'c', 'b', 'might', 'called']) 
Overlap: 5 
Accuracy: 0.238095238095 

Question:
 2. What is ((lambda (f x) (f x)) + 3)?
    (A) '(+ 3)
    (B) '(f x)
    (C) 3
    (D) 6

Overlapped: set(['x', 'c', 'b', 'lambda', 'f']) 
Overlap: 5 
Accuracy: 0.128205128205 

Question:
 3. What is type of (+) in Ocaml?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int

Overlapped: set(['int', 'c', 'b', 'type', 'ocaml']) 
Overlap: 5 
Accuracy: 0.121951219512 

Question:
 4. What is?
    (car (cdr (cons '(1 2 3) '(4 5 6))))
    (A) '(1 2 3)
    (B) '(4 5 6)
    (C) 1
    (D) 4

Overlapped: set(['car', 'c', 'cons', 'b', 'cdr']) 
Overlap: 5 
Accuracy: 0.106382978723 

Question:
10. Lisp and Scheme, in general form, are based on a form of
    mathematics first formulated by Alonzo Church.
    (A) \lambda-calculus
    (B) \mu-calculus
    (C) \pi-calculus
    (D) \psi-calculus

Overlapped: set(['lisp', 'c', 'scheme', 'b', 'first']) 
Overlap: 5 
Accuracy: 0.172413793103 

Question:
 8. In C, C++, and Java, which operator is lazy?
    (A) ++
    (B) --
    (C) //
    (D) ||

Overlapped: set(['c', 'b', 'java']) 
Overlap: 3 
Accuracy: 0.125 

Question:
Overlapped: set([]) 
Overlap: 0 
Accuracy: 0 

