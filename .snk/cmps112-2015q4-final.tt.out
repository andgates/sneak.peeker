Question:
 9. A closure is:
    (A) A special field of a structure or class used to point at a
        base class when implementing shared multiple inheritance.
    (B) A special type declaration in Ocaml used to distinguish sum
        types from product types.
    (C) A structure on the heap, used to hold variables of an outer
        function when referenced by an inner function.
    (D) A table used to dynamically dispatch virtual functions in an
        object-oriented environment.

Overlapped: set(['referenced', 'point', 'variables', 'dispatch', 'table', 'special', 'functions', 'outer', 'inheritance', 'sum', 'virtual', 'environment', 'field', 'inner', 'shared', 'type', 'dynamically', 'function', 'product', 'used', 'multiple', 'structure', 'implementing', 'base', 'heap', 'declaration', 'distinguish', 'hold', 'class', 'types', 'closure', 'c', 'b', 'ocaml']) 
Overlap: 34 
Accuracy: 0.586206896552 

Question:
1. Define gcd which uses Euclid's algorithm to find the greatest
   common divisor for two integers $x > 0$ and $y > 0$.  The C version
   is given.  Example:  $ roman gcd ( 111 , 259 ) = roman gcd ( 111 ,
   148 ) = roman gcd ( 111 , 37 ) = roman gcd ( 74 , 37 ) = roman gcd
   ( 37 , 37 ) = 37 $.
      int gcd (int x, int y) {
         while (x != y) if (x > y) x -= y; else y -= x;
         return x;
      }

    (a) Scheme.  Use tail recursion.  [2pt]
        Example call:  (define g (gcd 111 259)).

    (b) Ocaml.  Use tail recursion and curried format.  [2pt]
        Example call:  let d = gcd 111 259;;.

    (c) Smalltalk.  Extend class Integer with a keyword method gcd:.
        Use a loop.  [2pt]
        Example call:  g := 111 gcd: 259.

    (d) Perl.  Use a loop or tail recursion.  Properly prototype the
        function.  [2pt]
        Example call:  $g = gcd 111, 259;

    (e) Prolog.  [2pt]
        Example call:  gcd( 111, 259, G ).

2. \lambda-calculus.  Given the expression in the \lambda-calculus
   shown at the top of each box, show the derivation order to the
   number 25 for each of normal order and applicative order
   evaluation.  [1pt]

   +-----------------------------------------------------------+------------------------------------------------------------+
   |                 normal order evaluation                   |                applicative order evaluation                |
   +-----------------------------------------------------------+------------------------------------------------------------+
   |$ ( lambda x ~ . ~ ~ * ~ x ~ x ) ~ ~ ( + ~ 2 ~ 3 ) ~ ~ = $ | $ ( lambda x ~ . ~ ~ * ~ x ~ x ) ~ ~ ( + ~ 2 ~ 3 ) ~ ~ = $ |
   |                                                           |                                                            |
   |                                                           |                                                            |
   |                                                           |                                                            |
   +-----------------------------------------------------------+------------------------------------------------------------+

Overlapped: set(['int', 'number', 'smalltalk', 'use', 'recursion', 'two', 'perl', 'tail', 'scheme', 'define', 'function', 'return', 'extend', 'format', 'given', 'else', 'let', 'class', 'c', 'b', 'e', 'g', 'ocaml', 'x', 'lambda', 'order', 'prolog']) 
Overlap: 27 
Accuracy: 0.0525291828794 

Question:
7. Write the name of a programming language associated with each of
   the following people.  Score 1/4 point for each correct answer, but
   not more than 2 points total.  Choose answers from:  AWK, BASIC, C,
   C++, COBOL, FORTRAN, Java, Lisp, Perl, Python, Scheme,
   \lambda-calculus.  [2pt]

   +---------------------+---------------------+--------------------+
   |Alfred Aho           |John Backus          |Alonzo Church       |
   +---------------------+---------------------+--------------------+
   |James Gosling        |Grace Hopper         |John Kemeny         |
   +---------------------+---------------------+--------------------+
   |John McCarthy        |Dennis Ritchie       |Guy Steele          |
   +---------------------+---------------------+--------------------+
   |Bjarne Stroustrup    |Larry Wall           |Guido van Rossum    |
   +---------------------+---------------------+--------------------+

Overlapped: set(['point', 'hopper', 'cobol', 'total', 'java', 'score', 'perl', 'write', 'fortran', 'stroustrup', 'choose', 'basic', 'answer', 'scheme', 'correct', 'answers', 'awk', 'c', 'name', 'language', 'lisp', 'programming', 'points', 'following', 'backus']) 
Overlap: 25 
Accuracy: 0.100806451613 

Question:
8. Prolog.  Write facts in Prolog to describe the graph at left.  Use
   the term arrow whose first argument is the tail of the arrow and
   whose second argument is the head of the arrow, i.e., arrow(X,Y)
   means that node X points directly at node Y.  Write a rule
   arrow2(X,Y) which finds out if it is possible to get from X to Y by
   following exactly two arrows.  [2pt]

   .PS 1i
   arrowht = .2
   arrowwid = arrowht/2
   r=4*circlerad
   A: circle "a"
   B: circle "b" at A+(r,r/2)
   C: circle "c" at A+(r,-r/2)
   D: circle "d" at C+(r,r/2)
   E: circle "e" at C+(r,-r/2)
   arrow from A to B chop
   arrow from A to C chop
   arrow from C to D chop
   arrow from C to D chop
   arrow from C to E chop
   .PE

Overlapped: set(['following', 'use', 'tail', 'e', 'graph', 'c', 'points', 'argument', 'first', 'two', 'write', '1i', 'second', 'b', 'arrow', 'facts', 'x', 'circle', 'left', 'chop', 'prolog']) 
Overlap: 21 
Accuracy: 0.157894736842 

Question:
3. Scheme.  Using apply, map, max, and cons, define the function depth
   for any argument.  If it is null?, its depth is 1.  Otherwise, if
   it is not a pair?, its depth is 0.  The depth of anything else (a
   list) is one more than the maximum depth of the elements of the
   list.  [2pt]
   > (depth '(1 2 (3 4 (5 6)) 88))
   3
   > (depth '(a b c))
   1
   > (depth '())
   1
   > (depth 7)
   0

Overlapped: set(['function', 'map', 'c', 'cons', 'depth', 'maximum', 'max', 'null', 'argument', 'one', 'list', 'else', 'elements', 'using', 'apply', 'scheme', 'b', 'define']) 
Overlap: 18 
Accuracy: 0.206896551724 

Question:
9. Scheme.  Draw a picture of the following Scheme expression.  For
   each cons cell, draw a rectangular box divided into to parts, and
   draw an arrow from each of the car and the cdr fields to the cell
   or object pointed to.  [2pt]
   ((a b c) d (e) (f (g) h))

Overlapped: set(['picture', 'draw', 'cons', 'e', 'arrow', 'g', 'f', 'car', 'object', 'c', 'cell', 'b', 'cdr', 'h', 'following', 'scheme']) 
Overlap: 16 
Accuracy: 0.347826086957 

Question:
4. Ocaml.  Define drop, which returns its argument list without the
   first $n$ elements.  If $n$ is larger than the length of the list,
   it returns a null list.  If $n$ is not positive, it just returns
   the list.  Use a tail call.  Do not compute the length of the list.
   [2pt]
   # drop;;
   - : int -> 'a list -> 'a list = <fun>
   # drop 3 [1;2;3;4;5;6;7];;
   - : int list = [4; 5; 6; 7]
   # drop 10 [1;2;3;4];;
   - : int list = []
   # drop (-5) [1;2;3;4];;
   - : int list = [1; 2; 3; 4]
   # drop 5 [];;
   - : 'a list = []

Overlapped: set(['use', 'elements', 'without', 'int', 'list', 'argument', 'first', 'ocaml', 'returns', 'n', 'tail', 'fun', 'length', 'null', 'define']) 
Overlap: 15 
Accuracy: 0.0914634146341 

Question:
 9. The following interaction indicates what kind of polymorphism?
    # List.length;;
    - : 'a list -> int = <fun>
    (A) conversion
    (B) inclusion
    (C) overloading
    (D) parametric

Overlapped: set(['polymorphism', 'c', 'b', 'inclusion', 'int', 'list', 'conversion', 'overloading', 'indicates', 'following', 'fun', 'parametric', 'kind']) 
Overlap: 13 
Accuracy: 0.361111111111 

Question:
6. Perl.  Write a program which prints out the file size, modification
   time, and filename for each file mentioned in @ARGV.  Hints:  The
   result of the stat function is an array where $stat[7] is the file
   size and $stat[9] is the modification time.  Use the strftime
   format "%b %e %H:%S" to print out the time.  Print a suitable error
   message if @stat has length 0.  [3pt]
   -bash-60$ ls.perl *.perl
         84 Nov 12 13:37 count.perl
        240 Nov 16 12:39 euclid.perl
        253 Nov 25 19:03 ls.perl
        110 Dec  5 17:53 range.perl
         91 Mar 14 21:31 wc.perl

Overlapped: set(['function', 'use', 'b', 'e', 'format', 'h', 'perl', 'write', 'length', 'array', 'message', 'size']) 
Overlap: 12 
Accuracy: 0.125 

Question:
 8. If we have a function not (bool -> bool) and a function even (int
    -> bool), how might the function odd be defined?
    (A) let odd = compose not even
    (B) let odd = map not even
    (C) let odd = not even
    (D) let odd x = not even x

Overlapped: set(['even', 'map', 'c', 'b', 'defined', 'might', 'int', 'bool', 'x', 'let', 'function', 'odd']) 
Overlap: 12 
Accuracy: 0.230769230769 

Question:
12. What is the type of tail in the following?
    let cdr s = match s with | x::xs -> xs
    (A) val cdr : 'a -> 'a = <fun>
    (B) val cdr : 'a -> 'a list = <fun>
    (C) val cdr : 'a list -> 'a = <fun>
    (D) val cdr : 'a list -> 'a list = <fun>

Overlapped: set(['c', 'b', 'val', 'list', 'following', 'tail', 'let', 'cdr', 'fun', 'x', 'type', 'match']) 
Overlap: 12 
Accuracy: 0.162162162162 

Question:
 8. What function is called immediately after d() if d() is true?
    for (a(); b(); c()){
       if (d()) continue;
       e();
       if (f()) break;
       g();
    }
    h();
    (A) b()
    (B) c()
    (C) e()
    (D) h()

Overlapped: set(['function', 'c', 'b', 'e', 'g', 'f', 'h', 'break', 'continue', 'immediately', 'true', 'called']) 
Overlap: 12 
Accuracy: 0.169014084507 

Question:
 6. An object-oriented language like C++ does dynamic dispatching of
    method calls using a:
    (A) friend function
    (B) heap-allocated closure
    (C) template declaration
    (D) virtual function table

Overlapped: set(['function', 'closure', 'c', 'b', 'like', 'using', 'dynamic', 'virtual', 'language', 'declaration', 'table']) 
Overlap: 11 
Accuracy: 0.366666666667 

Question:
11. What is the type of car in the following?
    let car s = match s with | x::xs -> x
    (A) val car : 'a -> 'a = <fun>
    (B) val car : 'a -> 'a list = <fun>
    (C) val car : 'a list -> 'a = <fun>
    (D) val car : 'a list -> 'a list = <fun>

Overlapped: set(['c', 'b', 'val', 'car', 'list', 'following', 'let', 'fun', 'x', 'type', 'match']) 
Overlap: 11 
Accuracy: 0.148648648649 

Question:
5. Smalltalk.  Extend class Array with an instance method find:  whose
   argument is a value which is searched for in the array.  If the
   value is present in the array, return the index of the first
   position where it is.  If not found, return nil.  [2pt]
   st> a := #(5 6 7 8 9).
   (5 6 7 8 9 )
   st> a find: 6
   2
   st> a find: 99
   nil

Overlapped: set(['return', 'extend', 'nil', 'argument', 'value', 'st', 'array', 'class', 'smalltalk', 'first']) 
Overlap: 10 
Accuracy: 0.153846153846 

Question:
11. Ocaml.  Write a function eval which takes an expr as an argument
   and returns a float result.  An expr is either a Number or an Expr
   with a char operator and two exprs.  The only operators recognized
   are '+' and '*'.  [2pt]
   Definitions:
   type expr = Number of float
             | Expr of char * expr * expr;;
   let a = Expr ('+',
           Expr ('*', Number 6.0, Number 7.2),
           Expr ('*', Number 1.5, Number 2.7));;
   Interaction:
   # eval;;
   - : expr -> float = <fun>
   # eval a;;
   - : float = 47.25

Overlapped: set(['function', 'ocaml', 'argument', 'number', 'two', 'write', 'returns', 'let', 'fun', 'type']) 
Overlap: 10 
Accuracy: 0.0943396226415 

Question:
 4. What is the Ocaml type signature for the definition:   let f x =
    x;;
    (A) val f : 'a -> 'a = <fun>
    (B) val f : 'a -> 'b -> 'b * 'a = <fun>
    (C) val f : 'a -> 'b -> 'b = <fun>
    (D) val f : int -> int = <fun>

Overlapped: set(['c', 'b', 'val', 'f', 'int', 'ocaml', 'let', 'fun', 'x', 'type']) 
Overlap: 10 
Accuracy: 0.133333333333 

Question:
 2. If guess finds something in a sequence of facts, and verify checks
    to see if it is a good one, then find can be defined in Prolog as:
    (A) find(X) :- guess(X), verify(X).
    (B) find(X) :- guess(X).
        find(X) :- verify(X).
    (C) find(X) :- guess(X), !, verify(X).
    (D) guess(X), verify(X) := find(X).

Overlapped: set(['c', 'good', 'defined', 'one', 'see', 'b', 'facts', 'x', 'prolog']) 
Overlap: 9 
Accuracy: 0.0909090909091 

Question:
11. What kind of function is
    let f x y z = x + y + z;;
    (A) curried
    (B) thunked
    (C) tupled
    (D) unified

Overlapped: set(['function', 'c', 'b', 'f', 'kind', 'let', 'x', 'z']) 
Overlap: 8 
Accuracy: 0.285714285714 

Question:
 6. Which language uses lazy evaluation by default?
    (A) Haskell
    (B) Lisp
    (C) Ocaml
    (D) Scheme

Overlapped: set(['c', 'b', 'language', 'lisp', 'ocaml', 'haskell', 'scheme']) 
Overlap: 7 
Accuracy: 0.333333333333 

Question:
10. Perl.  Write a program that reads files mentioned on the command
   line, and reads STDIN if none.  Do not open files -- use the <>
   operator.  At the end of the last file, print each word followed by
   the number of times it appears.  Print the words lexicographically.
   A word is any sequence of characters that matches m/\w+/.  An
   example is given.  [2pt]

   +----------------+----------------+
   |example input   | example output |
   +----------------+----------------+
   |This is a test. | This 2         |
   |test is a This. | a 3            |
   |is this a test? | is 3           |
   |testing this.   | test 3         |
   |                | testing 1      |
   |                | this 2         |
   +----------------+----------------+

Overlapped: set(['use', 'given', 'number', 'write', 'line', 'perl']) 
Overlap: 6 
Accuracy: 0.0413793103448 

Question:
 1. If a is a valid list, what is equal to a itself?
    (A) (car (cdr (cons a)))
    (B) (cons (car (cdr a)))
    (C) (cons (car a) (cdr a))
    (D) (cons (cdr a) (car a))

Overlapped: set(['c', 'cons', 'car', 'list', 'b', 'cdr']) 
Overlap: 6 
Accuracy: 0.115384615385 

Question:
 1. The basic algorithm used in type inference is:
    (A) code replication
    (B) interpretation
    (C) overloading
    (D) unification

Overlapped: set(['c', 'used', 'overloading', 'b', 'basic', 'type']) 
Overlap: 6 
Accuracy: 0.272727272727 

Question:
 3. What is 6?
    (A) (apply + '(1 2 3))
    (B) (cons + '(1 2 3))
    (C) (list + '(1 2 3))
    (D) (map + '(1 2 3))

Overlapped: set(['map', 'c', 'b', 'list', 'cons', 'apply']) 
Overlap: 6 
Accuracy: 0.11320754717 

Question:
10. In Perl, what command will put the names of files in the current
    directory in the variable @files?
    (A) @files = <ls>;
    (B) @files = `ls`;
    (C) @files = glob "ls";
    (D) @files = system 'ls';

Overlapped: set(['current', 'variable', 'c', 'b', 'perl']) 
Overlap: 5 
Accuracy: 0.1 

Question:
 5. What Perl statement will open a pipe to a subprocess and allow
    writing to its standard input?
    (A) open my $file, "$name|"
    (B) open my $file, "<$name"
    (C) open my $file, ">$name"
    (D) open my $file, "|$name"

Overlapped: set(['c', 'b', 'name', 'statement', 'perl']) 
Overlap: 5 
Accuracy: 0.0892857142857 

Question:
 3. In Perl, how can $p be made to be a reference to an array
    containing some integers?
    (A) $p = (1, 2, 3, 4);
    (B) $p = <1, 2, 3, 4>;
    (C) $p = [1, 2, 3, 4];
    (D) $p = {1, 2, 3, 4};

Overlapped: set(['array', 'b', 'c', 'perl']) 
Overlap: 4 
Accuracy: 0.0547945205479 

Question:
 5. Passing a parameter by ___ means that it is passed in unevaluated
    and then evaluated only if needed.
    (A) name
    (B) reference
    (C) value
    (D) value-result

Overlapped: set(['c', 'b', 'name', 'value']) 
Overlap: 4 
Accuracy: 0.166666666667 

Question:
 4. Which will unexpectedly start a comment?
    (A) let f = (*);;
    (B) let f = (+);;
    (C) let f = (-);;
    (D) let f = (/);;

Overlapped: set(['c', 'b', 'let', 'f']) 
Overlap: 4 
Accuracy: 0.0851063829787 

Question:
 2. What is the Perl equivalent to strerror(errno)?
    (A) "$!"
    (B) "$0"
    (C) "$?"
    (D) "$_"

Overlapped: set(['c', 'b', 'perl']) 
Overlap: 3 
Accuracy: 0.0882352941176 

Question:
 7. The Perl pattern equivalent to [a-zA-Z0-9_] is:
    (A) \d+
    (B) \s+
    (C) \t+
    (D) \w+

Overlapped: set(['c', 'b', 'perl']) 
Overlap: 3 
Accuracy: 0.136363636364 

Question:
 7. In Ocaml, what is 7?
    (A) (+) (3, 4);;
    (B) (+) 3 4;;
    (C) (+) 3, 4;;
    (D) 3 (+) 4;;

Overlapped: set(['c', 'b', 'ocaml']) 
Overlap: 3 
Accuracy: 0.063829787234 

Question:
10. If $key is a key, what is the value associated with it in a hash?
    $hash{$key} %hash{$key} &hash{$key} @hash{$key}

Overlapped: set(['value']) 
Overlap: 1 
Accuracy: 0.030303030303 

Question:
Overlapped: set([]) 
Overlap: 0 
Accuracy: 0 

